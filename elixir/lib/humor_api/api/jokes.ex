# NOTE: This file is auto generated by OpenAPI Generator 7.3.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule HumorAPI.Api.Jokes do
  @moduledoc """
  API calls for all endpoints tagged `Jokes`.
  """

  alias HumorAPI.Connection
  import HumorAPI.RequestBuilder

  @doc """
  Analyze Joke
  Analyze a joke. See https://humorapi.com/docs/#Analyze-Joke for more.

  ### Parameters

  - `connection` (HumorAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (String.t): Post the joke as plain text.

  ### Returns

  - `{:ok, HumorAPI.Model.AnalyzeJoke200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec analyze_joke(Tesla.Env.client, keyword()) :: {:ok, HumorAPI.Model.AnalyzeJoke200Response.t} | {:error, Tesla.Env.t}
  def analyze_joke(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/jokes/analyze")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, HumorAPI.Model.AnalyzeJoke200Response}
    ])
  end

  @doc """
  Downvote a Joke
  Downvote a joke. See https://humorapi.com/docs/#Downvote-Joke for more.

  ### Parameters

  - `connection` (HumorAPI.Connection): Connection to server
  - `id` (integer()): The object's id.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, HumorAPI.Model.SubmitJoke200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec downvote_joke(Tesla.Env.client, integer(), keyword()) :: {:ok, HumorAPI.Model.SubmitJoke200Response.t} | {:error, Tesla.Env.t}
  def downvote_joke(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/jokes/#{id}/downvote")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, HumorAPI.Model.SubmitJoke200Response}
    ])
  end

  @doc """
  Random Joke
  Get a random joke. See https://humorapi.com/docs/#Random-Joke for more.

  ### Parameters

  - `connection` (HumorAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:keywords` (String.t): A comma separated list of keywords.
    - `:"include-tags"` (String.t): A comma separated list of tags that the joke must have.
    - `:"exclude-tags"` (String.t): A comma separated list of tags that the joke must not have.
    - `:"min-rating"` (integer()): The minimum rating between 0 and 10 the result should have.
    - `:"max-length"` (integer()): The maximum number of letters in the joke.

  ### Returns

  - `{:ok, HumorAPI.Model.RandomJoke200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec random_joke(Tesla.Env.client, keyword()) :: {:ok, HumorAPI.Model.RandomJoke200Response.t} | {:error, Tesla.Env.t}
  def random_joke(connection, opts \\ []) do
    optional_params = %{
      :keywords => :query,
      :"include-tags" => :query,
      :"exclude-tags" => :query,
      :"min-rating" => :query,
      :"max-length" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/jokes/random")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, HumorAPI.Model.RandomJoke200Response}
    ])
  end

  @doc """
  Search Jokes
  Search for jokes. See https://humorapi.com/docs/#Search-Jokes for more.

  ### Parameters

  - `connection` (HumorAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:keywords` (String.t): A comma separated list of keywords.
    - `:"include-tags"` (String.t): A comma separated list of tags that the joke must have.
    - `:"exclude-tags"` (String.t): A comma separated list of tags that the joke must not have.
    - `:number` (integer()): The number of results to retrieve between 1 and 10.
    - `:"min-rating"` (integer()): The minimum rating between 0 and 10 the result should have.
    - `:"max-length"` (integer()): The maximum number of letters in the joke.
    - `:offset` (float()): The number of results to skip.

  ### Returns

  - `{:ok, HumorAPI.Model.SearchJokes200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec search_jokes(Tesla.Env.client, keyword()) :: {:ok, HumorAPI.Model.SearchJokes200Response.t} | {:error, Tesla.Env.t}
  def search_jokes(connection, opts \\ []) do
    optional_params = %{
      :keywords => :query,
      :"include-tags" => :query,
      :"exclude-tags" => :query,
      :number => :query,
      :"min-rating" => :query,
      :"max-length" => :query,
      :offset => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/jokes/search")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, HumorAPI.Model.SearchJokes200Response}
    ])
  end

  @doc """
  Submit Joke
  Submit a joke. See https://humorapi.com/docs/#Submit-Joke for more.

  ### Parameters

  - `connection` (HumorAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (String.t): Post the joke as plain text.

  ### Returns

  - `{:ok, HumorAPI.Model.SubmitJoke200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec submit_joke(Tesla.Env.client, keyword()) :: {:ok, HumorAPI.Model.SubmitJoke200Response.t} | {:error, Tesla.Env.t}
  def submit_joke(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/jokes")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, HumorAPI.Model.SubmitJoke200Response}
    ])
  end

  @doc """
  Upvote a Joke
  Upvote a joke. See https://humorapi.com/docs/#Upvote-Joke for more.

  ### Parameters

  - `connection` (HumorAPI.Connection): Connection to server
  - `id` (integer()): The object's id.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, HumorAPI.Model.SubmitJoke200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec upvote_joke(Tesla.Env.client, integer(), keyword()) :: {:ok, HumorAPI.Model.SubmitJoke200Response.t} | {:error, Tesla.Env.t}
  def upvote_joke(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/jokes/#{id}/upvote")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, HumorAPI.Model.SubmitJoke200Response}
    ])
  end
end
