# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule com.humorapi.client.Api.Other do
  @moduledoc """
  API calls for all endpoints tagged `Other`.
  """

  alias com.humorapi.client.Connection
  import com.humorapi.client.RequestBuilder


  @doc """
  Generate Nonsense Word
  Generate a nonsense word. See https://humorapi.com/docs/#Generate-Nonsense-Word for more.

  ## Parameters

  - connection (com.humorapi.client.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.humorapi.client.Model.InlineResponse2007{}} on success
  {:error, info} on failure
  """
  @spec generate_nonsense_word(Tesla.Env.client, keyword()) :: {:ok, com.humorapi.client.Model.InlineResponse2007.t} | {:error, Tesla.Env.t}
  def generate_nonsense_word(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/words/nonsense/random")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.humorapi.client.Model.InlineResponse2007{}}
    ])
  end

  @doc """
  Insult
  Insult somebody for doing something. See https://humorapi.com/docs/#Insult for more.

  ## Parameters

  - connection (com.humorapi.client.Connection): Connection to server
  - name (String.t): The person's name.
  - reason (String.t): The reason for the praise/insult.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.humorapi.client.Model.InlineResponse2005{}} on success
  {:error, info} on failure
  """
  @spec insult(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, com.humorapi.client.Model.InlineResponse2005.t} | {:error, Tesla.Env.t}
  def insult(connection, name, reason, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/insult")
    |> add_param(:query, :"name", name)
    |> add_param(:query, :"reason", reason)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.humorapi.client.Model.InlineResponse2005{}}
    ])
  end

  @doc """
  Praise
  Praise somebody for doing something. See https://humorapi.com/docs/#Praise for more.

  ## Parameters

  - connection (com.humorapi.client.Connection): Connection to server
  - name (String.t): The person's name.
  - reason (String.t): The reason for the praise/insult.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.humorapi.client.Model.InlineResponse2005{}} on success
  {:error, info} on failure
  """
  @spec praise(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, com.humorapi.client.Model.InlineResponse2005.t} | {:error, Tesla.Env.t}
  def praise(connection, name, reason, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/praise")
    |> add_param(:query, :"name", name)
    |> add_param(:query, :"reason", reason)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.humorapi.client.Model.InlineResponse2005{}}
    ])
  end

  @doc """
  Rate Word
  Rate the funniness of a word. See https://humorapi.com/docs/#Rate-Word for more.

  ## Parameters

  - connection (com.humorapi.client.Connection): Connection to server
  - word (String.t): The word to be rated.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.humorapi.client.Model.InlineResponse2006{}} on success
  {:error, info} on failure
  """
  @spec rate_word(Tesla.Env.client, String.t, keyword()) :: {:ok, com.humorapi.client.Model.InlineResponse2006.t} | {:error, Tesla.Env.t}
  def rate_word(connection, word, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/words/rate")
    |> add_param(:query, :"word", word)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.humorapi.client.Model.InlineResponse2006{}}
    ])
  end

  @doc """
  Search Gifs
  Search for gifs. See https://humorapi.com/docs/#Search-Gifs for more.

  ## Parameters

  - connection (com.humorapi.client.Connection): Connection to server
  - query (String.t): A search query.
  - opts (KeywordList): [optional] Optional parameters
    - :number (integer()): The number of results to retrieve between 1 and 10.
  ## Returns

  {:ok, %com.humorapi.client.Model.InlineResponse2001{}} on success
  {:error, info} on failure
  """
  @spec search_gifs(Tesla.Env.client, String.t, keyword()) :: {:ok, com.humorapi.client.Model.InlineResponse2001.t} | {:error, Tesla.Env.t}
  def search_gifs(connection, query, opts \\ []) do
    optional_params = %{
      :"number" => :query
    }
    %{}
    |> method(:get)
    |> url("/gif/search")
    |> add_param(:query, :"query", query)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.humorapi.client.Model.InlineResponse2001{}}
    ])
  end
end
