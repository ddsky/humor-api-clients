# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule com.humorapi.client.Api.Jokes do
  @moduledoc """
  API calls for all endpoints tagged `Jokes`.
  """

  alias com.humorapi.client.Connection
  import com.humorapi.client.RequestBuilder


  @doc """
  Analyze Joke
  Analyze a joke. See https://humorapi.com/docs/#Analyze-Joke for more.

  ## Parameters

  - connection (com.humorapi.client.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (String.t): Post the joke as plain text.
  ## Returns

  {:ok, %com.humorapi.client.Model.InlineResponse2009{}} on success
  {:error, info} on failure
  """
  @spec analyze_joke(Tesla.Env.client, keyword()) :: {:ok, com.humorapi.client.Model.InlineResponse2009.t} | {:error, Tesla.Env.t}
  def analyze_joke(connection, opts \\ []) do
    optional_params = %{
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/jokes/analyze")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.humorapi.client.Model.InlineResponse2009{}}
    ])
  end

  @doc """
  Downvote a Joke
  Downvote a joke. See https://humorapi.com/docs/#Downvote-Joke for more.

  ## Parameters

  - connection (com.humorapi.client.Connection): Connection to server
  - id (integer()): The object's id.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.humorapi.client.Model.InlineResponse2008{}} on success
  {:error, info} on failure
  """
  @spec downvote_joke(Tesla.Env.client, integer(), keyword()) :: {:ok, com.humorapi.client.Model.InlineResponse2008.t} | {:error, Tesla.Env.t}
  def downvote_joke(connection, id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/jokes/#{id}/downvote")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.humorapi.client.Model.InlineResponse2008{}}
    ])
  end

  @doc """
  Random Joke
  Get a random joke. See https://humorapi.com/docs/#Random-Joke for more.

  ## Parameters

  - connection (com.humorapi.client.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :keywords (String.t): A comma separated list of keywords.
    - :include_tags (String.t): A comma separated list of tags that the joke must have.
    - :exclude_tags (String.t): A comma separated list of tags that the joke must not have.
    - :min_rating (integer()): The minimum rating between 0 and 10 the result should have.
    - :max_length (integer()): The maximum number of letters in the joke.
  ## Returns

  {:ok, %com.humorapi.client.Model.InlineResponse2004{}} on success
  {:error, info} on failure
  """
  @spec random_joke(Tesla.Env.client, keyword()) :: {:ok, com.humorapi.client.Model.InlineResponse2004.t} | {:error, Tesla.Env.t}
  def random_joke(connection, opts \\ []) do
    optional_params = %{
      :"keywords" => :query,
      :"include-tags" => :query,
      :"exclude-tags" => :query,
      :"min-rating" => :query,
      :"max-length" => :query
    }
    %{}
    |> method(:get)
    |> url("/jokes/random")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.humorapi.client.Model.InlineResponse2004{}}
    ])
  end

  @doc """
  Search Jokes
  Search for jokes. See https://humorapi.com/docs/#Search-Jokes for more.

  ## Parameters

  - connection (com.humorapi.client.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :keywords (String.t): A comma separated list of keywords.
    - :include_tags (String.t): A comma separated list of tags that the joke must have.
    - :exclude_tags (String.t): A comma separated list of tags that the joke must not have.
    - :number (integer()): The number of results to retrieve between 1 and 10.
    - :min_rating (integer()): The minimum rating between 0 and 10 the result should have.
    - :max_length (integer()): The maximum number of letters in the joke.
  ## Returns

  {:ok, %com.humorapi.client.Model.InlineResponse200{}} on success
  {:error, info} on failure
  """
  @spec search_jokes(Tesla.Env.client, keyword()) :: {:ok, com.humorapi.client.Model.InlineResponse200.t} | {:error, Tesla.Env.t}
  def search_jokes(connection, opts \\ []) do
    optional_params = %{
      :"keywords" => :query,
      :"include-tags" => :query,
      :"exclude-tags" => :query,
      :"number" => :query,
      :"min-rating" => :query,
      :"max-length" => :query
    }
    %{}
    |> method(:get)
    |> url("/jokes/search")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.humorapi.client.Model.InlineResponse200{}}
    ])
  end

  @doc """
  Submit Joke
  Submit a joke. See https://humorapi.com/docs/#Submit-Joke for more.

  ## Parameters

  - connection (com.humorapi.client.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (String.t): Post the joke as plain text.
  ## Returns

  {:ok, %com.humorapi.client.Model.InlineResponse2008{}} on success
  {:error, info} on failure
  """
  @spec submit_joke(Tesla.Env.client, keyword()) :: {:ok, com.humorapi.client.Model.InlineResponse2008.t} | {:error, Tesla.Env.t}
  def submit_joke(connection, opts \\ []) do
    optional_params = %{
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/jokes")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.humorapi.client.Model.InlineResponse2008{}}
    ])
  end

  @doc """
  Upvote a Joke
  Upvote a joke. See https://humorapi.com/docs/#Upvote-Joke for more.

  ## Parameters

  - connection (com.humorapi.client.Connection): Connection to server
  - id (integer()): The object's id.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.humorapi.client.Model.InlineResponse2008{}} on success
  {:error, info} on failure
  """
  @spec upvote_joke(Tesla.Env.client, integer(), keyword()) :: {:ok, com.humorapi.client.Model.InlineResponse2008.t} | {:error, Tesla.Env.t}
  def upvote_joke(connection, id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/jokes/#{id}/upvote")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.humorapi.client.Model.InlineResponse2008{}}
    ])
  end
end
