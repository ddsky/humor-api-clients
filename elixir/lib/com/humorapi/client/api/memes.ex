# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule com.humorapi.client.Api.Memes do
  @moduledoc """
  API calls for all endpoints tagged `Memes`.
  """

  alias com.humorapi.client.Connection
  import com.humorapi.client.RequestBuilder


  @doc """
  Downvote a Meme
  Downvote a meme. See https://humorapi.com/docs/#Downvote-Meme for more.

  ## Parameters

  - connection (com.humorapi.client.Connection): Connection to server
  - id (integer()): The object's id.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, com.humorapi.client.Model.InlineResponse2008.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec downvote_meme(Tesla.Env.client, integer(), keyword()) :: {:ok, com.humorapi.client.Model.InlineResponse2008.t} | {:error, Tesla.Env.t}
  def downvote_meme(connection, id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/memes/#{id}/downvote")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.humorapi.client.Model.InlineResponse2008{}}
    ])
  end

  @doc """
  Random Meme
  Get a random meme. See https://humorapi.com/docs/#Random-Meme for more.

  ## Parameters

  - connection (com.humorapi.client.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :keywords (String.t): A comma separated list of keywords.
    - :keywords_in_image (boolean()): Whether the keywords should be found in the meme's image.
    - :media_type (String.t): The type of the content. Can be either 'image' or 'video' or specific formats such as 'jpg', 'png', 'gif', or 'mp4'.
    - :number (integer()): The number of results to retrieve between 1 and 10.
    - :min_rating (integer()): The minimum rating between 0 and 10 the result should have.
  ## Returns

  {:ok, com.humorapi.client.Model.InlineResponse2003.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec random_meme(Tesla.Env.client, keyword()) :: {:ok, com.humorapi.client.Model.InlineResponse2003.t} | {:error, Tesla.Env.t}
  def random_meme(connection, opts \\ []) do
    optional_params = %{
      :"keywords" => :query,
      :"keywords-in-image" => :query,
      :"media-type" => :query,
      :"number" => :query,
      :"min-rating" => :query
    }
    %{}
    |> method(:get)
    |> url("/memes/random")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.humorapi.client.Model.InlineResponse2003{}}
    ])
  end

  @doc """
  Search Memes
  Search for memes. See https://humorapi.com/docs/#Search-Memes for more.

  ## Parameters

  - connection (com.humorapi.client.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :keywords (String.t): A comma separated list of keywords.
    - :keywords_in_image (boolean()): Whether the keywords should be found in the meme's image.
    - :media_type (String.t): The type of the content. Can be either 'image' or 'video' or specific formats such as 'jpg', 'png', 'gif', or 'mp4'.
    - :number (integer()): The number of results to retrieve between 1 and 10.
    - :min_rating (integer()): The minimum rating between 0 and 10 the result should have.
    - :offset (float()): The number of results to skip.
  ## Returns

  {:ok, com.humorapi.client.Model.InlineResponse2002.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec search_memes(Tesla.Env.client, keyword()) :: {:ok, com.humorapi.client.Model.InlineResponse2002.t} | {:error, Tesla.Env.t}
  def search_memes(connection, opts \\ []) do
    optional_params = %{
      :"keywords" => :query,
      :"keywords-in-image" => :query,
      :"media-type" => :query,
      :"number" => :query,
      :"min-rating" => :query,
      :"offset" => :query
    }
    %{}
    |> method(:get)
    |> url("/memes/search")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.humorapi.client.Model.InlineResponse2002{}}
    ])
  end

  @doc """
  Upvote a Meme
  Upvote a meme. See https://humorapi.com/docs/#Upvote-Meme for more.

  ## Parameters

  - connection (com.humorapi.client.Connection): Connection to server
  - id (integer()): The object's id.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, com.humorapi.client.Model.InlineResponse2008.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec upvote_meme(Tesla.Env.client, integer(), keyword()) :: {:ok, com.humorapi.client.Model.InlineResponse2008.t} | {:error, Tesla.Env.t}
  def upvote_meme(connection, id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/memes/#{id}/upvote")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.humorapi.client.Model.InlineResponse2008{}}
    ])
  end
end
