<?php
/**
 * MemesApi
 * PHP version 5
 *
 * @category Class
 * @package  com.humorapi.client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Humor API
 *
 * Awesome Humor API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@humorapi.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace com.humorapi.client\com.humorapi;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use com.humorapi.client\ApiException;
use com.humorapi.client\Configuration;
use com.humorapi.client\HeaderSelector;
use com.humorapi.client\ObjectSerializer;

/**
 * MemesApi Class Doc Comment
 *
 * @category Class
 * @package  com.humorapi.client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MemesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation downvoteMeme
     *
     * Downvote a Meme
     *
     * @param  int $id The object&#39;s id. (required)
     *
     * @throws \com.humorapi.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com.humorapi.client\com.humorapi.client.model\InlineResponse2008
     */
    public function downvoteMeme($id)
    {
        list($response) = $this->downvoteMemeWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation downvoteMemeWithHttpInfo
     *
     * Downvote a Meme
     *
     * @param  int $id The object&#39;s id. (required)
     *
     * @throws \com.humorapi.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com.humorapi.client\com.humorapi.client.model\InlineResponse2008, HTTP status code, HTTP response headers (array of strings)
     */
    public function downvoteMemeWithHttpInfo($id)
    {
        $request = $this->downvoteMemeRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\com.humorapi.client\com.humorapi.client.model\InlineResponse2008' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.humorapi.client\com.humorapi.client.model\InlineResponse2008', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\com.humorapi.client\com.humorapi.client.model\InlineResponse2008';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.humorapi.client\com.humorapi.client.model\InlineResponse2008',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation downvoteMemeAsync
     *
     * Downvote a Meme
     *
     * @param  int $id The object&#39;s id. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downvoteMemeAsync($id)
    {
        return $this->downvoteMemeAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downvoteMemeAsyncWithHttpInfo
     *
     * Downvote a Meme
     *
     * @param  int $id The object&#39;s id. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downvoteMemeAsyncWithHttpInfo($id)
    {
        $returnType = '\com.humorapi.client\com.humorapi.client.model\InlineResponse2008';
        $request = $this->downvoteMemeRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downvoteMeme'
     *
     * @param  int $id The object&#39;s id. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downvoteMemeRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling downvoteMeme'
            );
        }
        if ($id < 1) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling MemesApi.downvoteMeme, must be bigger than or equal to 1.');
        }


        $resourcePath = '/memes/{id}/downvote';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation randomMeme
     *
     * Random Meme
     *
     * @param  string $keywords A comma separated list of keywords. (optional)
     * @param  bool $keywords_in_image Whether the keywords should be found in the meme&#39;s image. (optional)
     * @param  string $media_type The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)
     * @param  int $number The number of results to retrieve between 1 and 10. (optional)
     * @param  int $min_rating The minimum rating between 0 and 10 the result should have. (optional)
     *
     * @throws \com.humorapi.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com.humorapi.client\com.humorapi.client.model\InlineResponse2003
     */
    public function randomMeme($keywords = null, $keywords_in_image = null, $media_type = null, $number = null, $min_rating = null)
    {
        list($response) = $this->randomMemeWithHttpInfo($keywords, $keywords_in_image, $media_type, $number, $min_rating);
        return $response;
    }

    /**
     * Operation randomMemeWithHttpInfo
     *
     * Random Meme
     *
     * @param  string $keywords A comma separated list of keywords. (optional)
     * @param  bool $keywords_in_image Whether the keywords should be found in the meme&#39;s image. (optional)
     * @param  string $media_type The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)
     * @param  int $number The number of results to retrieve between 1 and 10. (optional)
     * @param  int $min_rating The minimum rating between 0 and 10 the result should have. (optional)
     *
     * @throws \com.humorapi.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com.humorapi.client\com.humorapi.client.model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     */
    public function randomMemeWithHttpInfo($keywords = null, $keywords_in_image = null, $media_type = null, $number = null, $min_rating = null)
    {
        $request = $this->randomMemeRequest($keywords, $keywords_in_image, $media_type, $number, $min_rating);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\com.humorapi.client\com.humorapi.client.model\InlineResponse2003' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.humorapi.client\com.humorapi.client.model\InlineResponse2003', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\com.humorapi.client\com.humorapi.client.model\InlineResponse2003';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.humorapi.client\com.humorapi.client.model\InlineResponse2003',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation randomMemeAsync
     *
     * Random Meme
     *
     * @param  string $keywords A comma separated list of keywords. (optional)
     * @param  bool $keywords_in_image Whether the keywords should be found in the meme&#39;s image. (optional)
     * @param  string $media_type The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)
     * @param  int $number The number of results to retrieve between 1 and 10. (optional)
     * @param  int $min_rating The minimum rating between 0 and 10 the result should have. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function randomMemeAsync($keywords = null, $keywords_in_image = null, $media_type = null, $number = null, $min_rating = null)
    {
        return $this->randomMemeAsyncWithHttpInfo($keywords, $keywords_in_image, $media_type, $number, $min_rating)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation randomMemeAsyncWithHttpInfo
     *
     * Random Meme
     *
     * @param  string $keywords A comma separated list of keywords. (optional)
     * @param  bool $keywords_in_image Whether the keywords should be found in the meme&#39;s image. (optional)
     * @param  string $media_type The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)
     * @param  int $number The number of results to retrieve between 1 and 10. (optional)
     * @param  int $min_rating The minimum rating between 0 and 10 the result should have. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function randomMemeAsyncWithHttpInfo($keywords = null, $keywords_in_image = null, $media_type = null, $number = null, $min_rating = null)
    {
        $returnType = '\com.humorapi.client\com.humorapi.client.model\InlineResponse2003';
        $request = $this->randomMemeRequest($keywords, $keywords_in_image, $media_type, $number, $min_rating);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'randomMeme'
     *
     * @param  string $keywords A comma separated list of keywords. (optional)
     * @param  bool $keywords_in_image Whether the keywords should be found in the meme&#39;s image. (optional)
     * @param  string $media_type The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)
     * @param  int $number The number of results to retrieve between 1 and 10. (optional)
     * @param  int $min_rating The minimum rating between 0 and 10 the result should have. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function randomMemeRequest($keywords = null, $keywords_in_image = null, $media_type = null, $number = null, $min_rating = null)
    {
        if ($number !== null && $number > 10) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling MemesApi.randomMeme, must be smaller than or equal to 10.');
        }
        if ($number !== null && $number < 1) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling MemesApi.randomMeme, must be bigger than or equal to 1.');
        }

        if ($min_rating !== null && strlen($min_rating) < 0) {
            throw new \InvalidArgumentException('invalid length for "$min_rating" when calling MemesApi.randomMeme, must be bigger than or equal to 0.');
        }
        if ($min_rating !== null && $min_rating > 10) {
            throw new \InvalidArgumentException('invalid value for "$min_rating" when calling MemesApi.randomMeme, must be smaller than or equal to 10.');
        }
        if ($min_rating !== null && $min_rating < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_rating" when calling MemesApi.randomMeme, must be bigger than or equal to 0.');
        }


        $resourcePath = '/memes/random';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($keywords !== null) {
            $queryParams['keywords'] = ObjectSerializer::toQueryValue($keywords);
        }
        // query params
        if ($keywords_in_image !== null) {
            $queryParams['keywords-in-image'] = ObjectSerializer::toQueryValue($keywords_in_image);
        }
        // query params
        if ($media_type !== null) {
            $queryParams['media-type'] = ObjectSerializer::toQueryValue($media_type);
        }
        // query params
        if ($number !== null) {
            $queryParams['number'] = ObjectSerializer::toQueryValue($number);
        }
        // query params
        if ($min_rating !== null) {
            $queryParams['min-rating'] = ObjectSerializer::toQueryValue($min_rating);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchMemes
     *
     * Search Memes
     *
     * @param  string $keywords A comma separated list of keywords. (optional)
     * @param  bool $keywords_in_image Whether the keywords should be found in the meme&#39;s image. (optional)
     * @param  string $media_type The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)
     * @param  int $number The number of results to retrieve between 1 and 10. (optional)
     * @param  int $min_rating The minimum rating between 0 and 10 the result should have. (optional)
     * @param  float $offset The number of results to skip. (optional)
     *
     * @throws \com.humorapi.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com.humorapi.client\com.humorapi.client.model\InlineResponse2002
     */
    public function searchMemes($keywords = null, $keywords_in_image = null, $media_type = null, $number = null, $min_rating = null, $offset = null)
    {
        list($response) = $this->searchMemesWithHttpInfo($keywords, $keywords_in_image, $media_type, $number, $min_rating, $offset);
        return $response;
    }

    /**
     * Operation searchMemesWithHttpInfo
     *
     * Search Memes
     *
     * @param  string $keywords A comma separated list of keywords. (optional)
     * @param  bool $keywords_in_image Whether the keywords should be found in the meme&#39;s image. (optional)
     * @param  string $media_type The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)
     * @param  int $number The number of results to retrieve between 1 and 10. (optional)
     * @param  int $min_rating The minimum rating between 0 and 10 the result should have. (optional)
     * @param  float $offset The number of results to skip. (optional)
     *
     * @throws \com.humorapi.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com.humorapi.client\com.humorapi.client.model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchMemesWithHttpInfo($keywords = null, $keywords_in_image = null, $media_type = null, $number = null, $min_rating = null, $offset = null)
    {
        $request = $this->searchMemesRequest($keywords, $keywords_in_image, $media_type, $number, $min_rating, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\com.humorapi.client\com.humorapi.client.model\InlineResponse2002' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.humorapi.client\com.humorapi.client.model\InlineResponse2002', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\com.humorapi.client\com.humorapi.client.model\InlineResponse2002';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.humorapi.client\com.humorapi.client.model\InlineResponse2002',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchMemesAsync
     *
     * Search Memes
     *
     * @param  string $keywords A comma separated list of keywords. (optional)
     * @param  bool $keywords_in_image Whether the keywords should be found in the meme&#39;s image. (optional)
     * @param  string $media_type The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)
     * @param  int $number The number of results to retrieve between 1 and 10. (optional)
     * @param  int $min_rating The minimum rating between 0 and 10 the result should have. (optional)
     * @param  float $offset The number of results to skip. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchMemesAsync($keywords = null, $keywords_in_image = null, $media_type = null, $number = null, $min_rating = null, $offset = null)
    {
        return $this->searchMemesAsyncWithHttpInfo($keywords, $keywords_in_image, $media_type, $number, $min_rating, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchMemesAsyncWithHttpInfo
     *
     * Search Memes
     *
     * @param  string $keywords A comma separated list of keywords. (optional)
     * @param  bool $keywords_in_image Whether the keywords should be found in the meme&#39;s image. (optional)
     * @param  string $media_type The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)
     * @param  int $number The number of results to retrieve between 1 and 10. (optional)
     * @param  int $min_rating The minimum rating between 0 and 10 the result should have. (optional)
     * @param  float $offset The number of results to skip. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchMemesAsyncWithHttpInfo($keywords = null, $keywords_in_image = null, $media_type = null, $number = null, $min_rating = null, $offset = null)
    {
        $returnType = '\com.humorapi.client\com.humorapi.client.model\InlineResponse2002';
        $request = $this->searchMemesRequest($keywords, $keywords_in_image, $media_type, $number, $min_rating, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchMemes'
     *
     * @param  string $keywords A comma separated list of keywords. (optional)
     * @param  bool $keywords_in_image Whether the keywords should be found in the meme&#39;s image. (optional)
     * @param  string $media_type The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)
     * @param  int $number The number of results to retrieve between 1 and 10. (optional)
     * @param  int $min_rating The minimum rating between 0 and 10 the result should have. (optional)
     * @param  float $offset The number of results to skip. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchMemesRequest($keywords = null, $keywords_in_image = null, $media_type = null, $number = null, $min_rating = null, $offset = null)
    {
        if ($number !== null && $number > 10) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling MemesApi.searchMemes, must be smaller than or equal to 10.');
        }
        if ($number !== null && $number < 1) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling MemesApi.searchMemes, must be bigger than or equal to 1.');
        }

        if ($min_rating !== null && strlen($min_rating) < 0) {
            throw new \InvalidArgumentException('invalid length for "$min_rating" when calling MemesApi.searchMemes, must be bigger than or equal to 0.');
        }
        if ($min_rating !== null && $min_rating > 10) {
            throw new \InvalidArgumentException('invalid value for "$min_rating" when calling MemesApi.searchMemes, must be smaller than or equal to 10.');
        }
        if ($min_rating !== null && $min_rating < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_rating" when calling MemesApi.searchMemes, must be bigger than or equal to 0.');
        }

        if ($offset !== null && $offset > 1000) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling MemesApi.searchMemes, must be smaller than or equal to 1000.');
        }
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling MemesApi.searchMemes, must be bigger than or equal to 0.');
        }


        $resourcePath = '/memes/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($keywords !== null) {
            $queryParams['keywords'] = ObjectSerializer::toQueryValue($keywords);
        }
        // query params
        if ($keywords_in_image !== null) {
            $queryParams['keywords-in-image'] = ObjectSerializer::toQueryValue($keywords_in_image);
        }
        // query params
        if ($media_type !== null) {
            $queryParams['media-type'] = ObjectSerializer::toQueryValue($media_type);
        }
        // query params
        if ($number !== null) {
            $queryParams['number'] = ObjectSerializer::toQueryValue($number);
        }
        // query params
        if ($min_rating !== null) {
            $queryParams['min-rating'] = ObjectSerializer::toQueryValue($min_rating);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation upvoteMeme
     *
     * Upvote a Meme
     *
     * @param  int $id The object&#39;s id. (required)
     *
     * @throws \com.humorapi.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com.humorapi.client\com.humorapi.client.model\InlineResponse2008
     */
    public function upvoteMeme($id)
    {
        list($response) = $this->upvoteMemeWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation upvoteMemeWithHttpInfo
     *
     * Upvote a Meme
     *
     * @param  int $id The object&#39;s id. (required)
     *
     * @throws \com.humorapi.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com.humorapi.client\com.humorapi.client.model\InlineResponse2008, HTTP status code, HTTP response headers (array of strings)
     */
    public function upvoteMemeWithHttpInfo($id)
    {
        $request = $this->upvoteMemeRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\com.humorapi.client\com.humorapi.client.model\InlineResponse2008' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.humorapi.client\com.humorapi.client.model\InlineResponse2008', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\com.humorapi.client\com.humorapi.client.model\InlineResponse2008';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.humorapi.client\com.humorapi.client.model\InlineResponse2008',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation upvoteMemeAsync
     *
     * Upvote a Meme
     *
     * @param  int $id The object&#39;s id. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upvoteMemeAsync($id)
    {
        return $this->upvoteMemeAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation upvoteMemeAsyncWithHttpInfo
     *
     * Upvote a Meme
     *
     * @param  int $id The object&#39;s id. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upvoteMemeAsyncWithHttpInfo($id)
    {
        $returnType = '\com.humorapi.client\com.humorapi.client.model\InlineResponse2008';
        $request = $this->upvoteMemeRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'upvoteMeme'
     *
     * @param  int $id The object&#39;s id. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function upvoteMemeRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling upvoteMeme'
            );
        }
        if ($id < 1) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling MemesApi.upvoteMeme, must be bigger than or equal to 1.');
        }


        $resourcePath = '/memes/{id}/upvote';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
