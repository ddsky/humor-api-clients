/*
 * Humor API
 * Awesome Humor API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@humorapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.humorapi;

import com.humorapi.client.ApiCallback;
import com.humorapi.client.ApiClient;
import com.humorapi.client.ApiException;
import com.humorapi.client.ApiResponse;
import com.humorapi.client.Configuration;
import com.humorapi.client.Pair;
import com.humorapi.client.ProgressRequestBody;
import com.humorapi.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.humorapi.client.model.InlineResponse200;
import com.humorapi.client.model.InlineResponse2004;
import com.humorapi.client.model.InlineResponse2008;
import com.humorapi.client.model.InlineResponse2009;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JokesApi {
    private ApiClient localVarApiClient;

    public JokesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JokesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for analyzeJoke
     * @param body Post the joke as plain text. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call analyzeJokeCall(String body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/jokes/analyze";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyzeJokeValidateBeforeCall(String body, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = analyzeJokeCall(body, _callback);
        return localVarCall;

    }

    /**
     * Analyze Joke
     * Analyze a joke. See https://humorapi.com/docs/#Analyze-Joke for more.
     * @param body Post the joke as plain text. (optional)
     * @return InlineResponse2009
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2009 analyzeJoke(String body) throws ApiException {
        ApiResponse<InlineResponse2009> localVarResp = analyzeJokeWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Analyze Joke
     * Analyze a joke. See https://humorapi.com/docs/#Analyze-Joke for more.
     * @param body Post the joke as plain text. (optional)
     * @return ApiResponse&lt;InlineResponse2009&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2009> analyzeJokeWithHttpInfo(String body) throws ApiException {
        okhttp3.Call localVarCall = analyzeJokeValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<InlineResponse2009>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Analyze Joke (asynchronously)
     * Analyze a joke. See https://humorapi.com/docs/#Analyze-Joke for more.
     * @param body Post the joke as plain text. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call analyzeJokeAsync(String body, final ApiCallback<InlineResponse2009> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyzeJokeValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2009>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downvoteJoke
     * @param id The object&#39;s id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call downvoteJokeCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/jokes/{id}/downvote"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downvoteJokeValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling downvoteJoke(Async)");
        }
        

        okhttp3.Call localVarCall = downvoteJokeCall(id, _callback);
        return localVarCall;

    }

    /**
     * Downvote a Joke
     * Downvote a joke. See https://humorapi.com/docs/#Downvote-Joke for more.
     * @param id The object&#39;s id. (required)
     * @return InlineResponse2008
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2008 downvoteJoke(Integer id) throws ApiException {
        ApiResponse<InlineResponse2008> localVarResp = downvoteJokeWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Downvote a Joke
     * Downvote a joke. See https://humorapi.com/docs/#Downvote-Joke for more.
     * @param id The object&#39;s id. (required)
     * @return ApiResponse&lt;InlineResponse2008&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2008> downvoteJokeWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = downvoteJokeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Downvote a Joke (asynchronously)
     * Downvote a joke. See https://humorapi.com/docs/#Downvote-Joke for more.
     * @param id The object&#39;s id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call downvoteJokeAsync(Integer id, final ApiCallback<InlineResponse2008> _callback) throws ApiException {

        okhttp3.Call localVarCall = downvoteJokeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for randomJoke
     * @param keywords A comma separated list of keywords. (optional)
     * @param includeTags A comma separated list of tags that the joke must have. (optional)
     * @param excludeTags A comma separated list of tags that the joke must not have. (optional)
     * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
     * @param maxLength The maximum number of letters in the joke. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call randomJokeCall(String keywords, String includeTags, String excludeTags, Integer minRating, Integer maxLength, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/jokes/random";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keywords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keywords", keywords));
        }

        if (includeTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include-tags", includeTags));
        }

        if (excludeTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude-tags", excludeTags));
        }

        if (minRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min-rating", minRating));
        }

        if (maxLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-length", maxLength));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call randomJokeValidateBeforeCall(String keywords, String includeTags, String excludeTags, Integer minRating, Integer maxLength, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = randomJokeCall(keywords, includeTags, excludeTags, minRating, maxLength, _callback);
        return localVarCall;

    }

    /**
     * Random Joke
     * Get a random joke. See https://humorapi.com/docs/#Random-Joke for more.
     * @param keywords A comma separated list of keywords. (optional)
     * @param includeTags A comma separated list of tags that the joke must have. (optional)
     * @param excludeTags A comma separated list of tags that the joke must not have. (optional)
     * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
     * @param maxLength The maximum number of letters in the joke. (optional)
     * @return InlineResponse2004
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2004 randomJoke(String keywords, String includeTags, String excludeTags, Integer minRating, Integer maxLength) throws ApiException {
        ApiResponse<InlineResponse2004> localVarResp = randomJokeWithHttpInfo(keywords, includeTags, excludeTags, minRating, maxLength);
        return localVarResp.getData();
    }

    /**
     * Random Joke
     * Get a random joke. See https://humorapi.com/docs/#Random-Joke for more.
     * @param keywords A comma separated list of keywords. (optional)
     * @param includeTags A comma separated list of tags that the joke must have. (optional)
     * @param excludeTags A comma separated list of tags that the joke must not have. (optional)
     * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
     * @param maxLength The maximum number of letters in the joke. (optional)
     * @return ApiResponse&lt;InlineResponse2004&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2004> randomJokeWithHttpInfo(String keywords, String includeTags, String excludeTags, Integer minRating, Integer maxLength) throws ApiException {
        okhttp3.Call localVarCall = randomJokeValidateBeforeCall(keywords, includeTags, excludeTags, minRating, maxLength, null);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Random Joke (asynchronously)
     * Get a random joke. See https://humorapi.com/docs/#Random-Joke for more.
     * @param keywords A comma separated list of keywords. (optional)
     * @param includeTags A comma separated list of tags that the joke must have. (optional)
     * @param excludeTags A comma separated list of tags that the joke must not have. (optional)
     * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
     * @param maxLength The maximum number of letters in the joke. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call randomJokeAsync(String keywords, String includeTags, String excludeTags, Integer minRating, Integer maxLength, final ApiCallback<InlineResponse2004> _callback) throws ApiException {

        okhttp3.Call localVarCall = randomJokeValidateBeforeCall(keywords, includeTags, excludeTags, minRating, maxLength, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchJokes
     * @param keywords A comma separated list of keywords. (optional)
     * @param includeTags A comma separated list of tags that the joke must have. (optional)
     * @param excludeTags A comma separated list of tags that the joke must not have. (optional)
     * @param number The number of results to retrieve between 1 and 10. (optional)
     * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
     * @param maxLength The maximum number of letters in the joke. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call searchJokesCall(String keywords, String includeTags, String excludeTags, Integer number, Integer minRating, Integer maxLength, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/jokes/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keywords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keywords", keywords));
        }

        if (includeTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include-tags", includeTags));
        }

        if (excludeTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude-tags", excludeTags));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        if (minRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min-rating", minRating));
        }

        if (maxLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-length", maxLength));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchJokesValidateBeforeCall(String keywords, String includeTags, String excludeTags, Integer number, Integer minRating, Integer maxLength, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = searchJokesCall(keywords, includeTags, excludeTags, number, minRating, maxLength, _callback);
        return localVarCall;

    }

    /**
     * Search Jokes
     * Search for jokes. See https://humorapi.com/docs/#Search-Jokes for more.
     * @param keywords A comma separated list of keywords. (optional)
     * @param includeTags A comma separated list of tags that the joke must have. (optional)
     * @param excludeTags A comma separated list of tags that the joke must not have. (optional)
     * @param number The number of results to retrieve between 1 and 10. (optional)
     * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
     * @param maxLength The maximum number of letters in the joke. (optional)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 searchJokes(String keywords, String includeTags, String excludeTags, Integer number, Integer minRating, Integer maxLength) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = searchJokesWithHttpInfo(keywords, includeTags, excludeTags, number, minRating, maxLength);
        return localVarResp.getData();
    }

    /**
     * Search Jokes
     * Search for jokes. See https://humorapi.com/docs/#Search-Jokes for more.
     * @param keywords A comma separated list of keywords. (optional)
     * @param includeTags A comma separated list of tags that the joke must have. (optional)
     * @param excludeTags A comma separated list of tags that the joke must not have. (optional)
     * @param number The number of results to retrieve between 1 and 10. (optional)
     * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
     * @param maxLength The maximum number of letters in the joke. (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> searchJokesWithHttpInfo(String keywords, String includeTags, String excludeTags, Integer number, Integer minRating, Integer maxLength) throws ApiException {
        okhttp3.Call localVarCall = searchJokesValidateBeforeCall(keywords, includeTags, excludeTags, number, minRating, maxLength, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Jokes (asynchronously)
     * Search for jokes. See https://humorapi.com/docs/#Search-Jokes for more.
     * @param keywords A comma separated list of keywords. (optional)
     * @param includeTags A comma separated list of tags that the joke must have. (optional)
     * @param excludeTags A comma separated list of tags that the joke must not have. (optional)
     * @param number The number of results to retrieve between 1 and 10. (optional)
     * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
     * @param maxLength The maximum number of letters in the joke. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call searchJokesAsync(String keywords, String includeTags, String excludeTags, Integer number, Integer minRating, Integer maxLength, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchJokesValidateBeforeCall(keywords, includeTags, excludeTags, number, minRating, maxLength, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitJoke
     * @param body Post the joke as plain text. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call submitJokeCall(String body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/jokes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitJokeValidateBeforeCall(String body, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = submitJokeCall(body, _callback);
        return localVarCall;

    }

    /**
     * Submit Joke
     * Submit a joke. See https://humorapi.com/docs/#Submit-Joke for more.
     * @param body Post the joke as plain text. (optional)
     * @return InlineResponse2008
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2008 submitJoke(String body) throws ApiException {
        ApiResponse<InlineResponse2008> localVarResp = submitJokeWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Submit Joke
     * Submit a joke. See https://humorapi.com/docs/#Submit-Joke for more.
     * @param body Post the joke as plain text. (optional)
     * @return ApiResponse&lt;InlineResponse2008&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2008> submitJokeWithHttpInfo(String body) throws ApiException {
        okhttp3.Call localVarCall = submitJokeValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit Joke (asynchronously)
     * Submit a joke. See https://humorapi.com/docs/#Submit-Joke for more.
     * @param body Post the joke as plain text. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call submitJokeAsync(String body, final ApiCallback<InlineResponse2008> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitJokeValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for upvoteJoke
     * @param id The object&#39;s id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call upvoteJokeCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/jokes/{id}/upvote"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upvoteJokeValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling upvoteJoke(Async)");
        }
        

        okhttp3.Call localVarCall = upvoteJokeCall(id, _callback);
        return localVarCall;

    }

    /**
     * Upvote a Joke
     * Upvote a joke. See https://humorapi.com/docs/#Upvote-Joke for more.
     * @param id The object&#39;s id. (required)
     * @return InlineResponse2008
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2008 upvoteJoke(Integer id) throws ApiException {
        ApiResponse<InlineResponse2008> localVarResp = upvoteJokeWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Upvote a Joke
     * Upvote a joke. See https://humorapi.com/docs/#Upvote-Joke for more.
     * @param id The object&#39;s id. (required)
     * @return ApiResponse&lt;InlineResponse2008&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2008> upvoteJokeWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = upvoteJokeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upvote a Joke (asynchronously)
     * Upvote a joke. See https://humorapi.com/docs/#Upvote-Joke for more.
     * @param id The object&#39;s id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call upvoteJokeAsync(Integer id, final ApiCallback<InlineResponse2008> _callback) throws ApiException {

        okhttp3.Call localVarCall = upvoteJokeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
