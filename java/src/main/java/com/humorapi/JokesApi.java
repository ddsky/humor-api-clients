/*
 * Humor API
 * Awesome Humor API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@humorapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.humorapi;

import com.humorapi.client.ApiCallback;
import com.humorapi.client.ApiClient;
import com.humorapi.client.ApiException;
import com.humorapi.client.ApiResponse;
import com.humorapi.client.Configuration;
import com.humorapi.client.Pair;
import com.humorapi.client.ProgressRequestBody;
import com.humorapi.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.humorapi.client.model.AnalyzeJoke200Response;
import java.math.BigDecimal;
import com.humorapi.client.model.RandomJoke200Response;
import com.humorapi.client.model.SearchJokes200Response;
import com.humorapi.client.model.SubmitJoke200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JokesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JokesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JokesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for analyzeJoke
     * @param body Post the joke as plain text. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful analysis </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyzeJokeCall(String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/jokes/analyze";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyzeJokeValidateBeforeCall(String body, final ApiCallback _callback) throws ApiException {
        return analyzeJokeCall(body, _callback);

    }

    /**
     * Analyze Joke
     * Analyze a joke. See https://humorapi.com/docs/#Analyze-Joke for more.
     * @param body Post the joke as plain text. (optional)
     * @return AnalyzeJoke200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful analysis </td><td>  -  </td></tr>
     </table>
     */
    public AnalyzeJoke200Response analyzeJoke(String body) throws ApiException {
        ApiResponse<AnalyzeJoke200Response> localVarResp = analyzeJokeWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Analyze Joke
     * Analyze a joke. See https://humorapi.com/docs/#Analyze-Joke for more.
     * @param body Post the joke as plain text. (optional)
     * @return ApiResponse&lt;AnalyzeJoke200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful analysis </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyzeJoke200Response> analyzeJokeWithHttpInfo(String body) throws ApiException {
        okhttp3.Call localVarCall = analyzeJokeValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<AnalyzeJoke200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Analyze Joke (asynchronously)
     * Analyze a joke. See https://humorapi.com/docs/#Analyze-Joke for more.
     * @param body Post the joke as plain text. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful analysis </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyzeJokeAsync(String body, final ApiCallback<AnalyzeJoke200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyzeJokeValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<AnalyzeJoke200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downvoteJoke
     * @param id The object&#39;s id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful downvote </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downvoteJokeCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jokes/{id}/downvote"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downvoteJokeValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling downvoteJoke(Async)");
        }

        return downvoteJokeCall(id, _callback);

    }

    /**
     * Downvote a Joke
     * Downvote a joke. See https://humorapi.com/docs/#Downvote-Joke for more.
     * @param id The object&#39;s id. (required)
     * @return SubmitJoke200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful downvote </td><td>  -  </td></tr>
     </table>
     */
    public SubmitJoke200Response downvoteJoke(Integer id) throws ApiException {
        ApiResponse<SubmitJoke200Response> localVarResp = downvoteJokeWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Downvote a Joke
     * Downvote a joke. See https://humorapi.com/docs/#Downvote-Joke for more.
     * @param id The object&#39;s id. (required)
     * @return ApiResponse&lt;SubmitJoke200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful downvote </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubmitJoke200Response> downvoteJokeWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = downvoteJokeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SubmitJoke200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Downvote a Joke (asynchronously)
     * Downvote a joke. See https://humorapi.com/docs/#Downvote-Joke for more.
     * @param id The object&#39;s id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful downvote </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downvoteJokeAsync(Integer id, final ApiCallback<SubmitJoke200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = downvoteJokeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SubmitJoke200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for randomJoke
     * @param keywords A comma separated list of keywords. (optional)
     * @param includeTags A comma separated list of tags that the joke must have. (optional)
     * @param excludeTags A comma separated list of tags that the joke must not have. (optional)
     * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
     * @param maxLength The maximum number of letters in the joke. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Random Joke Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call randomJokeCall(String keywords, String includeTags, String excludeTags, Integer minRating, Integer maxLength, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jokes/random";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (keywords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keywords", keywords));
        }

        if (includeTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include-tags", includeTags));
        }

        if (excludeTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude-tags", excludeTags));
        }

        if (minRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min-rating", minRating));
        }

        if (maxLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-length", maxLength));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call randomJokeValidateBeforeCall(String keywords, String includeTags, String excludeTags, Integer minRating, Integer maxLength, final ApiCallback _callback) throws ApiException {
        return randomJokeCall(keywords, includeTags, excludeTags, minRating, maxLength, _callback);

    }

    /**
     * Random Joke
     * Get a random joke. See https://humorapi.com/docs/#Random-Joke for more.
     * @param keywords A comma separated list of keywords. (optional)
     * @param includeTags A comma separated list of tags that the joke must have. (optional)
     * @param excludeTags A comma separated list of tags that the joke must not have. (optional)
     * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
     * @param maxLength The maximum number of letters in the joke. (optional)
     * @return RandomJoke200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Random Joke Response </td><td>  -  </td></tr>
     </table>
     */
    public RandomJoke200Response randomJoke(String keywords, String includeTags, String excludeTags, Integer minRating, Integer maxLength) throws ApiException {
        ApiResponse<RandomJoke200Response> localVarResp = randomJokeWithHttpInfo(keywords, includeTags, excludeTags, minRating, maxLength);
        return localVarResp.getData();
    }

    /**
     * Random Joke
     * Get a random joke. See https://humorapi.com/docs/#Random-Joke for more.
     * @param keywords A comma separated list of keywords. (optional)
     * @param includeTags A comma separated list of tags that the joke must have. (optional)
     * @param excludeTags A comma separated list of tags that the joke must not have. (optional)
     * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
     * @param maxLength The maximum number of letters in the joke. (optional)
     * @return ApiResponse&lt;RandomJoke200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Random Joke Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RandomJoke200Response> randomJokeWithHttpInfo(String keywords, String includeTags, String excludeTags, Integer minRating, Integer maxLength) throws ApiException {
        okhttp3.Call localVarCall = randomJokeValidateBeforeCall(keywords, includeTags, excludeTags, minRating, maxLength, null);
        Type localVarReturnType = new TypeToken<RandomJoke200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Random Joke (asynchronously)
     * Get a random joke. See https://humorapi.com/docs/#Random-Joke for more.
     * @param keywords A comma separated list of keywords. (optional)
     * @param includeTags A comma separated list of tags that the joke must have. (optional)
     * @param excludeTags A comma separated list of tags that the joke must not have. (optional)
     * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
     * @param maxLength The maximum number of letters in the joke. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Random Joke Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call randomJokeAsync(String keywords, String includeTags, String excludeTags, Integer minRating, Integer maxLength, final ApiCallback<RandomJoke200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = randomJokeValidateBeforeCall(keywords, includeTags, excludeTags, minRating, maxLength, _callback);
        Type localVarReturnType = new TypeToken<RandomJoke200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchJokes
     * @param keywords A comma separated list of keywords. (optional)
     * @param includeTags A comma separated list of tags that the joke must have. (optional)
     * @param excludeTags A comma separated list of tags that the joke must not have. (optional)
     * @param number The number of results to retrieve between 1 and 10. (optional)
     * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
     * @param maxLength The maximum number of letters in the joke. (optional)
     * @param offset The number of results to skip. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Joke Search Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchJokesCall(String keywords, String includeTags, String excludeTags, Integer number, Integer minRating, Integer maxLength, BigDecimal offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jokes/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (keywords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keywords", keywords));
        }

        if (includeTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include-tags", includeTags));
        }

        if (excludeTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude-tags", excludeTags));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        if (minRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min-rating", minRating));
        }

        if (maxLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-length", maxLength));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchJokesValidateBeforeCall(String keywords, String includeTags, String excludeTags, Integer number, Integer minRating, Integer maxLength, BigDecimal offset, final ApiCallback _callback) throws ApiException {
        return searchJokesCall(keywords, includeTags, excludeTags, number, minRating, maxLength, offset, _callback);

    }

    /**
     * Search Jokes
     * Search for jokes. See https://humorapi.com/docs/#Search-Jokes for more.
     * @param keywords A comma separated list of keywords. (optional)
     * @param includeTags A comma separated list of tags that the joke must have. (optional)
     * @param excludeTags A comma separated list of tags that the joke must not have. (optional)
     * @param number The number of results to retrieve between 1 and 10. (optional)
     * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
     * @param maxLength The maximum number of letters in the joke. (optional)
     * @param offset The number of results to skip. (optional)
     * @return SearchJokes200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Joke Search Response </td><td>  -  </td></tr>
     </table>
     */
    public SearchJokes200Response searchJokes(String keywords, String includeTags, String excludeTags, Integer number, Integer minRating, Integer maxLength, BigDecimal offset) throws ApiException {
        ApiResponse<SearchJokes200Response> localVarResp = searchJokesWithHttpInfo(keywords, includeTags, excludeTags, number, minRating, maxLength, offset);
        return localVarResp.getData();
    }

    /**
     * Search Jokes
     * Search for jokes. See https://humorapi.com/docs/#Search-Jokes for more.
     * @param keywords A comma separated list of keywords. (optional)
     * @param includeTags A comma separated list of tags that the joke must have. (optional)
     * @param excludeTags A comma separated list of tags that the joke must not have. (optional)
     * @param number The number of results to retrieve between 1 and 10. (optional)
     * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
     * @param maxLength The maximum number of letters in the joke. (optional)
     * @param offset The number of results to skip. (optional)
     * @return ApiResponse&lt;SearchJokes200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Joke Search Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchJokes200Response> searchJokesWithHttpInfo(String keywords, String includeTags, String excludeTags, Integer number, Integer minRating, Integer maxLength, BigDecimal offset) throws ApiException {
        okhttp3.Call localVarCall = searchJokesValidateBeforeCall(keywords, includeTags, excludeTags, number, minRating, maxLength, offset, null);
        Type localVarReturnType = new TypeToken<SearchJokes200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Jokes (asynchronously)
     * Search for jokes. See https://humorapi.com/docs/#Search-Jokes for more.
     * @param keywords A comma separated list of keywords. (optional)
     * @param includeTags A comma separated list of tags that the joke must have. (optional)
     * @param excludeTags A comma separated list of tags that the joke must not have. (optional)
     * @param number The number of results to retrieve between 1 and 10. (optional)
     * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
     * @param maxLength The maximum number of letters in the joke. (optional)
     * @param offset The number of results to skip. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Joke Search Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchJokesAsync(String keywords, String includeTags, String excludeTags, Integer number, Integer minRating, Integer maxLength, BigDecimal offset, final ApiCallback<SearchJokes200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchJokesValidateBeforeCall(keywords, includeTags, excludeTags, number, minRating, maxLength, offset, _callback);
        Type localVarReturnType = new TypeToken<SearchJokes200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitJoke
     * @param body Post the joke as plain text. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful submission. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitJokeCall(String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/jokes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitJokeValidateBeforeCall(String body, final ApiCallback _callback) throws ApiException {
        return submitJokeCall(body, _callback);

    }

    /**
     * Submit Joke
     * Submit a joke. See https://humorapi.com/docs/#Submit-Joke for more.
     * @param body Post the joke as plain text. (optional)
     * @return SubmitJoke200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful submission. </td><td>  -  </td></tr>
     </table>
     */
    public SubmitJoke200Response submitJoke(String body) throws ApiException {
        ApiResponse<SubmitJoke200Response> localVarResp = submitJokeWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Submit Joke
     * Submit a joke. See https://humorapi.com/docs/#Submit-Joke for more.
     * @param body Post the joke as plain text. (optional)
     * @return ApiResponse&lt;SubmitJoke200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful submission. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubmitJoke200Response> submitJokeWithHttpInfo(String body) throws ApiException {
        okhttp3.Call localVarCall = submitJokeValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<SubmitJoke200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit Joke (asynchronously)
     * Submit a joke. See https://humorapi.com/docs/#Submit-Joke for more.
     * @param body Post the joke as plain text. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful submission. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitJokeAsync(String body, final ApiCallback<SubmitJoke200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitJokeValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<SubmitJoke200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for upvoteJoke
     * @param id The object&#39;s id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful upvote </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upvoteJokeCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jokes/{id}/upvote"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upvoteJokeValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling upvoteJoke(Async)");
        }

        return upvoteJokeCall(id, _callback);

    }

    /**
     * Upvote a Joke
     * Upvote a joke. See https://humorapi.com/docs/#Upvote-Joke for more.
     * @param id The object&#39;s id. (required)
     * @return SubmitJoke200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful upvote </td><td>  -  </td></tr>
     </table>
     */
    public SubmitJoke200Response upvoteJoke(Integer id) throws ApiException {
        ApiResponse<SubmitJoke200Response> localVarResp = upvoteJokeWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Upvote a Joke
     * Upvote a joke. See https://humorapi.com/docs/#Upvote-Joke for more.
     * @param id The object&#39;s id. (required)
     * @return ApiResponse&lt;SubmitJoke200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful upvote </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubmitJoke200Response> upvoteJokeWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = upvoteJokeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SubmitJoke200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upvote a Joke (asynchronously)
     * Upvote a joke. See https://humorapi.com/docs/#Upvote-Joke for more.
     * @param id The object&#39;s id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful upvote </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upvoteJokeAsync(Integer id, final ApiCallback<SubmitJoke200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = upvoteJokeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SubmitJoke200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
