/*
 * Humor API
 *
 * Awesome Humor API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@humorapi.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct JokesApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> JokesApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> JokesApiClient<C> {
        JokesApiClient {
            configuration: configuration,
        }
    }
}

pub trait JokesApi {
    fn analyze_joke(&self, body: &str) -> Box<Future<Item = ::models::InlineResponse2009, Error = Error<serde_json::Value>>>;
    fn downvote_joke(&self, id: i32) -> Box<Future<Item = ::models::InlineResponse2008, Error = Error<serde_json::Value>>>;
    fn random_joke(&self, keywords: &str, include_tags: &str, exclude_tags: &str, min_rating: i32, max_length: i32) -> Box<Future<Item = ::models::InlineResponse2004, Error = Error<serde_json::Value>>>;
    fn search_jokes(&self, keywords: &str, include_tags: &str, exclude_tags: &str, number: i32, min_rating: i32, max_length: i32) -> Box<Future<Item = ::models::InlineResponse200, Error = Error<serde_json::Value>>>;
    fn submit_joke(&self, body: &str) -> Box<Future<Item = ::models::InlineResponse2008, Error = Error<serde_json::Value>>>;
    fn upvote_joke(&self, id: i32) -> Box<Future<Item = ::models::InlineResponse2008, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>JokesApi for JokesApiClient<C> {
    fn analyze_joke(&self, body: &str) -> Box<Future<Item = ::models::InlineResponse2009, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/jokes/analyze".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: false,
                in_query: true,
                param_name: "api-key".to_owned(),
            }))
            .with_body_param(body)
            .execute(self.configuration.borrow())
    }

    fn downvote_joke(&self, id: i32) -> Box<Future<Item = ::models::InlineResponse2008, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/jokes/{id}/downvote".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: false,
                in_query: true,
                param_name: "api-key".to_owned(),
            }))
            .with_path_param("id".to_string(), id.to_string())
            .execute(self.configuration.borrow())
    }

    fn random_joke(&self, keywords: &str, include_tags: &str, exclude_tags: &str, min_rating: i32, max_length: i32) -> Box<Future<Item = ::models::InlineResponse2004, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/jokes/random".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: false,
                in_query: true,
                param_name: "api-key".to_owned(),
            }))
            .with_query_param("keywords".to_string(), keywords.to_string())
            .with_query_param("include-tags".to_string(), include_tags.to_string())
            .with_query_param("exclude-tags".to_string(), exclude_tags.to_string())
            .with_query_param("min-rating".to_string(), min_rating.to_string())
            .with_query_param("max-length".to_string(), max_length.to_string())
            .execute(self.configuration.borrow())
    }

    fn search_jokes(&self, keywords: &str, include_tags: &str, exclude_tags: &str, number: i32, min_rating: i32, max_length: i32) -> Box<Future<Item = ::models::InlineResponse200, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/jokes/search".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: false,
                in_query: true,
                param_name: "api-key".to_owned(),
            }))
            .with_query_param("keywords".to_string(), keywords.to_string())
            .with_query_param("include-tags".to_string(), include_tags.to_string())
            .with_query_param("exclude-tags".to_string(), exclude_tags.to_string())
            .with_query_param("number".to_string(), number.to_string())
            .with_query_param("min-rating".to_string(), min_rating.to_string())
            .with_query_param("max-length".to_string(), max_length.to_string())
            .execute(self.configuration.borrow())
    }

    fn submit_joke(&self, body: &str) -> Box<Future<Item = ::models::InlineResponse2008, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/jokes".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: false,
                in_query: true,
                param_name: "api-key".to_owned(),
            }))
            .with_body_param(body)
            .execute(self.configuration.borrow())
    }

    fn upvote_joke(&self, id: i32) -> Box<Future<Item = ::models::InlineResponse2008, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/jokes/{id}/upvote".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: false,
                in_query: true,
                param_name: "api-key".to_owned(),
            }))
            .with_path_param("id".to_string(), id.to_string())
            .execute(self.configuration.borrow())
    }

}
