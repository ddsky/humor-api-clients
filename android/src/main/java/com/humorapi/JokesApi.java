/**
 * Humor API
 * Awesome Humor API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@humorapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.humorapi;

import com.humorapi.client.ApiException;
import com.humorapi.client.ApiInvoker;
import com.humorapi.client.Pair;

import com.humorapi.client.model.*;

import java.util.*;

import com.humorapi.client.model.InlineResponse200;
import com.humorapi.client.model.InlineResponse2004;
import com.humorapi.client.model.InlineResponse2008;
import com.humorapi.client.model.InlineResponse2009;

import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.Map;
import java.util.HashMap;
import java.io.File;

public class JokesApi {
  String basePath = "https://api.humorapi.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
   * Analyze Joke
   * Analyze a joke. See https://humorapi.com/docs/#Analyze-Joke for more.
   * @param body Post the joke as plain text.
   * @return InlineResponse2009
   */
  public InlineResponse2009  analyzeJoke (String body) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/jokes/analyze".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      "text/plain"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse2009) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2009.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Downvote a Joke
   * Downvote a joke. See https://humorapi.com/docs/#Downvote-Joke for more.
   * @param id The object&#39;s id.
   * @return InlineResponse2008
   */
  public InlineResponse2008  downvoteJoke (Integer id) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling downvoteJoke");
    }

    // create path and map variables
    String localVarPath = "/jokes/{id}/downvote".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse2008) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2008.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Random Joke
   * Get a random joke. See https://humorapi.com/docs/#Random-Joke for more.
   * @param keywords A comma separated list of keywords.
   * @param includeTags A comma separated list of tags that the joke must have.
   * @param excludeTags A comma separated list of tags that the joke must not have.
   * @param minRating The minimum rating between 0 and 10 the result should have.
   * @param maxLength The maximum number of letters in the joke.
   * @return InlineResponse2004
   */
  public InlineResponse2004  randomJoke (String keywords, String includeTags, String excludeTags, Integer minRating, Integer maxLength) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/jokes/random".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "keywords", keywords));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "include-tags", includeTags));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "exclude-tags", excludeTags));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "min-rating", minRating));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "max-length", maxLength));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse2004) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2004.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Search Jokes
   * Search for jokes. See https://humorapi.com/docs/#Search-Jokes for more.
   * @param keywords A comma separated list of keywords.
   * @param includeTags A comma separated list of tags that the joke must have.
   * @param excludeTags A comma separated list of tags that the joke must not have.
   * @param number The number of results to retrieve between 1 and 10.
   * @param minRating The minimum rating between 0 and 10 the result should have.
   * @param maxLength The maximum number of letters in the joke.
   * @return InlineResponse200
   */
  public InlineResponse200  searchJokes (String keywords, String includeTags, String excludeTags, Integer number, Integer minRating, Integer maxLength) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/jokes/search".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "keywords", keywords));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "include-tags", includeTags));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "exclude-tags", excludeTags));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "number", number));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "min-rating", minRating));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "max-length", maxLength));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse200) ApiInvoker.deserialize(localVarResponse, "", InlineResponse200.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Submit Joke
   * Submit a joke. See https://humorapi.com/docs/#Submit-Joke for more.
   * @param body Post the joke as plain text.
   * @return InlineResponse2008
   */
  public InlineResponse2008  submitJoke (String body) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/jokes".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      "text/plain"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse2008) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2008.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Upvote a Joke
   * Upvote a joke. See https://humorapi.com/docs/#Upvote-Joke for more.
   * @param id The object&#39;s id.
   * @return InlineResponse2008
   */
  public InlineResponse2008  upvoteJoke (Integer id) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling upvoteJoke");
    }

    // create path and map variables
    String localVarPath = "/jokes/{id}/upvote".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse2008) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2008.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
}
