/**
 * Humor API
 * Awesome Humor API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@humorapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.humorapi;

import com.humorapi.client.ApiException;
import com.humorapi.client.ApiInvoker;
import com.humorapi.client.Pair;

import com.humorapi.client.model.*;

import java.util.*;

import java.math.BigDecimal;
import com.humorapi.client.model.InlineResponse2002;
import com.humorapi.client.model.InlineResponse2003;
import com.humorapi.client.model.InlineResponse2008;

import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.Map;
import java.util.HashMap;
import java.io.File;

public class MemesApi {
  String basePath = "https://api.humorapi.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
   * Downvote a Meme
   * Downvote a meme. See https://humorapi.com/docs/#Downvote-Meme for more.
   * @param id The object&#39;s id.
   * @return InlineResponse2008
   */
  public InlineResponse2008  downvoteMeme (Integer id) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling downvoteMeme");
    }

    // create path and map variables
    String localVarPath = "/memes/{id}/downvote".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse2008) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2008.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Random Meme
   * Get a random meme. See https://humorapi.com/docs/#Random-Meme for more.
   * @param keywords A comma separated list of keywords.
   * @param keywordsInImage Whether the keywords should be found in the meme&#39;s image.
   * @param mediaType The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;.
   * @param number The number of results to retrieve between 1 and 10.
   * @param minRating The minimum rating between 0 and 10 the result should have.
   * @return InlineResponse2003
   */
  public InlineResponse2003  randomMeme (String keywords, Boolean keywordsInImage, String mediaType, Integer number, Integer minRating) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/memes/random".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "keywords", keywords));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "keywords-in-image", keywordsInImage));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "media-type", mediaType));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "number", number));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "min-rating", minRating));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse2003) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2003.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Search Memes
   * Search for memes. See https://humorapi.com/docs/#Search-Memes for more.
   * @param keywords A comma separated list of keywords.
   * @param keywordsInImage Whether the keywords should be found in the meme&#39;s image.
   * @param mediaType The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;.
   * @param number The number of results to retrieve between 1 and 10.
   * @param minRating The minimum rating between 0 and 10 the result should have.
   * @param offset The number of results to skip.
   * @return InlineResponse2002
   */
  public InlineResponse2002  searchMemes (String keywords, Boolean keywordsInImage, String mediaType, Integer number, Integer minRating, BigDecimal offset) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/memes/search".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "keywords", keywords));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "keywords-in-image", keywordsInImage));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "media-type", mediaType));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "number", number));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "min-rating", minRating));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse2002) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2002.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Upvote a Meme
   * Upvote a meme. See https://humorapi.com/docs/#Upvote-Meme for more.
   * @param id The object&#39;s id.
   * @return InlineResponse2008
   */
  public InlineResponse2008  upvoteMeme (Integer id) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling upvoteMeme");
    }

    // create path and map variables
    String localVarPath = "/memes/{id}/upvote".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse2008) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2008.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
}
