/*
Humor API

Awesome Humor API.

API version: 1.0
Contact: mail@humorapi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse2009 struct for InlineResponse2009
type InlineResponse2009 struct {
	Joke string `json:"joke"`
	Tags []string `json:"tags"`
}

// NewInlineResponse2009 instantiates a new InlineResponse2009 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2009(joke string, tags []string) *InlineResponse2009 {
	this := InlineResponse2009{}
	this.Joke = joke
	this.Tags = tags
	return &this
}

// NewInlineResponse2009WithDefaults instantiates a new InlineResponse2009 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2009WithDefaults() *InlineResponse2009 {
	this := InlineResponse2009{}
	return &this
}

// GetJoke returns the Joke field value
func (o *InlineResponse2009) GetJoke() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Joke
}

// GetJokeOk returns a tuple with the Joke field value
// and a boolean to check if the value has been set.
func (o *InlineResponse2009) GetJokeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Joke, true
}

// SetJoke sets field value
func (o *InlineResponse2009) SetJoke(v string) {
	o.Joke = v
}

// GetTags returns the Tags field value
func (o *InlineResponse2009) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *InlineResponse2009) GetTagsOk() ([]string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *InlineResponse2009) SetTags(v []string) {
	o.Tags = v
}

func (o InlineResponse2009) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["joke"] = o.Joke
	}
	if true {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2009 struct {
	value *InlineResponse2009
	isSet bool
}

func (v NullableInlineResponse2009) Get() *InlineResponse2009 {
	return v.value
}

func (v *NullableInlineResponse2009) Set(val *InlineResponse2009) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2009) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2009) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2009(val *InlineResponse2009) *NullableInlineResponse2009 {
	return &NullableInlineResponse2009{value: val, isSet: true}
}

func (v NullableInlineResponse2009) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2009) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


