/*
Humor API

Awesome Humor API.

API version: 1.0
Contact: mail@humorapi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package humorapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RateWord200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RateWord200Response{}

// RateWord200Response 
type RateWord200Response struct {
	Rating float32 `json:"rating"`
}

type _RateWord200Response RateWord200Response

// NewRateWord200Response instantiates a new RateWord200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateWord200Response(rating float32) *RateWord200Response {
	this := RateWord200Response{}
	this.Rating = rating
	return &this
}

// NewRateWord200ResponseWithDefaults instantiates a new RateWord200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateWord200ResponseWithDefaults() *RateWord200Response {
	this := RateWord200Response{}
	return &this
}

// GetRating returns the Rating field value
func (o *RateWord200Response) GetRating() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Rating
}

// GetRatingOk returns a tuple with the Rating field value
// and a boolean to check if the value has been set.
func (o *RateWord200Response) GetRatingOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rating, true
}

// SetRating sets field value
func (o *RateWord200Response) SetRating(v float32) {
	o.Rating = v
}

func (o RateWord200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RateWord200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rating"] = o.Rating
	return toSerialize, nil
}

func (o *RateWord200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rating",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRateWord200Response := _RateWord200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRateWord200Response)

	if err != nil {
		return err
	}

	*o = RateWord200Response(varRateWord200Response)

	return err
}

type NullableRateWord200Response struct {
	value *RateWord200Response
	isSet bool
}

func (v NullableRateWord200Response) Get() *RateWord200Response {
	return v.value
}

func (v *NullableRateWord200Response) Set(val *RateWord200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableRateWord200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableRateWord200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateWord200Response(val *RateWord200Response) *NullableRateWord200Response {
	return &NullableRateWord200Response{value: val, isSet: true}
}

func (v NullableRateWord200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateWord200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


