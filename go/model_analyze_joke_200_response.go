/*
Humor API

Awesome Humor API.

API version: 1.0
Contact: mail@humorapi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package humorapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AnalyzeJoke200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnalyzeJoke200Response{}

// AnalyzeJoke200Response 
type AnalyzeJoke200Response struct {
	Joke string `json:"joke"`
	Tags []string `json:"tags"`
}

type _AnalyzeJoke200Response AnalyzeJoke200Response

// NewAnalyzeJoke200Response instantiates a new AnalyzeJoke200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalyzeJoke200Response(joke string, tags []string) *AnalyzeJoke200Response {
	this := AnalyzeJoke200Response{}
	this.Joke = joke
	this.Tags = tags
	return &this
}

// NewAnalyzeJoke200ResponseWithDefaults instantiates a new AnalyzeJoke200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalyzeJoke200ResponseWithDefaults() *AnalyzeJoke200Response {
	this := AnalyzeJoke200Response{}
	return &this
}

// GetJoke returns the Joke field value
func (o *AnalyzeJoke200Response) GetJoke() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Joke
}

// GetJokeOk returns a tuple with the Joke field value
// and a boolean to check if the value has been set.
func (o *AnalyzeJoke200Response) GetJokeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Joke, true
}

// SetJoke sets field value
func (o *AnalyzeJoke200Response) SetJoke(v string) {
	o.Joke = v
}

// GetTags returns the Tags field value
func (o *AnalyzeJoke200Response) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *AnalyzeJoke200Response) GetTagsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *AnalyzeJoke200Response) SetTags(v []string) {
	o.Tags = v
}

func (o AnalyzeJoke200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnalyzeJoke200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["joke"] = o.Joke
	toSerialize["tags"] = o.Tags
	return toSerialize, nil
}

func (o *AnalyzeJoke200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"joke",
		"tags",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAnalyzeJoke200Response := _AnalyzeJoke200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAnalyzeJoke200Response)

	if err != nil {
		return err
	}

	*o = AnalyzeJoke200Response(varAnalyzeJoke200Response)

	return err
}

type NullableAnalyzeJoke200Response struct {
	value *AnalyzeJoke200Response
	isSet bool
}

func (v NullableAnalyzeJoke200Response) Get() *AnalyzeJoke200Response {
	return v.value
}

func (v *NullableAnalyzeJoke200Response) Set(val *AnalyzeJoke200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyzeJoke200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyzeJoke200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyzeJoke200Response(val *AnalyzeJoke200Response) *NullableAnalyzeJoke200Response {
	return &NullableAnalyzeJoke200Response{value: val, isSet: true}
}

func (v NullableAnalyzeJoke200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyzeJoke200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


