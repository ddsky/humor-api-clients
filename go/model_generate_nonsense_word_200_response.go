/*
Humor API

Awesome Humor API.

API version: 1.0
Contact: mail@humorapi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package humorapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GenerateNonsenseWord200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GenerateNonsenseWord200Response{}

// GenerateNonsenseWord200Response 
type GenerateNonsenseWord200Response struct {
	Word string `json:"word"`
	Rating float32 `json:"rating"`
}

type _GenerateNonsenseWord200Response GenerateNonsenseWord200Response

// NewGenerateNonsenseWord200Response instantiates a new GenerateNonsenseWord200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenerateNonsenseWord200Response(word string, rating float32) *GenerateNonsenseWord200Response {
	this := GenerateNonsenseWord200Response{}
	this.Word = word
	this.Rating = rating
	return &this
}

// NewGenerateNonsenseWord200ResponseWithDefaults instantiates a new GenerateNonsenseWord200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenerateNonsenseWord200ResponseWithDefaults() *GenerateNonsenseWord200Response {
	this := GenerateNonsenseWord200Response{}
	return &this
}

// GetWord returns the Word field value
func (o *GenerateNonsenseWord200Response) GetWord() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Word
}

// GetWordOk returns a tuple with the Word field value
// and a boolean to check if the value has been set.
func (o *GenerateNonsenseWord200Response) GetWordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Word, true
}

// SetWord sets field value
func (o *GenerateNonsenseWord200Response) SetWord(v string) {
	o.Word = v
}

// GetRating returns the Rating field value
func (o *GenerateNonsenseWord200Response) GetRating() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Rating
}

// GetRatingOk returns a tuple with the Rating field value
// and a boolean to check if the value has been set.
func (o *GenerateNonsenseWord200Response) GetRatingOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rating, true
}

// SetRating sets field value
func (o *GenerateNonsenseWord200Response) SetRating(v float32) {
	o.Rating = v
}

func (o GenerateNonsenseWord200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GenerateNonsenseWord200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["word"] = o.Word
	toSerialize["rating"] = o.Rating
	return toSerialize, nil
}

func (o *GenerateNonsenseWord200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"word",
		"rating",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGenerateNonsenseWord200Response := _GenerateNonsenseWord200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGenerateNonsenseWord200Response)

	if err != nil {
		return err
	}

	*o = GenerateNonsenseWord200Response(varGenerateNonsenseWord200Response)

	return err
}

type NullableGenerateNonsenseWord200Response struct {
	value *GenerateNonsenseWord200Response
	isSet bool
}

func (v NullableGenerateNonsenseWord200Response) Get() *GenerateNonsenseWord200Response {
	return v.value
}

func (v *NullableGenerateNonsenseWord200Response) Set(val *GenerateNonsenseWord200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGenerateNonsenseWord200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGenerateNonsenseWord200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenerateNonsenseWord200Response(val *GenerateNonsenseWord200Response) *NullableGenerateNonsenseWord200Response {
	return &NullableGenerateNonsenseWord200Response{value: val, isSet: true}
}

func (v NullableGenerateNonsenseWord200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenerateNonsenseWord200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


