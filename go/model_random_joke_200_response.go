/*
Humor API

Awesome Humor API.

API version: 1.0
Contact: mail@humorapi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package humorapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RandomJoke200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RandomJoke200Response{}

// RandomJoke200Response 
type RandomJoke200Response struct {
	Id int32 `json:"id"`
	Joke string `json:"joke"`
}

type _RandomJoke200Response RandomJoke200Response

// NewRandomJoke200Response instantiates a new RandomJoke200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRandomJoke200Response(id int32, joke string) *RandomJoke200Response {
	this := RandomJoke200Response{}
	this.Id = id
	this.Joke = joke
	return &this
}

// NewRandomJoke200ResponseWithDefaults instantiates a new RandomJoke200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRandomJoke200ResponseWithDefaults() *RandomJoke200Response {
	this := RandomJoke200Response{}
	return &this
}

// GetId returns the Id field value
func (o *RandomJoke200Response) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RandomJoke200Response) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RandomJoke200Response) SetId(v int32) {
	o.Id = v
}

// GetJoke returns the Joke field value
func (o *RandomJoke200Response) GetJoke() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Joke
}

// GetJokeOk returns a tuple with the Joke field value
// and a boolean to check if the value has been set.
func (o *RandomJoke200Response) GetJokeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Joke, true
}

// SetJoke sets field value
func (o *RandomJoke200Response) SetJoke(v string) {
	o.Joke = v
}

func (o RandomJoke200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RandomJoke200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["joke"] = o.Joke
	return toSerialize, nil
}

func (o *RandomJoke200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"joke",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRandomJoke200Response := _RandomJoke200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRandomJoke200Response)

	if err != nil {
		return err
	}

	*o = RandomJoke200Response(varRandomJoke200Response)

	return err
}

type NullableRandomJoke200Response struct {
	value *RandomJoke200Response
	isSet bool
}

func (v NullableRandomJoke200Response) Get() *RandomJoke200Response {
	return v.value
}

func (v *NullableRandomJoke200Response) Set(val *RandomJoke200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableRandomJoke200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableRandomJoke200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRandomJoke200Response(val *RandomJoke200Response) *NullableRandomJoke200Response {
	return &NullableRandomJoke200Response{value: val, isSet: true}
}

func (v NullableRandomJoke200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRandomJoke200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


