/*
Humor API

Awesome Humor API.

API version: 1.0
Contact: mail@humorapi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package humorapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SearchJokes200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchJokes200Response{}

// SearchJokes200Response 
type SearchJokes200Response struct {
	Jokes []SearchJokes200ResponseJokesInner `json:"jokes"`
}

type _SearchJokes200Response SearchJokes200Response

// NewSearchJokes200Response instantiates a new SearchJokes200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchJokes200Response(jokes []SearchJokes200ResponseJokesInner) *SearchJokes200Response {
	this := SearchJokes200Response{}
	this.Jokes = jokes
	return &this
}

// NewSearchJokes200ResponseWithDefaults instantiates a new SearchJokes200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchJokes200ResponseWithDefaults() *SearchJokes200Response {
	this := SearchJokes200Response{}
	return &this
}

// GetJokes returns the Jokes field value
func (o *SearchJokes200Response) GetJokes() []SearchJokes200ResponseJokesInner {
	if o == nil {
		var ret []SearchJokes200ResponseJokesInner
		return ret
	}

	return o.Jokes
}

// GetJokesOk returns a tuple with the Jokes field value
// and a boolean to check if the value has been set.
func (o *SearchJokes200Response) GetJokesOk() ([]SearchJokes200ResponseJokesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Jokes, true
}

// SetJokes sets field value
func (o *SearchJokes200Response) SetJokes(v []SearchJokes200ResponseJokesInner) {
	o.Jokes = v
}

func (o SearchJokes200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchJokes200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["jokes"] = o.Jokes
	return toSerialize, nil
}

func (o *SearchJokes200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"jokes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchJokes200Response := _SearchJokes200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSearchJokes200Response)

	if err != nil {
		return err
	}

	*o = SearchJokes200Response(varSearchJokes200Response)

	return err
}

type NullableSearchJokes200Response struct {
	value *SearchJokes200Response
	isSet bool
}

func (v NullableSearchJokes200Response) Get() *SearchJokes200Response {
	return v.value
}

func (v *NullableSearchJokes200Response) Set(val *SearchJokes200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchJokes200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchJokes200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchJokes200Response(val *SearchJokes200Response) *NullableSearchJokes200Response {
	return &NullableSearchJokes200Response{value: val, isSet: true}
}

func (v NullableSearchJokes200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchJokes200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


