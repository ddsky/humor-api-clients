/**
 * Humor API
 *
 * Awesome Humor API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@humorapi.com
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.humorapi

import java.io.IOException

import com.humorapi.client.model.InlineResponse200
import com.humorapi.client.model.InlineResponse2004
import com.humorapi.client.model.InlineResponse2008
import com.humorapi.client.model.InlineResponse2009

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class JokesApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.humorapi.com")
        }
    }

    /**
    * Analyze Joke
    * Analyze a joke. See https://humorapi.com/docs/#Analyze-Joke for more.
    * @param body Post the joke as plain text. (optional)
    * @return InlineResponse2009
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun analyzeJoke(body: kotlin.String?) : InlineResponse2009 {
        val localVarResponse = analyzeJokeWithHttpInfo(body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2009
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Analyze Joke
    * Analyze a joke. See https://humorapi.com/docs/#Analyze-Joke for more.
    * @param body Post the joke as plain text. (optional)
    * @return ApiResponse<InlineResponse2009?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun analyzeJokeWithHttpInfo(body: kotlin.String?) : ApiResponse<InlineResponse2009?> {
        val localVariableConfig = analyzeJokeRequestConfig(body = body)

        return request<kotlin.String, InlineResponse2009>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation analyzeJoke
    *
    * @param body Post the joke as plain text. (optional)
    * @return RequestConfig
    */
    fun analyzeJokeRequestConfig(body: kotlin.String?) : RequestConfig<kotlin.String> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/jokes/analyze",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Downvote a Joke
    * Downvote a joke. See https://humorapi.com/docs/#Downvote-Joke for more.
    * @param id The object&#39;s id. 
    * @return InlineResponse2008
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun downvoteJoke(id: kotlin.Int) : InlineResponse2008 {
        val localVarResponse = downvoteJokeWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2008
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Downvote a Joke
    * Downvote a joke. See https://humorapi.com/docs/#Downvote-Joke for more.
    * @param id The object&#39;s id. 
    * @return ApiResponse<InlineResponse2008?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun downvoteJokeWithHttpInfo(id: kotlin.Int) : ApiResponse<InlineResponse2008?> {
        val localVariableConfig = downvoteJokeRequestConfig(id = id)

        return request<Unit, InlineResponse2008>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation downvoteJoke
    *
    * @param id The object&#39;s id. 
    * @return RequestConfig
    */
    fun downvoteJokeRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/jokes/{id}/downvote".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter includeTags
     */
     enum class IncludeTags_randomJoke(val value: kotlin.String) {
         @Json(name = "clean") clean("clean"),
         @Json(name = "yo_mama") yoMama("yo_mama"),
         @Json(name = "chuck_norris") chuckNorris("chuck_norris"),
         @Json(name = "nsfw") nsfw("nsfw"),
         @Json(name = "racist") racist("racist"),
         @Json(name = "sexist") sexist("sexist"),
         @Json(name = "sexual") sexual("sexual"),
         @Json(name = "political") political("political"),
         @Json(name = "religious") religious("religious"),
         @Json(name = "knock_knock") knockKnock("knock_knock"),
         @Json(name = "christmas") christmas("christmas"),
         @Json(name = "nerdy") nerdy("nerdy"),
         @Json(name = "analogy") analogy("analogy"),
         @Json(name = "one_liner") oneLiner("one_liner"),
         @Json(name = "dark") dark("dark"),
         @Json(name = "jewish") jewish("jewish"),
         @Json(name = "school") school("school"),
         @Json(name = "sport") sport("sport"),
         @Json(name = "law") law("law"),
         @Json(name = "kids") kids("kids"),
         @Json(name = "animal") animal("animal"),
         @Json(name = "relationship") relationship("relationship"),
         @Json(name = "insults") insults("insults"),
         @Json(name = "blondes") blondes("blondes"),
         @Json(name = "deep_thoughts") deepThoughts("deep_thoughts"),
         @Json(name = "food") food("food"),
         @Json(name = "holiday") holiday("holiday"),
         ;
     }

    /**
     * enum for parameter excludeTags
     */
     enum class ExcludeTags_randomJoke(val value: kotlin.String) {
         @Json(name = "clean") clean("clean"),
         @Json(name = "yo_mama") yoMama("yo_mama"),
         @Json(name = "chuck_norris") chuckNorris("chuck_norris"),
         @Json(name = "nsfw") nsfw("nsfw"),
         @Json(name = "racist") racist("racist"),
         @Json(name = "sexist") sexist("sexist"),
         @Json(name = "sexual") sexual("sexual"),
         @Json(name = "political") political("political"),
         @Json(name = "religious") religious("religious"),
         @Json(name = "knock_knock") knockKnock("knock_knock"),
         @Json(name = "christmas") christmas("christmas"),
         @Json(name = "nerdy") nerdy("nerdy"),
         @Json(name = "analogy") analogy("analogy"),
         @Json(name = "one_liner") oneLiner("one_liner"),
         @Json(name = "dark") dark("dark"),
         @Json(name = "jewish") jewish("jewish"),
         @Json(name = "school") school("school"),
         @Json(name = "sport") sport("sport"),
         @Json(name = "law") law("law"),
         @Json(name = "kids") kids("kids"),
         @Json(name = "animal") animal("animal"),
         @Json(name = "relationship") relationship("relationship"),
         @Json(name = "insults") insults("insults"),
         @Json(name = "blondes") blondes("blondes"),
         @Json(name = "deep_thoughts") deepThoughts("deep_thoughts"),
         @Json(name = "food") food("food"),
         @Json(name = "holiday") holiday("holiday"),
         ;
     }

    /**
    * Random Joke
    * Get a random joke. See https://humorapi.com/docs/#Random-Joke for more.
    * @param keywords A comma separated list of keywords. (optional)
    * @param includeTags A comma separated list of tags that the joke must have. (optional)
    * @param excludeTags A comma separated list of tags that the joke must not have. (optional)
    * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
    * @param maxLength The maximum number of letters in the joke. (optional)
    * @return InlineResponse2004
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun randomJoke(keywords: kotlin.String?, includeTags: IncludeTags_randomJoke?, excludeTags: ExcludeTags_randomJoke?, minRating: kotlin.Int?, maxLength: kotlin.Int?) : InlineResponse2004 {
        val localVarResponse = randomJokeWithHttpInfo(keywords = keywords, includeTags = includeTags, excludeTags = excludeTags, minRating = minRating, maxLength = maxLength)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2004
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Random Joke
    * Get a random joke. See https://humorapi.com/docs/#Random-Joke for more.
    * @param keywords A comma separated list of keywords. (optional)
    * @param includeTags A comma separated list of tags that the joke must have. (optional)
    * @param excludeTags A comma separated list of tags that the joke must not have. (optional)
    * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
    * @param maxLength The maximum number of letters in the joke. (optional)
    * @return ApiResponse<InlineResponse2004?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun randomJokeWithHttpInfo(keywords: kotlin.String?, includeTags: IncludeTags_randomJoke?, excludeTags: ExcludeTags_randomJoke?, minRating: kotlin.Int?, maxLength: kotlin.Int?) : ApiResponse<InlineResponse2004?> {
        val localVariableConfig = randomJokeRequestConfig(keywords = keywords, includeTags = includeTags, excludeTags = excludeTags, minRating = minRating, maxLength = maxLength)

        return request<Unit, InlineResponse2004>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation randomJoke
    *
    * @param keywords A comma separated list of keywords. (optional)
    * @param includeTags A comma separated list of tags that the joke must have. (optional)
    * @param excludeTags A comma separated list of tags that the joke must not have. (optional)
    * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
    * @param maxLength The maximum number of letters in the joke. (optional)
    * @return RequestConfig
    */
    fun randomJokeRequestConfig(keywords: kotlin.String?, includeTags: IncludeTags_randomJoke?, excludeTags: ExcludeTags_randomJoke?, minRating: kotlin.Int?, maxLength: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (keywords != null) {
                    put("keywords", listOf(keywords.toString()))
                }
                if (includeTags != null) {
                    put("include-tags", listOf(includeTags.toString()))
                }
                if (excludeTags != null) {
                    put("exclude-tags", listOf(excludeTags.toString()))
                }
                if (minRating != null) {
                    put("min-rating", listOf(minRating.toString()))
                }
                if (maxLength != null) {
                    put("max-length", listOf(maxLength.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/jokes/random",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter includeTags
     */
     enum class IncludeTags_searchJokes(val value: kotlin.String) {
         @Json(name = "clean") clean("clean"),
         @Json(name = "yo_mama") yoMama("yo_mama"),
         @Json(name = "chuck_norris") chuckNorris("chuck_norris"),
         @Json(name = "nsfw") nsfw("nsfw"),
         @Json(name = "racist") racist("racist"),
         @Json(name = "sexist") sexist("sexist"),
         @Json(name = "sexual") sexual("sexual"),
         @Json(name = "political") political("political"),
         @Json(name = "religious") religious("religious"),
         @Json(name = "knock_knock") knockKnock("knock_knock"),
         @Json(name = "christmas") christmas("christmas"),
         @Json(name = "nerdy") nerdy("nerdy"),
         @Json(name = "analogy") analogy("analogy"),
         @Json(name = "one_liner") oneLiner("one_liner"),
         @Json(name = "dark") dark("dark"),
         @Json(name = "jewish") jewish("jewish"),
         @Json(name = "school") school("school"),
         @Json(name = "sport") sport("sport"),
         @Json(name = "law") law("law"),
         @Json(name = "kids") kids("kids"),
         @Json(name = "animal") animal("animal"),
         @Json(name = "relationship") relationship("relationship"),
         @Json(name = "insults") insults("insults"),
         @Json(name = "blondes") blondes("blondes"),
         @Json(name = "deep_thoughts") deepThoughts("deep_thoughts"),
         @Json(name = "food") food("food"),
         @Json(name = "holiday") holiday("holiday"),
         ;
     }

    /**
     * enum for parameter excludeTags
     */
     enum class ExcludeTags_searchJokes(val value: kotlin.String) {
         @Json(name = "clean") clean("clean"),
         @Json(name = "yo_mama") yoMama("yo_mama"),
         @Json(name = "chuck_norris") chuckNorris("chuck_norris"),
         @Json(name = "nsfw") nsfw("nsfw"),
         @Json(name = "racist") racist("racist"),
         @Json(name = "sexist") sexist("sexist"),
         @Json(name = "sexual") sexual("sexual"),
         @Json(name = "political") political("political"),
         @Json(name = "religious") religious("religious"),
         @Json(name = "knock_knock") knockKnock("knock_knock"),
         @Json(name = "christmas") christmas("christmas"),
         @Json(name = "nerdy") nerdy("nerdy"),
         @Json(name = "analogy") analogy("analogy"),
         @Json(name = "one_liner") oneLiner("one_liner"),
         @Json(name = "dark") dark("dark"),
         @Json(name = "jewish") jewish("jewish"),
         @Json(name = "school") school("school"),
         @Json(name = "sport") sport("sport"),
         @Json(name = "law") law("law"),
         @Json(name = "kids") kids("kids"),
         @Json(name = "animal") animal("animal"),
         @Json(name = "relationship") relationship("relationship"),
         @Json(name = "insults") insults("insults"),
         @Json(name = "blondes") blondes("blondes"),
         @Json(name = "deep_thoughts") deepThoughts("deep_thoughts"),
         @Json(name = "food") food("food"),
         @Json(name = "holiday") holiday("holiday"),
         ;
     }

    /**
    * Search Jokes
    * Search for jokes. See https://humorapi.com/docs/#Search-Jokes for more.
    * @param keywords A comma separated list of keywords. (optional)
    * @param includeTags A comma separated list of tags that the joke must have. (optional)
    * @param excludeTags A comma separated list of tags that the joke must not have. (optional)
    * @param number The number of results to retrieve between 1 and 10. (optional)
    * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
    * @param maxLength The maximum number of letters in the joke. (optional)
    * @param offset The number of results to skip. (optional)
    * @return InlineResponse200
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun searchJokes(keywords: kotlin.String?, includeTags: IncludeTags_searchJokes?, excludeTags: ExcludeTags_searchJokes?, number: kotlin.Int?, minRating: kotlin.Int?, maxLength: kotlin.Int?, offset: java.math.BigDecimal?) : InlineResponse200 {
        val localVarResponse = searchJokesWithHttpInfo(keywords = keywords, includeTags = includeTags, excludeTags = excludeTags, number = number, minRating = minRating, maxLength = maxLength, offset = offset)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse200
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Search Jokes
    * Search for jokes. See https://humorapi.com/docs/#Search-Jokes for more.
    * @param keywords A comma separated list of keywords. (optional)
    * @param includeTags A comma separated list of tags that the joke must have. (optional)
    * @param excludeTags A comma separated list of tags that the joke must not have. (optional)
    * @param number The number of results to retrieve between 1 and 10. (optional)
    * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
    * @param maxLength The maximum number of letters in the joke. (optional)
    * @param offset The number of results to skip. (optional)
    * @return ApiResponse<InlineResponse200?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchJokesWithHttpInfo(keywords: kotlin.String?, includeTags: IncludeTags_searchJokes?, excludeTags: ExcludeTags_searchJokes?, number: kotlin.Int?, minRating: kotlin.Int?, maxLength: kotlin.Int?, offset: java.math.BigDecimal?) : ApiResponse<InlineResponse200?> {
        val localVariableConfig = searchJokesRequestConfig(keywords = keywords, includeTags = includeTags, excludeTags = excludeTags, number = number, minRating = minRating, maxLength = maxLength, offset = offset)

        return request<Unit, InlineResponse200>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation searchJokes
    *
    * @param keywords A comma separated list of keywords. (optional)
    * @param includeTags A comma separated list of tags that the joke must have. (optional)
    * @param excludeTags A comma separated list of tags that the joke must not have. (optional)
    * @param number The number of results to retrieve between 1 and 10. (optional)
    * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
    * @param maxLength The maximum number of letters in the joke. (optional)
    * @param offset The number of results to skip. (optional)
    * @return RequestConfig
    */
    fun searchJokesRequestConfig(keywords: kotlin.String?, includeTags: IncludeTags_searchJokes?, excludeTags: ExcludeTags_searchJokes?, number: kotlin.Int?, minRating: kotlin.Int?, maxLength: kotlin.Int?, offset: java.math.BigDecimal?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (keywords != null) {
                    put("keywords", listOf(keywords.toString()))
                }
                if (includeTags != null) {
                    put("include-tags", listOf(includeTags.toString()))
                }
                if (excludeTags != null) {
                    put("exclude-tags", listOf(excludeTags.toString()))
                }
                if (number != null) {
                    put("number", listOf(number.toString()))
                }
                if (minRating != null) {
                    put("min-rating", listOf(minRating.toString()))
                }
                if (maxLength != null) {
                    put("max-length", listOf(maxLength.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/jokes/search",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Submit Joke
    * Submit a joke. See https://humorapi.com/docs/#Submit-Joke for more.
    * @param body Post the joke as plain text. (optional)
    * @return InlineResponse2008
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun submitJoke(body: kotlin.String?) : InlineResponse2008 {
        val localVarResponse = submitJokeWithHttpInfo(body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2008
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Submit Joke
    * Submit a joke. See https://humorapi.com/docs/#Submit-Joke for more.
    * @param body Post the joke as plain text. (optional)
    * @return ApiResponse<InlineResponse2008?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun submitJokeWithHttpInfo(body: kotlin.String?) : ApiResponse<InlineResponse2008?> {
        val localVariableConfig = submitJokeRequestConfig(body = body)

        return request<kotlin.String, InlineResponse2008>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation submitJoke
    *
    * @param body Post the joke as plain text. (optional)
    * @return RequestConfig
    */
    fun submitJokeRequestConfig(body: kotlin.String?) : RequestConfig<kotlin.String> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/jokes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Upvote a Joke
    * Upvote a joke. See https://humorapi.com/docs/#Upvote-Joke for more.
    * @param id The object&#39;s id. 
    * @return InlineResponse2008
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun upvoteJoke(id: kotlin.Int) : InlineResponse2008 {
        val localVarResponse = upvoteJokeWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2008
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Upvote a Joke
    * Upvote a joke. See https://humorapi.com/docs/#Upvote-Joke for more.
    * @param id The object&#39;s id. 
    * @return ApiResponse<InlineResponse2008?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun upvoteJokeWithHttpInfo(id: kotlin.Int) : ApiResponse<InlineResponse2008?> {
        val localVariableConfig = upvoteJokeRequestConfig(id = id)

        return request<Unit, InlineResponse2008>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation upvoteJoke
    *
    * @param id The object&#39;s id. 
    * @return RequestConfig
    */
    fun upvoteJokeRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/jokes/{id}/upvote".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
