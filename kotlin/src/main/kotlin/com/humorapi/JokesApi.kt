/**
* Humor API
* Awesome Humor API.
*
* The version of the OpenAPI document: 1.0
* Contact: mail@humorapi.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.humorapi

import com.humorapi.client.model.InlineResponse200
import com.humorapi.client.model.InlineResponse2004
import com.humorapi.client.model.InlineResponse2008
import com.humorapi.client.model.InlineResponse2009

import humorapi.infrastructure.ApiClient
import humorapi.infrastructure.ClientException
import humorapi.infrastructure.ClientError
import humorapi.infrastructure.ServerException
import humorapi.infrastructure.ServerError
import humorapi.infrastructure.MultiValueMap
import humorapi.infrastructure.RequestConfig
import humorapi.infrastructure.RequestMethod
import humorapi.infrastructure.ResponseType
import humorapi.infrastructure.Success
import humorapi.infrastructure.toMultiValue

class JokesApi(basePath: kotlin.String = "https://api.humorapi.com") : ApiClient(basePath) {

    /**
    * Analyze Joke
    * Analyze a joke. See https://humorapi.com/docs/#Analyze-Joke for more.
    * @param body Post the joke as plain text. (optional)
    * @return InlineResponse2009
    */
    @Suppress("UNCHECKED_CAST")
    fun analyzeJoke(body: kotlin.String?) : InlineResponse2009 {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/jokes/analyze",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse2009>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2009
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Downvote a Joke
    * Downvote a joke. See https://humorapi.com/docs/#Downvote-Joke for more.
    * @param id The object&#39;s id. 
    * @return InlineResponse2008
    */
    @Suppress("UNCHECKED_CAST")
    fun downvoteJoke(id: kotlin.Int) : InlineResponse2008 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/jokes/{id}/downvote".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse2008>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2008
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Random Joke
    * Get a random joke. See https://humorapi.com/docs/#Random-Joke for more.
    * @param keywords A comma separated list of keywords. (optional)
    * @param includeMinusTags A comma separated list of tags that the joke must have. (optional)
    * @param excludeMinusTags A comma separated list of tags that the joke must not have. (optional)
    * @param minMinusRating The minimum rating between 0 and 10 the result should have. (optional)
    * @param maxMinusLength The maximum number of letters in the joke. (optional)
    * @return InlineResponse2004
    */
    @Suppress("UNCHECKED_CAST")
    fun randomJoke(keywords: kotlin.String?, includeMinusTags: kotlin.String?, excludeMinusTags: kotlin.String?, minMinusRating: kotlin.Int?, maxMinusLength: kotlin.Int?) : InlineResponse2004 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("keywords" to listOf("$keywords"), "includeMinusTags" to listOf("$includeMinusTags"), "excludeMinusTags" to listOf("$excludeMinusTags"), "minMinusRating" to listOf("$minMinusRating"), "maxMinusLength" to listOf("$maxMinusLength"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/jokes/random",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse2004>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2004
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Search Jokes
    * Search for jokes. See https://humorapi.com/docs/#Search-Jokes for more.
    * @param keywords A comma separated list of keywords. (optional)
    * @param includeMinusTags A comma separated list of tags that the joke must have. (optional)
    * @param excludeMinusTags A comma separated list of tags that the joke must not have. (optional)
    * @param number The number of results to retrieve between 1 and 10. (optional)
    * @param minMinusRating The minimum rating between 0 and 10 the result should have. (optional)
    * @param maxMinusLength The maximum number of letters in the joke. (optional)
    * @param offset The number of results to skip. (optional)
    * @return InlineResponse200
    */
    @Suppress("UNCHECKED_CAST")
    fun searchJokes(keywords: kotlin.String?, includeMinusTags: kotlin.String?, excludeMinusTags: kotlin.String?, number: kotlin.Int?, minMinusRating: kotlin.Int?, maxMinusLength: kotlin.Int?, offset: java.math.BigDecimal?) : InlineResponse200 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("keywords" to listOf("$keywords"), "includeMinusTags" to listOf("$includeMinusTags"), "excludeMinusTags" to listOf("$excludeMinusTags"), "number" to listOf("$number"), "minMinusRating" to listOf("$minMinusRating"), "maxMinusLength" to listOf("$maxMinusLength"), "offset" to listOf("$offset"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/jokes/search",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse200>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse200
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Submit Joke
    * Submit a joke. See https://humorapi.com/docs/#Submit-Joke for more.
    * @param body Post the joke as plain text. (optional)
    * @return InlineResponse2008
    */
    @Suppress("UNCHECKED_CAST")
    fun submitJoke(body: kotlin.String?) : InlineResponse2008 {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/jokes",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse2008>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2008
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Upvote a Joke
    * Upvote a joke. See https://humorapi.com/docs/#Upvote-Joke for more.
    * @param id The object&#39;s id. 
    * @return InlineResponse2008
    */
    @Suppress("UNCHECKED_CAST")
    fun upvoteJoke(id: kotlin.Int) : InlineResponse2008 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/jokes/{id}/upvote".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse2008>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2008
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

}
