/**
* Humor API
* Awesome Humor API.
*
* The version of the OpenAPI document: 1.0
* Contact: mail@humorapi.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.humorapi

import com.humorapi.client.model.InlineResponse2001
import com.humorapi.client.model.InlineResponse2005
import com.humorapi.client.model.InlineResponse2006
import com.humorapi.client.model.InlineResponse2007

import humorapi.infrastructure.ApiClient
import humorapi.infrastructure.ClientException
import humorapi.infrastructure.ClientError
import humorapi.infrastructure.ServerException
import humorapi.infrastructure.ServerError
import humorapi.infrastructure.MultiValueMap
import humorapi.infrastructure.RequestConfig
import humorapi.infrastructure.RequestMethod
import humorapi.infrastructure.ResponseType
import humorapi.infrastructure.Success
import humorapi.infrastructure.toMultiValue

class OtherApi(basePath: kotlin.String = "https://api.humorapi.com") : ApiClient(basePath) {

    /**
    * Generate Nonsense Word
    * Generate a nonsense word. See https://humorapi.com/docs/#Generate-Nonsense-Word for more.
    * @return InlineResponse2007
    */
    @Suppress("UNCHECKED_CAST")
    fun generateNonsenseWord() : InlineResponse2007 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/words/nonsense/random",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse2007>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2007
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Insult
    * Insult somebody for doing something. See https://humorapi.com/docs/#Insult for more.
    * @param name The person&#39;s name. 
    * @param reason The reason for the praise/insult. 
    * @return InlineResponse2005
    */
    @Suppress("UNCHECKED_CAST")
    fun insult(name: kotlin.String, reason: kotlin.String) : InlineResponse2005 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("name" to listOf("$name"), "reason" to listOf("$reason"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/insult",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse2005>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2005
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Praise
    * Praise somebody for doing something. See https://humorapi.com/docs/#Praise for more.
    * @param name The person&#39;s name. 
    * @param reason The reason for the praise/insult. 
    * @return InlineResponse2005
    */
    @Suppress("UNCHECKED_CAST")
    fun praise(name: kotlin.String, reason: kotlin.String) : InlineResponse2005 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("name" to listOf("$name"), "reason" to listOf("$reason"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/praise",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse2005>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2005
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Rate Word
    * Rate the funniness of a word. See https://humorapi.com/docs/#Rate-Word for more.
    * @param word The word to be rated. 
    * @return InlineResponse2006
    */
    @Suppress("UNCHECKED_CAST")
    fun rateWord(word: kotlin.String) : InlineResponse2006 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("word" to listOf("$word"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/words/rate",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse2006>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2006
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Search Gifs
    * Search for gifs. See https://humorapi.com/docs/#Search-Gifs for more.
    * @param query A search query. 
    * @param number The number of results to retrieve between 1 and 10. (optional)
    * @return InlineResponse2001
    */
    @Suppress("UNCHECKED_CAST")
    fun searchGifs(query: kotlin.String, number: kotlin.Int?) : InlineResponse2001 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("query" to listOf("$query"), "number" to listOf("$number"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/gif/search",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse2001>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2001
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

}
