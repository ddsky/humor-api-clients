/**
 * Humor API
 *
 * Awesome Humor API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@humorapi.com
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.humorapi

import java.io.IOException

import com.humorapi.client.model.InlineResponse2001
import com.humorapi.client.model.InlineResponse2005
import com.humorapi.client.model.InlineResponse2006
import com.humorapi.client.model.InlineResponse2007

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class OtherApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.humorapi.com")
        }
    }

    /**
    * Generate Nonsense Word
    * Generate a nonsense word. See https://humorapi.com/docs/#Generate-Nonsense-Word for more.
    * @return InlineResponse2007
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun generateNonsenseWord() : InlineResponse2007 {
        val localVarResponse = generateNonsenseWordWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2007
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Generate Nonsense Word
    * Generate a nonsense word. See https://humorapi.com/docs/#Generate-Nonsense-Word for more.
    * @return ApiResponse<InlineResponse2007?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun generateNonsenseWordWithHttpInfo() : ApiResponse<InlineResponse2007?> {
        val localVariableConfig = generateNonsenseWordRequestConfig()

        return request<Unit, InlineResponse2007>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation generateNonsenseWord
    *
    * @return RequestConfig
    */
    fun generateNonsenseWordRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/words/nonsense/random",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Insult
    * Insult somebody for doing something. See https://humorapi.com/docs/#Insult for more.
    * @param name The person&#39;s name. 
    * @param reason The reason for the praise/insult. 
    * @return InlineResponse2005
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun insult(name: kotlin.String, reason: kotlin.String) : InlineResponse2005 {
        val localVarResponse = insultWithHttpInfo(name = name, reason = reason)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2005
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Insult
    * Insult somebody for doing something. See https://humorapi.com/docs/#Insult for more.
    * @param name The person&#39;s name. 
    * @param reason The reason for the praise/insult. 
    * @return ApiResponse<InlineResponse2005?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun insultWithHttpInfo(name: kotlin.String, reason: kotlin.String) : ApiResponse<InlineResponse2005?> {
        val localVariableConfig = insultRequestConfig(name = name, reason = reason)

        return request<Unit, InlineResponse2005>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation insult
    *
    * @param name The person&#39;s name. 
    * @param reason The reason for the praise/insult. 
    * @return RequestConfig
    */
    fun insultRequestConfig(name: kotlin.String, reason: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("name", listOf(name.toString()))
                put("reason", listOf(reason.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/insult",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Praise
    * Praise somebody for doing something. See https://humorapi.com/docs/#Praise for more.
    * @param name The person&#39;s name. 
    * @param reason The reason for the praise/insult. 
    * @return InlineResponse2005
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun praise(name: kotlin.String, reason: kotlin.String) : InlineResponse2005 {
        val localVarResponse = praiseWithHttpInfo(name = name, reason = reason)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2005
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Praise
    * Praise somebody for doing something. See https://humorapi.com/docs/#Praise for more.
    * @param name The person&#39;s name. 
    * @param reason The reason for the praise/insult. 
    * @return ApiResponse<InlineResponse2005?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun praiseWithHttpInfo(name: kotlin.String, reason: kotlin.String) : ApiResponse<InlineResponse2005?> {
        val localVariableConfig = praiseRequestConfig(name = name, reason = reason)

        return request<Unit, InlineResponse2005>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation praise
    *
    * @param name The person&#39;s name. 
    * @param reason The reason for the praise/insult. 
    * @return RequestConfig
    */
    fun praiseRequestConfig(name: kotlin.String, reason: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("name", listOf(name.toString()))
                put("reason", listOf(reason.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/praise",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Rate Word
    * Rate the funniness of a word. See https://humorapi.com/docs/#Rate-Word for more.
    * @param word The word to be rated. 
    * @return InlineResponse2006
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun rateWord(word: kotlin.String) : InlineResponse2006 {
        val localVarResponse = rateWordWithHttpInfo(word = word)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2006
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Rate Word
    * Rate the funniness of a word. See https://humorapi.com/docs/#Rate-Word for more.
    * @param word The word to be rated. 
    * @return ApiResponse<InlineResponse2006?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun rateWordWithHttpInfo(word: kotlin.String) : ApiResponse<InlineResponse2006?> {
        val localVariableConfig = rateWordRequestConfig(word = word)

        return request<Unit, InlineResponse2006>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation rateWord
    *
    * @param word The word to be rated. 
    * @return RequestConfig
    */
    fun rateWordRequestConfig(word: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("word", listOf(word.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/words/rate",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Search Gifs
    * Search for gifs. See https://humorapi.com/docs/#Search-Gifs for more.
    * @param query A search query. 
    * @param number The number of results to retrieve between 1 and 10. (optional)
    * @return InlineResponse2001
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun searchGifs(query: kotlin.String, number: kotlin.Int?) : InlineResponse2001 {
        val localVarResponse = searchGifsWithHttpInfo(query = query, number = number)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2001
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Search Gifs
    * Search for gifs. See https://humorapi.com/docs/#Search-Gifs for more.
    * @param query A search query. 
    * @param number The number of results to retrieve between 1 and 10. (optional)
    * @return ApiResponse<InlineResponse2001?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchGifsWithHttpInfo(query: kotlin.String, number: kotlin.Int?) : ApiResponse<InlineResponse2001?> {
        val localVariableConfig = searchGifsRequestConfig(query = query, number = number)

        return request<Unit, InlineResponse2001>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation searchGifs
    *
    * @param query A search query. 
    * @param number The number of results to retrieve between 1 and 10. (optional)
    * @return RequestConfig
    */
    fun searchGifsRequestConfig(query: kotlin.String, number: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("query", listOf(query.toString()))
                if (number != null) {
                    put("number", listOf(number.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/gif/search",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
