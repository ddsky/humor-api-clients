/**
* Humor API
* Awesome Humor API.
*
* The version of the OpenAPI document: 1.0
* Contact: mail@humorapi.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.humorapi

import com.humorapi.client.model.InlineResponse2002
import com.humorapi.client.model.InlineResponse2003
import com.humorapi.client.model.InlineResponse2008

import humorapi.infrastructure.ApiClient
import humorapi.infrastructure.ClientException
import humorapi.infrastructure.ClientError
import humorapi.infrastructure.ServerException
import humorapi.infrastructure.ServerError
import humorapi.infrastructure.MultiValueMap
import humorapi.infrastructure.RequestConfig
import humorapi.infrastructure.RequestMethod
import humorapi.infrastructure.ResponseType
import humorapi.infrastructure.Success
import humorapi.infrastructure.toMultiValue

class MemesApi(basePath: kotlin.String = "https://api.humorapi.com") : ApiClient(basePath) {

    /**
    * Downvote a Meme
    * Downvote a meme. See https://humorapi.com/docs/#Downvote-Meme for more.
    * @param id The object&#39;s id. 
    * @return InlineResponse2008
    */
    @Suppress("UNCHECKED_CAST")
    fun downvoteMeme(id: kotlin.Int) : InlineResponse2008 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/memes/{id}/downvote".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse2008>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2008
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Random Meme
    * Get a random meme. See https://humorapi.com/docs/#Random-Meme for more.
    * @param keywords A comma separated list of keywords. (optional)
    * @param keywordsMinusInMinusImage Whether the keywords should be found in the meme&#39;s image. (optional)
    * @param mediaMinusType The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)
    * @param number The number of results to retrieve between 1 and 10. (optional)
    * @param minMinusRating The minimum rating between 0 and 10 the result should have. (optional)
    * @return InlineResponse2003
    */
    @Suppress("UNCHECKED_CAST")
    fun randomMeme(keywords: kotlin.String?, keywordsMinusInMinusImage: kotlin.Boolean?, mediaMinusType: kotlin.String?, number: kotlin.Int?, minMinusRating: kotlin.Int?) : InlineResponse2003 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("keywords" to listOf("$keywords"), "keywordsMinusInMinusImage" to listOf("$keywordsMinusInMinusImage"), "mediaMinusType" to listOf("$mediaMinusType"), "number" to listOf("$number"), "minMinusRating" to listOf("$minMinusRating"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/memes/random",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse2003>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2003
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Search Memes
    * Search for memes. See https://humorapi.com/docs/#Search-Memes for more.
    * @param keywords A comma separated list of keywords. (optional)
    * @param keywordsMinusInMinusImage Whether the keywords should be found in the meme&#39;s image. (optional)
    * @param mediaMinusType The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)
    * @param number The number of results to retrieve between 1 and 10. (optional)
    * @param minMinusRating The minimum rating between 0 and 10 the result should have. (optional)
    * @return InlineResponse2002
    */
    @Suppress("UNCHECKED_CAST")
    fun searchMemes(keywords: kotlin.String?, keywordsMinusInMinusImage: kotlin.Boolean?, mediaMinusType: kotlin.String?, number: kotlin.Int?, minMinusRating: kotlin.Int?) : InlineResponse2002 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("keywords" to listOf("$keywords"), "keywordsMinusInMinusImage" to listOf("$keywordsMinusInMinusImage"), "mediaMinusType" to listOf("$mediaMinusType"), "number" to listOf("$number"), "minMinusRating" to listOf("$minMinusRating"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/memes/search",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse2002>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2002
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Upvote a Meme
    * Upvote a meme. See https://humorapi.com/docs/#Upvote-Meme for more.
    * @param id The object&#39;s id. 
    * @return InlineResponse2008
    */
    @Suppress("UNCHECKED_CAST")
    fun upvoteMeme(id: kotlin.Int) : InlineResponse2008 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/memes/{id}/upvote".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse2008>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2008
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

}
