/**
 * Humor API
 *
 * Awesome Humor API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@humorapi.com
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.humorapi

import java.io.IOException

import com.humorapi.client.model.InlineResponse2002
import com.humorapi.client.model.InlineResponse2003
import com.humorapi.client.model.InlineResponse2008

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class MemesApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.humorapi.com")
        }
    }

    /**
    * Downvote a Meme
    * Downvote a meme. See https://humorapi.com/docs/#Downvote-Meme for more.
    * @param id The object&#39;s id. 
    * @return InlineResponse2008
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun downvoteMeme(id: kotlin.Int) : InlineResponse2008 {
        val localVarResponse = downvoteMemeWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2008
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Downvote a Meme
    * Downvote a meme. See https://humorapi.com/docs/#Downvote-Meme for more.
    * @param id The object&#39;s id. 
    * @return ApiResponse<InlineResponse2008?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun downvoteMemeWithHttpInfo(id: kotlin.Int) : ApiResponse<InlineResponse2008?> {
        val localVariableConfig = downvoteMemeRequestConfig(id = id)

        return request<Unit, InlineResponse2008>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation downvoteMeme
    *
    * @param id The object&#39;s id. 
    * @return RequestConfig
    */
    fun downvoteMemeRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/memes/{id}/downvote".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter keywordsInImage
     */
     enum class KeywordsInImage_randomMeme(val value: kotlin.Boolean) {
         @Json(name = ""true"") `true`("true"),
         @Json(name = ""false"") `false`("false"),
         ;
     }

    /**
     * enum for parameter mediaType
     */
     enum class MediaType_randomMeme(val value: kotlin.String) {
         @Json(name = "image") image("image"),
         @Json(name = "video") video("video"),
         @Json(name = "jpg") jpg("jpg"),
         @Json(name = "gif") gif("gif"),
         @Json(name = "png") png("png"),
         @Json(name = "mp4") mp4("mp4"),
         ;
     }

    /**
    * Random Meme
    * Get a random meme. See https://humorapi.com/docs/#Random-Meme for more.
    * @param keywords A comma separated list of keywords. (optional)
    * @param keywordsInImage Whether the keywords should be found in the meme&#39;s image. (optional)
    * @param mediaType The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)
    * @param number The number of results to retrieve between 1 and 10. (optional)
    * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
    * @return InlineResponse2003
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun randomMeme(keywords: kotlin.String?, keywordsInImage: KeywordsInImage_randomMeme?, mediaType: MediaType_randomMeme?, number: kotlin.Int?, minRating: kotlin.Int?) : InlineResponse2003 {
        val localVarResponse = randomMemeWithHttpInfo(keywords = keywords, keywordsInImage = keywordsInImage, mediaType = mediaType, number = number, minRating = minRating)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2003
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Random Meme
    * Get a random meme. See https://humorapi.com/docs/#Random-Meme for more.
    * @param keywords A comma separated list of keywords. (optional)
    * @param keywordsInImage Whether the keywords should be found in the meme&#39;s image. (optional)
    * @param mediaType The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)
    * @param number The number of results to retrieve between 1 and 10. (optional)
    * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
    * @return ApiResponse<InlineResponse2003?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun randomMemeWithHttpInfo(keywords: kotlin.String?, keywordsInImage: KeywordsInImage_randomMeme?, mediaType: MediaType_randomMeme?, number: kotlin.Int?, minRating: kotlin.Int?) : ApiResponse<InlineResponse2003?> {
        val localVariableConfig = randomMemeRequestConfig(keywords = keywords, keywordsInImage = keywordsInImage, mediaType = mediaType, number = number, minRating = minRating)

        return request<Unit, InlineResponse2003>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation randomMeme
    *
    * @param keywords A comma separated list of keywords. (optional)
    * @param keywordsInImage Whether the keywords should be found in the meme&#39;s image. (optional)
    * @param mediaType The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)
    * @param number The number of results to retrieve between 1 and 10. (optional)
    * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
    * @return RequestConfig
    */
    fun randomMemeRequestConfig(keywords: kotlin.String?, keywordsInImage: KeywordsInImage_randomMeme?, mediaType: MediaType_randomMeme?, number: kotlin.Int?, minRating: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (keywords != null) {
                    put("keywords", listOf(keywords.toString()))
                }
                if (keywordsInImage != null) {
                    put("keywords-in-image", listOf(keywordsInImage.toString()))
                }
                if (mediaType != null) {
                    put("media-type", listOf(mediaType.toString()))
                }
                if (number != null) {
                    put("number", listOf(number.toString()))
                }
                if (minRating != null) {
                    put("min-rating", listOf(minRating.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/memes/random",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter keywordsInImage
     */
     enum class KeywordsInImage_searchMemes(val value: kotlin.Boolean) {
         @Json(name = ""true"") `true`("true"),
         @Json(name = ""false"") `false`("false"),
         ;
     }

    /**
     * enum for parameter mediaType
     */
     enum class MediaType_searchMemes(val value: kotlin.String) {
         @Json(name = "image") image("image"),
         @Json(name = "video") video("video"),
         @Json(name = "jpg") jpg("jpg"),
         @Json(name = "gif") gif("gif"),
         @Json(name = "png") png("png"),
         @Json(name = "mp4") mp4("mp4"),
         ;
     }

    /**
    * Search Memes
    * Search for memes. See https://humorapi.com/docs/#Search-Memes for more.
    * @param keywords A comma separated list of keywords. (optional)
    * @param keywordsInImage Whether the keywords should be found in the meme&#39;s image. (optional)
    * @param mediaType The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)
    * @param number The number of results to retrieve between 1 and 10. (optional)
    * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
    * @param offset The number of results to skip. (optional)
    * @return InlineResponse2002
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun searchMemes(keywords: kotlin.String?, keywordsInImage: KeywordsInImage_searchMemes?, mediaType: MediaType_searchMemes?, number: kotlin.Int?, minRating: kotlin.Int?, offset: java.math.BigDecimal?) : InlineResponse2002 {
        val localVarResponse = searchMemesWithHttpInfo(keywords = keywords, keywordsInImage = keywordsInImage, mediaType = mediaType, number = number, minRating = minRating, offset = offset)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2002
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Search Memes
    * Search for memes. See https://humorapi.com/docs/#Search-Memes for more.
    * @param keywords A comma separated list of keywords. (optional)
    * @param keywordsInImage Whether the keywords should be found in the meme&#39;s image. (optional)
    * @param mediaType The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)
    * @param number The number of results to retrieve between 1 and 10. (optional)
    * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
    * @param offset The number of results to skip. (optional)
    * @return ApiResponse<InlineResponse2002?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchMemesWithHttpInfo(keywords: kotlin.String?, keywordsInImage: KeywordsInImage_searchMemes?, mediaType: MediaType_searchMemes?, number: kotlin.Int?, minRating: kotlin.Int?, offset: java.math.BigDecimal?) : ApiResponse<InlineResponse2002?> {
        val localVariableConfig = searchMemesRequestConfig(keywords = keywords, keywordsInImage = keywordsInImage, mediaType = mediaType, number = number, minRating = minRating, offset = offset)

        return request<Unit, InlineResponse2002>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation searchMemes
    *
    * @param keywords A comma separated list of keywords. (optional)
    * @param keywordsInImage Whether the keywords should be found in the meme&#39;s image. (optional)
    * @param mediaType The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)
    * @param number The number of results to retrieve between 1 and 10. (optional)
    * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
    * @param offset The number of results to skip. (optional)
    * @return RequestConfig
    */
    fun searchMemesRequestConfig(keywords: kotlin.String?, keywordsInImage: KeywordsInImage_searchMemes?, mediaType: MediaType_searchMemes?, number: kotlin.Int?, minRating: kotlin.Int?, offset: java.math.BigDecimal?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (keywords != null) {
                    put("keywords", listOf(keywords.toString()))
                }
                if (keywordsInImage != null) {
                    put("keywords-in-image", listOf(keywordsInImage.toString()))
                }
                if (mediaType != null) {
                    put("media-type", listOf(mediaType.toString()))
                }
                if (number != null) {
                    put("number", listOf(number.toString()))
                }
                if (minRating != null) {
                    put("min-rating", listOf(minRating.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/memes/search",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Upvote a Meme
    * Upvote a meme. See https://humorapi.com/docs/#Upvote-Meme for more.
    * @param id The object&#39;s id. 
    * @return InlineResponse2008
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun upvoteMeme(id: kotlin.Int) : InlineResponse2008 {
        val localVarResponse = upvoteMemeWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2008
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Upvote a Meme
    * Upvote a meme. See https://humorapi.com/docs/#Upvote-Meme for more.
    * @param id The object&#39;s id. 
    * @return ApiResponse<InlineResponse2008?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun upvoteMemeWithHttpInfo(id: kotlin.Int) : ApiResponse<InlineResponse2008?> {
        val localVariableConfig = upvoteMemeRequestConfig(id = id)

        return request<Unit, InlineResponse2008>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation upvoteMeme
    *
    * @param id The object&#39;s id. 
    * @return RequestConfig
    */
    fun upvoteMemeRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/memes/{id}/upvote".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
