/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package humorapi.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import humorapi.models.GenerateNonsenseWord200Response
import humorapi.models.Praise200Response
import humorapi.models.RateWord200Response
import humorapi.models.SearchGifs200Response

import com.squareup.moshi.Json

import humorapi.infrastructure.ApiClient
import humorapi.infrastructure.ApiResponse
import humorapi.infrastructure.ClientException
import humorapi.infrastructure.ClientError
import humorapi.infrastructure.ServerException
import humorapi.infrastructure.ServerError
import humorapi.infrastructure.MultiValueMap
import humorapi.infrastructure.PartConfig
import humorapi.infrastructure.RequestConfig
import humorapi.infrastructure.RequestMethod
import humorapi.infrastructure.ResponseType
import humorapi.infrastructure.Success
import humorapi.infrastructure.toMultiValue

class OtherApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.humorapi.com")
        }
    }

    /**
     * Generate Nonsense Word
     * Generate a nonsense word. See https://humorapi.com/docs/#Generate-Nonsense-Word for more.
     * @return GenerateNonsenseWord200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun generateNonsenseWord() : GenerateNonsenseWord200Response {
        val localVarResponse = generateNonsenseWordWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GenerateNonsenseWord200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Generate Nonsense Word
     * Generate a nonsense word. See https://humorapi.com/docs/#Generate-Nonsense-Word for more.
     * @return ApiResponse<GenerateNonsenseWord200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun generateNonsenseWordWithHttpInfo() : ApiResponse<GenerateNonsenseWord200Response?> {
        val localVariableConfig = generateNonsenseWordRequestConfig()

        return request<Unit, GenerateNonsenseWord200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation generateNonsenseWord
     *
     * @return RequestConfig
     */
    fun generateNonsenseWordRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/words/nonsense/random",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Insult
     * Insult somebody for doing something. See https://humorapi.com/docs/#Insult for more.
     * @param name The person&#39;s name.
     * @param reason The reason for the praise/insult.
     * @return Praise200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun insult(name: kotlin.String, reason: kotlin.String) : Praise200Response {
        val localVarResponse = insultWithHttpInfo(name = name, reason = reason)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Praise200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Insult
     * Insult somebody for doing something. See https://humorapi.com/docs/#Insult for more.
     * @param name The person&#39;s name.
     * @param reason The reason for the praise/insult.
     * @return ApiResponse<Praise200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun insultWithHttpInfo(name: kotlin.String, reason: kotlin.String) : ApiResponse<Praise200Response?> {
        val localVariableConfig = insultRequestConfig(name = name, reason = reason)

        return request<Unit, Praise200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation insult
     *
     * @param name The person&#39;s name.
     * @param reason The reason for the praise/insult.
     * @return RequestConfig
     */
    fun insultRequestConfig(name: kotlin.String, reason: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("name", listOf(name.toString()))
                put("reason", listOf(reason.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/insult",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Praise
     * Praise somebody for doing something. See https://humorapi.com/docs/#Praise for more.
     * @param name The person&#39;s name.
     * @param reason The reason for the praise/insult.
     * @return Praise200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun praise(name: kotlin.String, reason: kotlin.String) : Praise200Response {
        val localVarResponse = praiseWithHttpInfo(name = name, reason = reason)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Praise200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Praise
     * Praise somebody for doing something. See https://humorapi.com/docs/#Praise for more.
     * @param name The person&#39;s name.
     * @param reason The reason for the praise/insult.
     * @return ApiResponse<Praise200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun praiseWithHttpInfo(name: kotlin.String, reason: kotlin.String) : ApiResponse<Praise200Response?> {
        val localVariableConfig = praiseRequestConfig(name = name, reason = reason)

        return request<Unit, Praise200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation praise
     *
     * @param name The person&#39;s name.
     * @param reason The reason for the praise/insult.
     * @return RequestConfig
     */
    fun praiseRequestConfig(name: kotlin.String, reason: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("name", listOf(name.toString()))
                put("reason", listOf(reason.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/praise",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Rate Word
     * Rate the funniness of a word. See https://humorapi.com/docs/#Rate-Word for more.
     * @param word The word to be rated.
     * @return RateWord200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun rateWord(word: kotlin.String) : RateWord200Response {
        val localVarResponse = rateWordWithHttpInfo(word = word)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RateWord200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Rate Word
     * Rate the funniness of a word. See https://humorapi.com/docs/#Rate-Word for more.
     * @param word The word to be rated.
     * @return ApiResponse<RateWord200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun rateWordWithHttpInfo(word: kotlin.String) : ApiResponse<RateWord200Response?> {
        val localVariableConfig = rateWordRequestConfig(word = word)

        return request<Unit, RateWord200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation rateWord
     *
     * @param word The word to be rated.
     * @return RequestConfig
     */
    fun rateWordRequestConfig(word: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("word", listOf(word.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/words/rate",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Search Gifs
     * Search for gifs. See https://humorapi.com/docs/#Search-Gifs for more.
     * @param query A search query.
     * @param number The number of results to retrieve between 1 and 10. (optional)
     * @return SearchGifs200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun searchGifs(query: kotlin.String, number: kotlin.Int? = null) : SearchGifs200Response {
        val localVarResponse = searchGifsWithHttpInfo(query = query, number = number)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SearchGifs200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Search Gifs
     * Search for gifs. See https://humorapi.com/docs/#Search-Gifs for more.
     * @param query A search query.
     * @param number The number of results to retrieve between 1 and 10. (optional)
     * @return ApiResponse<SearchGifs200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchGifsWithHttpInfo(query: kotlin.String, number: kotlin.Int?) : ApiResponse<SearchGifs200Response?> {
        val localVariableConfig = searchGifsRequestConfig(query = query, number = number)

        return request<Unit, SearchGifs200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation searchGifs
     *
     * @param query A search query.
     * @param number The number of results to retrieve between 1 and 10. (optional)
     * @return RequestConfig
     */
    fun searchGifsRequestConfig(query: kotlin.String, number: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("query", listOf(query.toString()))
                if (number != null) {
                    put("number", listOf(number.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/gif/search",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
