/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package humorapi.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import humorapi.models.RandomMeme200Response
import humorapi.models.SearchMemes200Response
import humorapi.models.SubmitJoke200Response

import com.squareup.moshi.Json

import humorapi.infrastructure.ApiClient
import humorapi.infrastructure.ApiResponse
import humorapi.infrastructure.ClientException
import humorapi.infrastructure.ClientError
import humorapi.infrastructure.ServerException
import humorapi.infrastructure.ServerError
import humorapi.infrastructure.MultiValueMap
import humorapi.infrastructure.PartConfig
import humorapi.infrastructure.RequestConfig
import humorapi.infrastructure.RequestMethod
import humorapi.infrastructure.ResponseType
import humorapi.infrastructure.Success
import humorapi.infrastructure.toMultiValue

class MemesApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.humorapi.com")
        }
    }

    /**
     * Downvote a Meme
     * Downvote a meme. See https://humorapi.com/docs/#Downvote-Meme for more.
     * @param id The object&#39;s id.
     * @return SubmitJoke200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun downvoteMeme(id: kotlin.Int) : SubmitJoke200Response {
        val localVarResponse = downvoteMemeWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SubmitJoke200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Downvote a Meme
     * Downvote a meme. See https://humorapi.com/docs/#Downvote-Meme for more.
     * @param id The object&#39;s id.
     * @return ApiResponse<SubmitJoke200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun downvoteMemeWithHttpInfo(id: kotlin.Int) : ApiResponse<SubmitJoke200Response?> {
        val localVariableConfig = downvoteMemeRequestConfig(id = id)

        return request<Unit, SubmitJoke200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation downvoteMeme
     *
     * @param id The object&#39;s id.
     * @return RequestConfig
     */
    fun downvoteMemeRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/memes/{id}/downvote".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter mediaType
     */
     enum class MediaTypeRandomMeme(val value: kotlin.String) {
         @Json(name = "image") image("image"),
         @Json(name = "video") video("video"),
         @Json(name = "jpg") jpg("jpg"),
         @Json(name = "gif") gif("gif"),
         @Json(name = "png") png("png"),
         @Json(name = "mp4") mp4("mp4")
     }

    /**
     * Random Meme
     * Get a random meme. See https://humorapi.com/docs/#Random-Meme for more.
     * @param keywords A comma separated list of keywords. (optional)
     * @param keywordsInImage Whether the keywords should be found in the meme&#39;s image. (optional)
     * @param mediaType The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)
     * @param number The number of results to retrieve between 1 and 10. (optional)
     * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
     * @return RandomMeme200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun randomMeme(keywords: kotlin.String? = null, keywordsInImage: kotlin.Boolean? = null, mediaType: MediaTypeRandomMeme? = null, number: kotlin.Int? = null, minRating: kotlin.Int? = null) : RandomMeme200Response {
        val localVarResponse = randomMemeWithHttpInfo(keywords = keywords, keywordsInImage = keywordsInImage, mediaType = mediaType, number = number, minRating = minRating)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RandomMeme200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Random Meme
     * Get a random meme. See https://humorapi.com/docs/#Random-Meme for more.
     * @param keywords A comma separated list of keywords. (optional)
     * @param keywordsInImage Whether the keywords should be found in the meme&#39;s image. (optional)
     * @param mediaType The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)
     * @param number The number of results to retrieve between 1 and 10. (optional)
     * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
     * @return ApiResponse<RandomMeme200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun randomMemeWithHttpInfo(keywords: kotlin.String?, keywordsInImage: kotlin.Boolean?, mediaType: MediaTypeRandomMeme?, number: kotlin.Int?, minRating: kotlin.Int?) : ApiResponse<RandomMeme200Response?> {
        val localVariableConfig = randomMemeRequestConfig(keywords = keywords, keywordsInImage = keywordsInImage, mediaType = mediaType, number = number, minRating = minRating)

        return request<Unit, RandomMeme200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation randomMeme
     *
     * @param keywords A comma separated list of keywords. (optional)
     * @param keywordsInImage Whether the keywords should be found in the meme&#39;s image. (optional)
     * @param mediaType The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)
     * @param number The number of results to retrieve between 1 and 10. (optional)
     * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
     * @return RequestConfig
     */
    fun randomMemeRequestConfig(keywords: kotlin.String?, keywordsInImage: kotlin.Boolean?, mediaType: MediaTypeRandomMeme?, number: kotlin.Int?, minRating: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (keywords != null) {
                    put("keywords", listOf(keywords.toString()))
                }
                if (keywordsInImage != null) {
                    put("keywords-in-image", listOf(keywordsInImage.toString()))
                }
                if (mediaType != null) {
                    put("media-type", listOf(mediaType.value))
                }
                if (number != null) {
                    put("number", listOf(number.toString()))
                }
                if (minRating != null) {
                    put("min-rating", listOf(minRating.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/memes/random",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter mediaType
     */
     enum class MediaTypeSearchMemes(val value: kotlin.String) {
         @Json(name = "image") image("image"),
         @Json(name = "video") video("video"),
         @Json(name = "jpg") jpg("jpg"),
         @Json(name = "gif") gif("gif"),
         @Json(name = "png") png("png"),
         @Json(name = "mp4") mp4("mp4")
     }

    /**
     * Search Memes
     * Search for memes. See https://humorapi.com/docs/#Search-Memes for more.
     * @param keywords A comma separated list of keywords. (optional)
     * @param keywordsInImage Whether the keywords should be found in the meme&#39;s image. (optional)
     * @param mediaType The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)
     * @param number The number of results to retrieve between 1 and 10. (optional)
     * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
     * @param offset The number of results to skip. (optional)
     * @return SearchMemes200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun searchMemes(keywords: kotlin.String? = null, keywordsInImage: kotlin.Boolean? = null, mediaType: MediaTypeSearchMemes? = null, number: kotlin.Int? = null, minRating: kotlin.Int? = null, offset: java.math.BigDecimal? = null) : SearchMemes200Response {
        val localVarResponse = searchMemesWithHttpInfo(keywords = keywords, keywordsInImage = keywordsInImage, mediaType = mediaType, number = number, minRating = minRating, offset = offset)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SearchMemes200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Search Memes
     * Search for memes. See https://humorapi.com/docs/#Search-Memes for more.
     * @param keywords A comma separated list of keywords. (optional)
     * @param keywordsInImage Whether the keywords should be found in the meme&#39;s image. (optional)
     * @param mediaType The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)
     * @param number The number of results to retrieve between 1 and 10. (optional)
     * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
     * @param offset The number of results to skip. (optional)
     * @return ApiResponse<SearchMemes200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchMemesWithHttpInfo(keywords: kotlin.String?, keywordsInImage: kotlin.Boolean?, mediaType: MediaTypeSearchMemes?, number: kotlin.Int?, minRating: kotlin.Int?, offset: java.math.BigDecimal?) : ApiResponse<SearchMemes200Response?> {
        val localVariableConfig = searchMemesRequestConfig(keywords = keywords, keywordsInImage = keywordsInImage, mediaType = mediaType, number = number, minRating = minRating, offset = offset)

        return request<Unit, SearchMemes200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation searchMemes
     *
     * @param keywords A comma separated list of keywords. (optional)
     * @param keywordsInImage Whether the keywords should be found in the meme&#39;s image. (optional)
     * @param mediaType The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)
     * @param number The number of results to retrieve between 1 and 10. (optional)
     * @param minRating The minimum rating between 0 and 10 the result should have. (optional)
     * @param offset The number of results to skip. (optional)
     * @return RequestConfig
     */
    fun searchMemesRequestConfig(keywords: kotlin.String?, keywordsInImage: kotlin.Boolean?, mediaType: MediaTypeSearchMemes?, number: kotlin.Int?, minRating: kotlin.Int?, offset: java.math.BigDecimal?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (keywords != null) {
                    put("keywords", listOf(keywords.toString()))
                }
                if (keywordsInImage != null) {
                    put("keywords-in-image", listOf(keywordsInImage.toString()))
                }
                if (mediaType != null) {
                    put("media-type", listOf(mediaType.value))
                }
                if (number != null) {
                    put("number", listOf(number.toString()))
                }
                if (minRating != null) {
                    put("min-rating", listOf(minRating.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/memes/search",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Upvote a Meme
     * Upvote a meme. See https://humorapi.com/docs/#Upvote-Meme for more.
     * @param id The object&#39;s id.
     * @return SubmitJoke200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun upvoteMeme(id: kotlin.Int) : SubmitJoke200Response {
        val localVarResponse = upvoteMemeWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SubmitJoke200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Upvote a Meme
     * Upvote a meme. See https://humorapi.com/docs/#Upvote-Meme for more.
     * @param id The object&#39;s id.
     * @return ApiResponse<SubmitJoke200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun upvoteMemeWithHttpInfo(id: kotlin.Int) : ApiResponse<SubmitJoke200Response?> {
        val localVariableConfig = upvoteMemeRequestConfig(id = id)

        return request<Unit, SubmitJoke200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation upvoteMeme
     *
     * @param id The object&#39;s id.
     * @return RequestConfig
     */
    fun upvoteMemeRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/memes/{id}/upvote".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
