# coding: utf-8

"""
    Humor API

    Awesome Humor API.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: mail@humorapi.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from humorapi.api_client import ApiClient
from humorapi.exceptions import (
    ApiTypeError,
    ApiValueError
)


class OtherApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def generate_nonsense_word(self, **kwargs):  # noqa: E501
        """Generate Nonsense Word  # noqa: E501

        Generate a nonsense word. See https://humorapi.com/docs/#Generate-Nonsense-Word for more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_nonsense_word(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.generate_nonsense_word_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.generate_nonsense_word_with_http_info(**kwargs)  # noqa: E501
            return data

    def generate_nonsense_word_with_http_info(self, **kwargs):  # noqa: E501
        """Generate Nonsense Word  # noqa: E501

        Generate a nonsense word. See https://humorapi.com/docs/#Generate-Nonsense-Word for more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_nonsense_word_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_nonsense_word" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/words/nonsense/random', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def insult(self, name, reason, **kwargs):  # noqa: E501
        """Insult  # noqa: E501

        Insult somebody for doing something. See https://humorapi.com/docs/#Insult for more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insult(name, reason, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The person's name. (required)
        :param str reason: The reason for the praise/insult. (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.insult_with_http_info(name, reason, **kwargs)  # noqa: E501
        else:
            (data) = self.insult_with_http_info(name, reason, **kwargs)  # noqa: E501
            return data

    def insult_with_http_info(self, name, reason, **kwargs):  # noqa: E501
        """Insult  # noqa: E501

        Insult somebody for doing something. See https://humorapi.com/docs/#Insult for more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insult_with_http_info(name, reason, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The person's name. (required)
        :param str reason: The reason for the praise/insult. (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['name', 'reason']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method insult" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in local_var_params or
                local_var_params['name'] is None):
            raise ApiValueError("Missing the required parameter `name` when calling `insult`")  # noqa: E501
        # verify the required parameter 'reason' is set
        if ('reason' not in local_var_params or
                local_var_params['reason'] is None):
            raise ApiValueError("Missing the required parameter `reason` when calling `insult`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in local_var_params:
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'reason' in local_var_params:
            query_params.append(('reason', local_var_params['reason']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/insult', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def praise(self, name, reason, **kwargs):  # noqa: E501
        """Praise  # noqa: E501

        Praise somebody for doing something. See https://humorapi.com/docs/#Praise for more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.praise(name, reason, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The person's name. (required)
        :param str reason: The reason for the praise/insult. (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.praise_with_http_info(name, reason, **kwargs)  # noqa: E501
        else:
            (data) = self.praise_with_http_info(name, reason, **kwargs)  # noqa: E501
            return data

    def praise_with_http_info(self, name, reason, **kwargs):  # noqa: E501
        """Praise  # noqa: E501

        Praise somebody for doing something. See https://humorapi.com/docs/#Praise for more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.praise_with_http_info(name, reason, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The person's name. (required)
        :param str reason: The reason for the praise/insult. (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['name', 'reason']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method praise" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in local_var_params or
                local_var_params['name'] is None):
            raise ApiValueError("Missing the required parameter `name` when calling `praise`")  # noqa: E501
        # verify the required parameter 'reason' is set
        if ('reason' not in local_var_params or
                local_var_params['reason'] is None):
            raise ApiValueError("Missing the required parameter `reason` when calling `praise`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in local_var_params:
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'reason' in local_var_params:
            query_params.append(('reason', local_var_params['reason']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/praise', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rate_word(self, word, **kwargs):  # noqa: E501
        """Rate Word  # noqa: E501

        Rate the funniness of a word. See https://humorapi.com/docs/#Rate-Word for more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rate_word(word, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str word: The word to be rated. (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rate_word_with_http_info(word, **kwargs)  # noqa: E501
        else:
            (data) = self.rate_word_with_http_info(word, **kwargs)  # noqa: E501
            return data

    def rate_word_with_http_info(self, word, **kwargs):  # noqa: E501
        """Rate Word  # noqa: E501

        Rate the funniness of a word. See https://humorapi.com/docs/#Rate-Word for more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rate_word_with_http_info(word, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str word: The word to be rated. (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['word']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rate_word" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'word' is set
        if ('word' not in local_var_params or
                local_var_params['word'] is None):
            raise ApiValueError("Missing the required parameter `word` when calling `rate_word`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'word' in local_var_params:
            query_params.append(('word', local_var_params['word']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/words/rate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_gifs(self, query, **kwargs):  # noqa: E501
        """Search Gifs  # noqa: E501

        Search for gifs. See https://humorapi.com/docs/#Search-Gifs for more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_gifs(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: A search query. (required)
        :param int number: The number of results to retrieve between 1 and 10.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_gifs_with_http_info(query, **kwargs)  # noqa: E501
        else:
            (data) = self.search_gifs_with_http_info(query, **kwargs)  # noqa: E501
            return data

    def search_gifs_with_http_info(self, query, **kwargs):  # noqa: E501
        """Search Gifs  # noqa: E501

        Search for gifs. See https://humorapi.com/docs/#Search-Gifs for more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_gifs_with_http_info(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: A search query. (required)
        :param int number: The number of results to retrieve between 1 and 10.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['query', 'number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_gifs" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in local_var_params or
                local_var_params['query'] is None):
            raise ApiValueError("Missing the required parameter `query` when calling `search_gifs`")  # noqa: E501

        if 'number' in local_var_params and local_var_params['number'] > 10:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `number` when calling `search_gifs`, must be a value less than or equal to `10`")  # noqa: E501
        if 'number' in local_var_params and local_var_params['number'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `number` when calling `search_gifs`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in local_var_params:
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'number' in local_var_params:
            query_params.append(('number', local_var_params['number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/gif/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
