# coding: utf-8

"""
    Humor API

    Awesome Humor API.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: mail@humorapi.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from humorapi.api_client import ApiClient
from humorapi.exceptions import (
    ApiTypeError,
    ApiValueError
)


class MemesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def downvote_meme(self, id, **kwargs):  # noqa: E501
        """Downvote a Meme  # noqa: E501

        Downvote a meme. See https://humorapi.com/docs/#Downvote-Meme for more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.downvote_meme(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The object's id. (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.downvote_meme_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.downvote_meme_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def downvote_meme_with_http_info(self, id, **kwargs):  # noqa: E501
        """Downvote a Meme  # noqa: E501

        Downvote a meme. See https://humorapi.com/docs/#Downvote-Meme for more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.downvote_meme_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The object's id. (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method downvote_meme" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ApiValueError("Missing the required parameter `id` when calling `downvote_meme`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/memes/{id}/downvote', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def random_meme(self, **kwargs):  # noqa: E501
        """Random Meme  # noqa: E501

        Get a random meme. See https://humorapi.com/docs/#Random-Meme for more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.random_meme(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str keywords: A comma separated list of keywords.
        :param bool keywords_in_image: Whether the keywords should be found in the meme's image.
        :param str media_type: The type of the content. Can be either 'image' or 'video' or specific formats such as 'jpg', 'png', 'gif', or 'mp4'.
        :param int number: The number of results to retrieve between 1 and 10.
        :param int min_rating: The minimum rating between 0 and 10 the result should have.
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.random_meme_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.random_meme_with_http_info(**kwargs)  # noqa: E501
            return data

    def random_meme_with_http_info(self, **kwargs):  # noqa: E501
        """Random Meme  # noqa: E501

        Get a random meme. See https://humorapi.com/docs/#Random-Meme for more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.random_meme_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str keywords: A comma separated list of keywords.
        :param bool keywords_in_image: Whether the keywords should be found in the meme's image.
        :param str media_type: The type of the content. Can be either 'image' or 'video' or specific formats such as 'jpg', 'png', 'gif', or 'mp4'.
        :param int number: The number of results to retrieve between 1 and 10.
        :param int min_rating: The minimum rating between 0 and 10 the result should have.
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['keywords', 'keywords_in_image', 'media_type', 'number', 'min_rating']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method random_meme" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if 'number' in local_var_params and local_var_params['number'] > 10:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `number` when calling `random_meme`, must be a value less than or equal to `10`")  # noqa: E501
        if 'number' in local_var_params and local_var_params['number'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `number` when calling `random_meme`, must be a value greater than or equal to `1`")  # noqa: E501
        if ('min_rating' in local_var_params and
                len(local_var_params['min_rating']) < 0):
            raise ApiValueError("Invalid value for parameter `min_rating` when calling `random_meme`, length must be greater than or equal to `0`")  # noqa: E501
        if 'min_rating' in local_var_params and local_var_params['min_rating'] > 10:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `min_rating` when calling `random_meme`, must be a value less than or equal to `10`")  # noqa: E501
        if 'min_rating' in local_var_params and local_var_params['min_rating'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `min_rating` when calling `random_meme`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keywords' in local_var_params:
            query_params.append(('keywords', local_var_params['keywords']))  # noqa: E501
        if 'keywords_in_image' in local_var_params:
            query_params.append(('keywords-in-image', local_var_params['keywords_in_image']))  # noqa: E501
        if 'media_type' in local_var_params:
            query_params.append(('media-type', local_var_params['media_type']))  # noqa: E501
        if 'number' in local_var_params:
            query_params.append(('number', local_var_params['number']))  # noqa: E501
        if 'min_rating' in local_var_params:
            query_params.append(('min-rating', local_var_params['min_rating']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/memes/random', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_memes(self, **kwargs):  # noqa: E501
        """Search Memes  # noqa: E501

        Search for memes. See https://humorapi.com/docs/#Search-Memes for more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_memes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str keywords: A comma separated list of keywords.
        :param bool keywords_in_image: Whether the keywords should be found in the meme's image.
        :param str media_type: The type of the content. Can be either 'image' or 'video' or specific formats such as 'jpg', 'png', 'gif', or 'mp4'.
        :param int number: The number of results to retrieve between 1 and 10.
        :param int min_rating: The minimum rating between 0 and 10 the result should have.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_memes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_memes_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_memes_with_http_info(self, **kwargs):  # noqa: E501
        """Search Memes  # noqa: E501

        Search for memes. See https://humorapi.com/docs/#Search-Memes for more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_memes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str keywords: A comma separated list of keywords.
        :param bool keywords_in_image: Whether the keywords should be found in the meme's image.
        :param str media_type: The type of the content. Can be either 'image' or 'video' or specific formats such as 'jpg', 'png', 'gif', or 'mp4'.
        :param int number: The number of results to retrieve between 1 and 10.
        :param int min_rating: The minimum rating between 0 and 10 the result should have.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['keywords', 'keywords_in_image', 'media_type', 'number', 'min_rating']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_memes" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if 'number' in local_var_params and local_var_params['number'] > 10:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `number` when calling `search_memes`, must be a value less than or equal to `10`")  # noqa: E501
        if 'number' in local_var_params and local_var_params['number'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `number` when calling `search_memes`, must be a value greater than or equal to `1`")  # noqa: E501
        if ('min_rating' in local_var_params and
                len(local_var_params['min_rating']) < 0):
            raise ApiValueError("Invalid value for parameter `min_rating` when calling `search_memes`, length must be greater than or equal to `0`")  # noqa: E501
        if 'min_rating' in local_var_params and local_var_params['min_rating'] > 10:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `min_rating` when calling `search_memes`, must be a value less than or equal to `10`")  # noqa: E501
        if 'min_rating' in local_var_params and local_var_params['min_rating'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `min_rating` when calling `search_memes`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keywords' in local_var_params:
            query_params.append(('keywords', local_var_params['keywords']))  # noqa: E501
        if 'keywords_in_image' in local_var_params:
            query_params.append(('keywords-in-image', local_var_params['keywords_in_image']))  # noqa: E501
        if 'media_type' in local_var_params:
            query_params.append(('media-type', local_var_params['media_type']))  # noqa: E501
        if 'number' in local_var_params:
            query_params.append(('number', local_var_params['number']))  # noqa: E501
        if 'min_rating' in local_var_params:
            query_params.append(('min-rating', local_var_params['min_rating']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/memes/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upvote_meme(self, id, **kwargs):  # noqa: E501
        """Upvote a Meme  # noqa: E501

        Upvote a meme. See https://humorapi.com/docs/#Upvote-Meme for more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upvote_meme(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The object's id. (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upvote_meme_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.upvote_meme_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def upvote_meme_with_http_info(self, id, **kwargs):  # noqa: E501
        """Upvote a Meme  # noqa: E501

        Upvote a meme. See https://humorapi.com/docs/#Upvote-Meme for more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upvote_meme_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The object's id. (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upvote_meme" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ApiValueError("Missing the required parameter `id` when calling `upvote_meme`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/memes/{id}/upvote', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
