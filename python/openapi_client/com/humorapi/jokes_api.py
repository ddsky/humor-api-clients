"""
    Humor API

    Awesome Humor API.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: mail@humorapi.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.inline_response200 import InlineResponse200
from openapi_client.model.inline_response2004 import InlineResponse2004
from openapi_client.model.inline_response2008 import InlineResponse2008
from openapi_client.model.inline_response2009 import InlineResponse2009


class JokesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.analyze_joke_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse2009,),
                'auth': [
                    'apiKey'
                ],
                'endpoint_path': '/jokes/analyze',
                'operation_id': 'analyze_joke',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (str,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'text/plain'
                ]
            },
            api_client=api_client
        )
        self.downvote_joke_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse2008,),
                'auth': [
                    'apiKey'
                ],
                'endpoint_path': '/jokes/{id}/downvote',
                'operation_id': 'downvote_joke',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'id',
                ]
            },
            root_map={
                'validations': {
                    ('id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.random_joke_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse2004,),
                'auth': [
                    'apiKey'
                ],
                'endpoint_path': '/jokes/random',
                'operation_id': 'random_joke',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'keywords',
                    'include_tags',
                    'exclude_tags',
                    'min_rating',
                    'max_length',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'include_tags',
                    'exclude_tags',
                ],
                'validation': [
                    'min_rating',
                    'max_length',
                ]
            },
            root_map={
                'validations': {
                    ('min_rating',): {

                        'inclusive_maximum': 10,
                        'inclusive_minimum': 0,
                    },
                    ('max_length',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 10,
                    },
                },
                'allowed_values': {
                    ('include_tags',): {

                        "CLEAN": "clean",
                        "YO_MAMA": "yo_mama",
                        "CHUCK_NORRIS": "chuck_norris",
                        "NSFW": "nsfw",
                        "RACIST": "racist",
                        "SEXIST": "sexist",
                        "SEXUAL": "sexual",
                        "POLITICAL": "political",
                        "RELIGIOUS": "religious",
                        "KNOCK_KNOCK": "knock_knock",
                        "CHRISTMAS": "christmas",
                        "NERDY": "nerdy",
                        "ANALOGY": "analogy",
                        "ONE_LINER": "one_liner",
                        "DARK": "dark",
                        "JEWISH": "jewish",
                        "SCHOOL": "school",
                        "SPORT": "sport",
                        "LAW": "law",
                        "KIDS": "kids",
                        "ANIMAL": "animal",
                        "RELATIONSHIP": "relationship",
                        "INSULTS": "insults",
                        "BLONDES": "blondes",
                        "DEEP_THOUGHTS": "deep_thoughts",
                        "FOOD": "food",
                        "HOLIDAY": "holiday"
                    },
                    ('exclude_tags',): {

                        "CLEAN": "clean",
                        "YO_MAMA": "yo_mama",
                        "CHUCK_NORRIS": "chuck_norris",
                        "NSFW": "nsfw",
                        "RACIST": "racist",
                        "SEXIST": "sexist",
                        "SEXUAL": "sexual",
                        "POLITICAL": "political",
                        "RELIGIOUS": "religious",
                        "KNOCK_KNOCK": "knock_knock",
                        "CHRISTMAS": "christmas",
                        "NERDY": "nerdy",
                        "ANALOGY": "analogy",
                        "ONE_LINER": "one_liner",
                        "DARK": "dark",
                        "JEWISH": "jewish",
                        "SCHOOL": "school",
                        "SPORT": "sport",
                        "LAW": "law",
                        "KIDS": "kids",
                        "ANIMAL": "animal",
                        "RELATIONSHIP": "relationship",
                        "INSULTS": "insults",
                        "BLONDES": "blondes",
                        "DEEP_THOUGHTS": "deep_thoughts",
                        "FOOD": "food",
                        "HOLIDAY": "holiday"
                    },
                },
                'openapi_types': {
                    'keywords':
                        (str,),
                    'include_tags':
                        (str,),
                    'exclude_tags':
                        (str,),
                    'min_rating':
                        (int,),
                    'max_length':
                        (int,),
                },
                'attribute_map': {
                    'keywords': 'keywords',
                    'include_tags': 'include-tags',
                    'exclude_tags': 'exclude-tags',
                    'min_rating': 'min-rating',
                    'max_length': 'max-length',
                },
                'location_map': {
                    'keywords': 'query',
                    'include_tags': 'query',
                    'exclude_tags': 'query',
                    'min_rating': 'query',
                    'max_length': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.search_jokes_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse200,),
                'auth': [
                    'apiKey'
                ],
                'endpoint_path': '/jokes/search',
                'operation_id': 'search_jokes',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'keywords',
                    'include_tags',
                    'exclude_tags',
                    'number',
                    'min_rating',
                    'max_length',
                    'offset',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'include_tags',
                    'exclude_tags',
                ],
                'validation': [
                    'number',
                    'min_rating',
                    'max_length',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('number',): {

                        'inclusive_maximum': 10,
                        'inclusive_minimum': 1,
                    },
                    ('min_rating',): {

                        'inclusive_maximum': 10,
                        'inclusive_minimum': 0,
                    },
                    ('max_length',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 10,
                    },
                    ('offset',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                    ('include_tags',): {

                        "CLEAN": "clean",
                        "YO_MAMA": "yo_mama",
                        "CHUCK_NORRIS": "chuck_norris",
                        "NSFW": "nsfw",
                        "RACIST": "racist",
                        "SEXIST": "sexist",
                        "SEXUAL": "sexual",
                        "POLITICAL": "political",
                        "RELIGIOUS": "religious",
                        "KNOCK_KNOCK": "knock_knock",
                        "CHRISTMAS": "christmas",
                        "NERDY": "nerdy",
                        "ANALOGY": "analogy",
                        "ONE_LINER": "one_liner",
                        "DARK": "dark",
                        "JEWISH": "jewish",
                        "SCHOOL": "school",
                        "SPORT": "sport",
                        "LAW": "law",
                        "KIDS": "kids",
                        "ANIMAL": "animal",
                        "RELATIONSHIP": "relationship",
                        "INSULTS": "insults",
                        "BLONDES": "blondes",
                        "DEEP_THOUGHTS": "deep_thoughts",
                        "FOOD": "food",
                        "HOLIDAY": "holiday"
                    },
                    ('exclude_tags',): {

                        "CLEAN": "clean",
                        "YO_MAMA": "yo_mama",
                        "CHUCK_NORRIS": "chuck_norris",
                        "NSFW": "nsfw",
                        "RACIST": "racist",
                        "SEXIST": "sexist",
                        "SEXUAL": "sexual",
                        "POLITICAL": "political",
                        "RELIGIOUS": "religious",
                        "KNOCK_KNOCK": "knock_knock",
                        "CHRISTMAS": "christmas",
                        "NERDY": "nerdy",
                        "ANALOGY": "analogy",
                        "ONE_LINER": "one_liner",
                        "DARK": "dark",
                        "JEWISH": "jewish",
                        "SCHOOL": "school",
                        "SPORT": "sport",
                        "LAW": "law",
                        "KIDS": "kids",
                        "ANIMAL": "animal",
                        "RELATIONSHIP": "relationship",
                        "INSULTS": "insults",
                        "BLONDES": "blondes",
                        "DEEP_THOUGHTS": "deep_thoughts",
                        "FOOD": "food",
                        "HOLIDAY": "holiday"
                    },
                },
                'openapi_types': {
                    'keywords':
                        (str,),
                    'include_tags':
                        (str,),
                    'exclude_tags':
                        (str,),
                    'number':
                        (int,),
                    'min_rating':
                        (int,),
                    'max_length':
                        (int,),
                    'offset':
                        (float,),
                },
                'attribute_map': {
                    'keywords': 'keywords',
                    'include_tags': 'include-tags',
                    'exclude_tags': 'exclude-tags',
                    'number': 'number',
                    'min_rating': 'min-rating',
                    'max_length': 'max-length',
                    'offset': 'offset',
                },
                'location_map': {
                    'keywords': 'query',
                    'include_tags': 'query',
                    'exclude_tags': 'query',
                    'number': 'query',
                    'min_rating': 'query',
                    'max_length': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.submit_joke_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse2008,),
                'auth': [
                    'apiKey'
                ],
                'endpoint_path': '/jokes',
                'operation_id': 'submit_joke',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (str,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'text/plain'
                ]
            },
            api_client=api_client
        )
        self.upvote_joke_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse2008,),
                'auth': [
                    'apiKey'
                ],
                'endpoint_path': '/jokes/{id}/upvote',
                'operation_id': 'upvote_joke',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'id',
                ]
            },
            root_map={
                'validations': {
                    ('id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def analyze_joke(
        self,
        **kwargs
    ):
        """Analyze Joke  # noqa: E501

        Analyze a joke. See https://humorapi.com/docs/#Analyze-Joke for more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.analyze_joke(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            body (str): Post the joke as plain text.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse2009
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.analyze_joke_endpoint.call_with_http_info(**kwargs)

    def downvote_joke(
        self,
        id,
        **kwargs
    ):
        """Downvote a Joke  # noqa: E501

        Downvote a joke. See https://humorapi.com/docs/#Downvote-Joke for more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.downvote_joke(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): The object's id.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse2008
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.downvote_joke_endpoint.call_with_http_info(**kwargs)

    def random_joke(
        self,
        **kwargs
    ):
        """Random Joke  # noqa: E501

        Get a random joke. See https://humorapi.com/docs/#Random-Joke for more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.random_joke(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            keywords (str): A comma separated list of keywords.. [optional]
            include_tags (str): A comma separated list of tags that the joke must have.. [optional]
            exclude_tags (str): A comma separated list of tags that the joke must not have.. [optional]
            min_rating (int): The minimum rating between 0 and 10 the result should have.. [optional]
            max_length (int): The maximum number of letters in the joke.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse2004
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.random_joke_endpoint.call_with_http_info(**kwargs)

    def search_jokes(
        self,
        **kwargs
    ):
        """Search Jokes  # noqa: E501

        Search for jokes. See https://humorapi.com/docs/#Search-Jokes for more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_jokes(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            keywords (str): A comma separated list of keywords.. [optional]
            include_tags (str): A comma separated list of tags that the joke must have.. [optional]
            exclude_tags (str): A comma separated list of tags that the joke must not have.. [optional]
            number (int): The number of results to retrieve between 1 and 10.. [optional]
            min_rating (int): The minimum rating between 0 and 10 the result should have.. [optional]
            max_length (int): The maximum number of letters in the joke.. [optional]
            offset (float): The number of results to skip.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse200
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.search_jokes_endpoint.call_with_http_info(**kwargs)

    def submit_joke(
        self,
        **kwargs
    ):
        """Submit Joke  # noqa: E501

        Submit a joke. See https://humorapi.com/docs/#Submit-Joke for more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.submit_joke(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            body (str): Post the joke as plain text.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse2008
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.submit_joke_endpoint.call_with_http_info(**kwargs)

    def upvote_joke(
        self,
        id,
        **kwargs
    ):
        """Upvote a Joke  # noqa: E501

        Upvote a joke. See https://humorapi.com/docs/#Upvote-Joke for more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upvote_joke(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): The object's id.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse2008
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.upvote_joke_endpoint.call_with_http_info(**kwargs)

