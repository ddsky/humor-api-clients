"""
    Humor API

    Awesome Humor API.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: mail@humorapi.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.inline_response2002 import InlineResponse2002
from openapi_client.model.inline_response2003 import InlineResponse2003
from openapi_client.model.inline_response2008 import InlineResponse2008


class MemesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.downvote_meme_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse2008,),
                'auth': [
                    'apiKey'
                ],
                'endpoint_path': '/memes/{id}/downvote',
                'operation_id': 'downvote_meme',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'id',
                ]
            },
            root_map={
                'validations': {
                    ('id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.random_meme_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse2003,),
                'auth': [
                    'apiKey'
                ],
                'endpoint_path': '/memes/random',
                'operation_id': 'random_meme',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'keywords',
                    'keywords_in_image',
                    'media_type',
                    'number',
                    'min_rating',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'keywords_in_image',
                    'media_type',
                ],
                'validation': [
                    'number',
                    'min_rating',
                ]
            },
            root_map={
                'validations': {
                    ('number',): {

                        'inclusive_maximum': 10,
                        'inclusive_minimum': 1,
                    },
                    ('min_rating',): {

                        'inclusive_maximum': 10,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                    ('keywords_in_image',): {

                        "TRUE": True,
                        "FALSE": False
                    },
                    ('media_type',): {

                        "IMAGE": "image",
                        "VIDEO": "video",
                        "JPG": "jpg",
                        "GIF": "gif",
                        "PNG": "png",
                        "MP4": "mp4"
                    },
                },
                'openapi_types': {
                    'keywords':
                        (str,),
                    'keywords_in_image':
                        (bool,),
                    'media_type':
                        (str,),
                    'number':
                        (int,),
                    'min_rating':
                        (int,),
                },
                'attribute_map': {
                    'keywords': 'keywords',
                    'keywords_in_image': 'keywords-in-image',
                    'media_type': 'media-type',
                    'number': 'number',
                    'min_rating': 'min-rating',
                },
                'location_map': {
                    'keywords': 'query',
                    'keywords_in_image': 'query',
                    'media_type': 'query',
                    'number': 'query',
                    'min_rating': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.search_memes_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse2002,),
                'auth': [
                    'apiKey'
                ],
                'endpoint_path': '/memes/search',
                'operation_id': 'search_memes',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'keywords',
                    'keywords_in_image',
                    'media_type',
                    'number',
                    'min_rating',
                    'offset',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'keywords_in_image',
                    'media_type',
                ],
                'validation': [
                    'number',
                    'min_rating',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('number',): {

                        'inclusive_maximum': 10,
                        'inclusive_minimum': 1,
                    },
                    ('min_rating',): {

                        'inclusive_maximum': 10,
                        'inclusive_minimum': 0,
                    },
                    ('offset',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                    ('keywords_in_image',): {

                        "TRUE": True,
                        "FALSE": False
                    },
                    ('media_type',): {

                        "IMAGE": "image",
                        "VIDEO": "video",
                        "JPG": "jpg",
                        "GIF": "gif",
                        "PNG": "png",
                        "MP4": "mp4"
                    },
                },
                'openapi_types': {
                    'keywords':
                        (str,),
                    'keywords_in_image':
                        (bool,),
                    'media_type':
                        (str,),
                    'number':
                        (int,),
                    'min_rating':
                        (int,),
                    'offset':
                        (float,),
                },
                'attribute_map': {
                    'keywords': 'keywords',
                    'keywords_in_image': 'keywords-in-image',
                    'media_type': 'media-type',
                    'number': 'number',
                    'min_rating': 'min-rating',
                    'offset': 'offset',
                },
                'location_map': {
                    'keywords': 'query',
                    'keywords_in_image': 'query',
                    'media_type': 'query',
                    'number': 'query',
                    'min_rating': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.upvote_meme_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse2008,),
                'auth': [
                    'apiKey'
                ],
                'endpoint_path': '/memes/{id}/upvote',
                'operation_id': 'upvote_meme',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'id',
                ]
            },
            root_map={
                'validations': {
                    ('id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def downvote_meme(
        self,
        id,
        **kwargs
    ):
        """Downvote a Meme  # noqa: E501

        Downvote a meme. See https://humorapi.com/docs/#Downvote-Meme for more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.downvote_meme(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): The object's id.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse2008
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.downvote_meme_endpoint.call_with_http_info(**kwargs)

    def random_meme(
        self,
        **kwargs
    ):
        """Random Meme  # noqa: E501

        Get a random meme. See https://humorapi.com/docs/#Random-Meme for more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.random_meme(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            keywords (str): A comma separated list of keywords.. [optional]
            keywords_in_image (bool): Whether the keywords should be found in the meme's image.. [optional]
            media_type (str): The type of the content. Can be either 'image' or 'video' or specific formats such as 'jpg', 'png', 'gif', or 'mp4'.. [optional]
            number (int): The number of results to retrieve between 1 and 10.. [optional]
            min_rating (int): The minimum rating between 0 and 10 the result should have.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse2003
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.random_meme_endpoint.call_with_http_info(**kwargs)

    def search_memes(
        self,
        **kwargs
    ):
        """Search Memes  # noqa: E501

        Search for memes. See https://humorapi.com/docs/#Search-Memes for more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_memes(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            keywords (str): A comma separated list of keywords.. [optional]
            keywords_in_image (bool): Whether the keywords should be found in the meme's image.. [optional]
            media_type (str): The type of the content. Can be either 'image' or 'video' or specific formats such as 'jpg', 'png', 'gif', or 'mp4'.. [optional]
            number (int): The number of results to retrieve between 1 and 10.. [optional]
            min_rating (int): The minimum rating between 0 and 10 the result should have.. [optional]
            offset (float): The number of results to skip.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse2002
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.search_memes_endpoint.call_with_http_info(**kwargs)

    def upvote_meme(
        self,
        id,
        **kwargs
    ):
        """Upvote a Meme  # noqa: E501

        Upvote a meme. See https://humorapi.com/docs/#Upvote-Meme for more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upvote_meme(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): The object's id.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse2008
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.upvote_meme_endpoint.call_with_http_info(**kwargs)

