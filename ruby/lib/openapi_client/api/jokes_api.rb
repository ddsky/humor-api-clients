=begin
#Humor API

#Awesome Humor API.

The version of the OpenAPI document: 1.0
Contact: mail@humorapi.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'uri'

module OpenapiClient
  class JokesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Analyze Joke
    # Analyze a joke. See https://humorapi.com/docs/#Analyze-Joke for more.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body Post the joke as plain text.
    # @return [InlineResponse2009]
    def analyze_joke(opts = {})
      data, _status_code, _headers = analyze_joke_with_http_info(opts)
      data
    end

    # Analyze Joke
    # Analyze a joke. See https://humorapi.com/docs/#Analyze-Joke for more.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body Post the joke as plain text.
    # @return [Array<(InlineResponse2009, Integer, Hash)>] InlineResponse2009 data, response status code and response headers
    def analyze_joke_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JokesApi.analyze_joke ...'
      end
      # resource path
      local_var_path = '/jokes/analyze'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse2009' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKey']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JokesApi#analyze_joke\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Downvote a Joke
    # Downvote a joke. See https://humorapi.com/docs/#Downvote-Joke for more.
    # @param id [Integer] The object&#39;s id.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2008]
    def downvote_joke(id, opts = {})
      data, _status_code, _headers = downvote_joke_with_http_info(id, opts)
      data
    end

    # Downvote a Joke
    # Downvote a joke. See https://humorapi.com/docs/#Downvote-Joke for more.
    # @param id [Integer] The object&#39;s id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2008, Integer, Hash)>] InlineResponse2008 data, response status code and response headers
    def downvote_joke_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JokesApi.downvote_joke ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling JokesApi.downvote_joke"
      end
      if @api_client.config.client_side_validation && id < 1
        fail ArgumentError, 'invalid value for "id" when calling JokesApi.downvote_joke, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/jokes/{id}/downvote'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse2008' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKey']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JokesApi#downvote_joke\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Random Joke
    # Get a random joke. See https://humorapi.com/docs/#Random-Joke for more.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :keywords A comma separated list of keywords.
    # @option opts [String] :include_tags A comma separated list of tags that the joke must have.
    # @option opts [String] :exclude_tags A comma separated list of tags that the joke must not have.
    # @option opts [Integer] :min_rating The minimum rating between 0 and 10 the result should have.
    # @option opts [Integer] :max_length The maximum number of letters in the joke.
    # @return [InlineResponse2004]
    def random_joke(opts = {})
      data, _status_code, _headers = random_joke_with_http_info(opts)
      data
    end

    # Random Joke
    # Get a random joke. See https://humorapi.com/docs/#Random-Joke for more.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :keywords A comma separated list of keywords.
    # @option opts [String] :include_tags A comma separated list of tags that the joke must have.
    # @option opts [String] :exclude_tags A comma separated list of tags that the joke must not have.
    # @option opts [Integer] :min_rating The minimum rating between 0 and 10 the result should have.
    # @option opts [Integer] :max_length The maximum number of letters in the joke.
    # @return [Array<(InlineResponse2004, Integer, Hash)>] InlineResponse2004 data, response status code and response headers
    def random_joke_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JokesApi.random_joke ...'
      end
      allowable_values = ["clean", "yo_mama", "chuck_norris", "nsfw", "racist", "sexist", "sexual", "political", "religious", "knock_knock", "christmas", "nerdy", "analogy", "one_liner", "dark", "jewish", "school", "sport", "law", "kids", "animal", "relationship", "insults", "blondes", "deep_thoughts", "food", "holiday"]
      if @api_client.config.client_side_validation && opts[:'include_tags'] && !allowable_values.include?(opts[:'include_tags'])
        fail ArgumentError, "invalid value for \"include_tags\", must be one of #{allowable_values}"
      end
      allowable_values = ["clean", "yo_mama", "chuck_norris", "nsfw", "racist", "sexist", "sexual", "political", "religious", "knock_knock", "christmas", "nerdy", "analogy", "one_liner", "dark", "jewish", "school", "sport", "law", "kids", "animal", "relationship", "insults", "blondes", "deep_thoughts", "food", "holiday"]
      if @api_client.config.client_side_validation && opts[:'exclude_tags'] && !allowable_values.include?(opts[:'exclude_tags'])
        fail ArgumentError, "invalid value for \"exclude_tags\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'min_rating'].nil? && opts[:'min_rating'].to_s.length < 0
        fail ArgumentError, 'invalid value for "opts[:"min_rating"]" when calling JokesApi.random_joke, the character length must be great than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'min_rating'].nil? && opts[:'min_rating'] > 10
        fail ArgumentError, 'invalid value for "opts[:"min_rating"]" when calling JokesApi.random_joke, must be smaller than or equal to 10.'
      end

      if @api_client.config.client_side_validation && !opts[:'min_rating'].nil? && opts[:'min_rating'] < 0
        fail ArgumentError, 'invalid value for "opts[:"min_rating"]" when calling JokesApi.random_joke, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'max_length'].nil? && opts[:'max_length'] > 9999
        fail ArgumentError, 'invalid value for "opts[:"max_length"]" when calling JokesApi.random_joke, must be smaller than or equal to 9999.'
      end

      if @api_client.config.client_side_validation && !opts[:'max_length'].nil? && opts[:'max_length'] < 10
        fail ArgumentError, 'invalid value for "opts[:"max_length"]" when calling JokesApi.random_joke, must be greater than or equal to 10.'
      end

      # resource path
      local_var_path = '/jokes/random'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'keywords'] = opts[:'keywords'] if !opts[:'keywords'].nil?
      query_params[:'include-tags'] = opts[:'include_tags'] if !opts[:'include_tags'].nil?
      query_params[:'exclude-tags'] = opts[:'exclude_tags'] if !opts[:'exclude_tags'].nil?
      query_params[:'min-rating'] = opts[:'min_rating'] if !opts[:'min_rating'].nil?
      query_params[:'max-length'] = opts[:'max_length'] if !opts[:'max_length'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse2004' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKey']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JokesApi#random_joke\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Jokes
    # Search for jokes. See https://humorapi.com/docs/#Search-Jokes for more.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :keywords A comma separated list of keywords.
    # @option opts [String] :include_tags A comma separated list of tags that the joke must have.
    # @option opts [String] :exclude_tags A comma separated list of tags that the joke must not have.
    # @option opts [Integer] :number The number of results to retrieve between 1 and 10.
    # @option opts [Integer] :min_rating The minimum rating between 0 and 10 the result should have.
    # @option opts [Integer] :max_length The maximum number of letters in the joke.
    # @option opts [Float] :offset The number of results to skip.
    # @return [InlineResponse200]
    def search_jokes(opts = {})
      data, _status_code, _headers = search_jokes_with_http_info(opts)
      data
    end

    # Search Jokes
    # Search for jokes. See https://humorapi.com/docs/#Search-Jokes for more.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :keywords A comma separated list of keywords.
    # @option opts [String] :include_tags A comma separated list of tags that the joke must have.
    # @option opts [String] :exclude_tags A comma separated list of tags that the joke must not have.
    # @option opts [Integer] :number The number of results to retrieve between 1 and 10.
    # @option opts [Integer] :min_rating The minimum rating between 0 and 10 the result should have.
    # @option opts [Integer] :max_length The maximum number of letters in the joke.
    # @option opts [Float] :offset The number of results to skip.
    # @return [Array<(InlineResponse200, Integer, Hash)>] InlineResponse200 data, response status code and response headers
    def search_jokes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JokesApi.search_jokes ...'
      end
      allowable_values = ["clean", "yo_mama", "chuck_norris", "nsfw", "racist", "sexist", "sexual", "political", "religious", "knock_knock", "christmas", "nerdy", "analogy", "one_liner", "dark", "jewish", "school", "sport", "law", "kids", "animal", "relationship", "insults", "blondes", "deep_thoughts", "food", "holiday"]
      if @api_client.config.client_side_validation && opts[:'include_tags'] && !allowable_values.include?(opts[:'include_tags'])
        fail ArgumentError, "invalid value for \"include_tags\", must be one of #{allowable_values}"
      end
      allowable_values = ["clean", "yo_mama", "chuck_norris", "nsfw", "racist", "sexist", "sexual", "political", "religious", "knock_knock", "christmas", "nerdy", "analogy", "one_liner", "dark", "jewish", "school", "sport", "law", "kids", "animal", "relationship", "insults", "blondes", "deep_thoughts", "food", "holiday"]
      if @api_client.config.client_side_validation && opts[:'exclude_tags'] && !allowable_values.include?(opts[:'exclude_tags'])
        fail ArgumentError, "invalid value for \"exclude_tags\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] > 10
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling JokesApi.search_jokes, must be smaller than or equal to 10.'
      end

      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] < 1
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling JokesApi.search_jokes, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'min_rating'].nil? && opts[:'min_rating'].to_s.length < 0
        fail ArgumentError, 'invalid value for "opts[:"min_rating"]" when calling JokesApi.search_jokes, the character length must be great than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'min_rating'].nil? && opts[:'min_rating'] > 10
        fail ArgumentError, 'invalid value for "opts[:"min_rating"]" when calling JokesApi.search_jokes, must be smaller than or equal to 10.'
      end

      if @api_client.config.client_side_validation && !opts[:'min_rating'].nil? && opts[:'min_rating'] < 0
        fail ArgumentError, 'invalid value for "opts[:"min_rating"]" when calling JokesApi.search_jokes, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'max_length'].nil? && opts[:'max_length'] > 9999
        fail ArgumentError, 'invalid value for "opts[:"max_length"]" when calling JokesApi.search_jokes, must be smaller than or equal to 9999.'
      end

      if @api_client.config.client_side_validation && !opts[:'max_length'].nil? && opts[:'max_length'] < 10
        fail ArgumentError, 'invalid value for "opts[:"max_length"]" when calling JokesApi.search_jokes, must be greater than or equal to 10.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling JokesApi.search_jokes, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling JokesApi.search_jokes, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/jokes/search'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'keywords'] = opts[:'keywords'] if !opts[:'keywords'].nil?
      query_params[:'include-tags'] = opts[:'include_tags'] if !opts[:'include_tags'].nil?
      query_params[:'exclude-tags'] = opts[:'exclude_tags'] if !opts[:'exclude_tags'].nil?
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?
      query_params[:'min-rating'] = opts[:'min_rating'] if !opts[:'min_rating'].nil?
      query_params[:'max-length'] = opts[:'max_length'] if !opts[:'max_length'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse200' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKey']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JokesApi#search_jokes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Submit Joke
    # Submit a joke. See https://humorapi.com/docs/#Submit-Joke for more.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body Post the joke as plain text.
    # @return [InlineResponse2008]
    def submit_joke(opts = {})
      data, _status_code, _headers = submit_joke_with_http_info(opts)
      data
    end

    # Submit Joke
    # Submit a joke. See https://humorapi.com/docs/#Submit-Joke for more.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body Post the joke as plain text.
    # @return [Array<(InlineResponse2008, Integer, Hash)>] InlineResponse2008 data, response status code and response headers
    def submit_joke_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JokesApi.submit_joke ...'
      end
      # resource path
      local_var_path = '/jokes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse2008' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKey']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JokesApi#submit_joke\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upvote a Joke
    # Upvote a joke. See https://humorapi.com/docs/#Upvote-Joke for more.
    # @param id [Integer] The object&#39;s id.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2008]
    def upvote_joke(id, opts = {})
      data, _status_code, _headers = upvote_joke_with_http_info(id, opts)
      data
    end

    # Upvote a Joke
    # Upvote a joke. See https://humorapi.com/docs/#Upvote-Joke for more.
    # @param id [Integer] The object&#39;s id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2008, Integer, Hash)>] InlineResponse2008 data, response status code and response headers
    def upvote_joke_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JokesApi.upvote_joke ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling JokesApi.upvote_joke"
      end
      if @api_client.config.client_side_validation && id < 1
        fail ArgumentError, 'invalid value for "id" when calling JokesApi.upvote_joke, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/jokes/{id}/upvote'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse2008' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKey']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JokesApi#upvote_joke\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
