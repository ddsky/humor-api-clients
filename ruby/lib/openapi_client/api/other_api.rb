=begin
#Humor API

#Awesome Humor API.

The version of the OpenAPI document: 1.0
Contact: mail@humorapi.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module OpenapiClient
  class OtherApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Generate Nonsense Word
    # Generate a nonsense word. See https://humorapi.com/docs/#Generate-Nonsense-Word for more.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2007]
    def generate_nonsense_word(opts = {})
      data, _status_code, _headers = generate_nonsense_word_with_http_info(opts)
      data
    end

    # Generate Nonsense Word
    # Generate a nonsense word. See https://humorapi.com/docs/#Generate-Nonsense-Word for more.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2007, Integer, Hash)>] InlineResponse2007 data, response status code and response headers
    def generate_nonsense_word_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OtherApi.generate_nonsense_word ...'
      end
      # resource path
      local_var_path = '/words/nonsense/random'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse2007'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"OtherApi.generate_nonsense_word",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OtherApi#generate_nonsense_word\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Insult
    # Insult somebody for doing something. See https://humorapi.com/docs/#Insult for more.
    # @param name [String] The person&#39;s name.
    # @param reason [String] The reason for the praise/insult.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2005]
    def insult(name, reason, opts = {})
      data, _status_code, _headers = insult_with_http_info(name, reason, opts)
      data
    end

    # Insult
    # Insult somebody for doing something. See https://humorapi.com/docs/#Insult for more.
    # @param name [String] The person&#39;s name.
    # @param reason [String] The reason for the praise/insult.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2005, Integer, Hash)>] InlineResponse2005 data, response status code and response headers
    def insult_with_http_info(name, reason, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OtherApi.insult ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling OtherApi.insult"
      end
      # verify the required parameter 'reason' is set
      if @api_client.config.client_side_validation && reason.nil?
        fail ArgumentError, "Missing the required parameter 'reason' when calling OtherApi.insult"
      end
      # resource path
      local_var_path = '/insult'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name
      query_params[:'reason'] = reason

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse2005'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"OtherApi.insult",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OtherApi#insult\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Praise
    # Praise somebody for doing something. See https://humorapi.com/docs/#Praise for more.
    # @param name [String] The person&#39;s name.
    # @param reason [String] The reason for the praise/insult.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2005]
    def praise(name, reason, opts = {})
      data, _status_code, _headers = praise_with_http_info(name, reason, opts)
      data
    end

    # Praise
    # Praise somebody for doing something. See https://humorapi.com/docs/#Praise for more.
    # @param name [String] The person&#39;s name.
    # @param reason [String] The reason for the praise/insult.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2005, Integer, Hash)>] InlineResponse2005 data, response status code and response headers
    def praise_with_http_info(name, reason, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OtherApi.praise ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling OtherApi.praise"
      end
      # verify the required parameter 'reason' is set
      if @api_client.config.client_side_validation && reason.nil?
        fail ArgumentError, "Missing the required parameter 'reason' when calling OtherApi.praise"
      end
      # resource path
      local_var_path = '/praise'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name
      query_params[:'reason'] = reason

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse2005'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"OtherApi.praise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OtherApi#praise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rate Word
    # Rate the funniness of a word. See https://humorapi.com/docs/#Rate-Word for more.
    # @param word [String] The word to be rated.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2006]
    def rate_word(word, opts = {})
      data, _status_code, _headers = rate_word_with_http_info(word, opts)
      data
    end

    # Rate Word
    # Rate the funniness of a word. See https://humorapi.com/docs/#Rate-Word for more.
    # @param word [String] The word to be rated.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2006, Integer, Hash)>] InlineResponse2006 data, response status code and response headers
    def rate_word_with_http_info(word, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OtherApi.rate_word ...'
      end
      # verify the required parameter 'word' is set
      if @api_client.config.client_side_validation && word.nil?
        fail ArgumentError, "Missing the required parameter 'word' when calling OtherApi.rate_word"
      end
      # resource path
      local_var_path = '/words/rate'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'word'] = word

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse2006'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"OtherApi.rate_word",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OtherApi#rate_word\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Gifs
    # Search for gifs. See https://humorapi.com/docs/#Search-Gifs for more.
    # @param query [String] A search query.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :number The number of results to retrieve between 1 and 10.
    # @return [InlineResponse2001]
    def search_gifs(query, opts = {})
      data, _status_code, _headers = search_gifs_with_http_info(query, opts)
      data
    end

    # Search Gifs
    # Search for gifs. See https://humorapi.com/docs/#Search-Gifs for more.
    # @param query [String] A search query.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :number The number of results to retrieve between 1 and 10.
    # @return [Array<(InlineResponse2001, Integer, Hash)>] InlineResponse2001 data, response status code and response headers
    def search_gifs_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OtherApi.search_gifs ...'
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling OtherApi.search_gifs"
      end
      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] > 10
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling OtherApi.search_gifs, must be smaller than or equal to 10.'
      end

      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] < 1
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling OtherApi.search_gifs, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/gif/search'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = query
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse2001'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"OtherApi.search_gifs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OtherApi#search_gifs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
