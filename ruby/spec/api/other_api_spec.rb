=begin
#Humor API

#Awesome Humor API.

The version of the OpenAPI document: 1.0
Contact: mail@humorapi.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::OtherApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'OtherApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::OtherApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of OtherApi' do
    it 'should create an instance of OtherApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::OtherApi)
    end
  end

  # unit tests for generate_nonsense_word
  # Generate Nonsense Word
  # Generate a nonsense word. See https://humorapi.com/docs/#Generate-Nonsense-Word for more.
  # @param [Hash] opts the optional parameters
  # @return [GenerateNonsenseWord200Response]
  describe 'generate_nonsense_word test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for insult
  # Insult
  # Insult somebody for doing something. See https://humorapi.com/docs/#Insult for more.
  # @param name The person&#39;s name.
  # @param reason The reason for the praise/insult.
  # @param [Hash] opts the optional parameters
  # @return [Praise200Response]
  describe 'insult test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for praise
  # Praise
  # Praise somebody for doing something. See https://humorapi.com/docs/#Praise for more.
  # @param name The person&#39;s name.
  # @param reason The reason for the praise/insult.
  # @param [Hash] opts the optional parameters
  # @return [Praise200Response]
  describe 'praise test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for rate_word
  # Rate Word
  # Rate the funniness of a word. See https://humorapi.com/docs/#Rate-Word for more.
  # @param word The word to be rated.
  # @param [Hash] opts the optional parameters
  # @return [RateWord200Response]
  describe 'rate_word test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for search_gifs
  # Search Gifs
  # Search for gifs. See https://humorapi.com/docs/#Search-Gifs for more.
  # @param query A search query.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :number The number of results to retrieve between 1 and 10.
  # @return [SearchGifs200Response]
  describe 'search_gifs test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
