=begin
#Humor API

#Awesome Humor API.

The version of the OpenAPI document: 1.0
Contact: mail@humorapi.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::JokesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'JokesApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::JokesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of JokesApi' do
    it 'should create an instance of JokesApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::JokesApi)
    end
  end

  # unit tests for analyze_joke
  # Analyze Joke
  # Analyze a joke. See https://humorapi.com/docs/#Analyze-Joke for more.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :body Post the joke as plain text.
  # @return [InlineResponse2009]
  describe 'analyze_joke test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for downvote_joke
  # Downvote a Joke
  # Downvote a joke. See https://humorapi.com/docs/#Downvote-Joke for more.
  # @param id The object&#39;s id.
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2008]
  describe 'downvote_joke test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for random_joke
  # Random Joke
  # Get a random joke. See https://humorapi.com/docs/#Random-Joke for more.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :keywords A comma separated list of keywords.
  # @option opts [String] :include_tags A comma separated list of tags that the joke must have.
  # @option opts [String] :exclude_tags A comma separated list of tags that the joke must not have.
  # @option opts [Integer] :min_rating The minimum rating between 0 and 10 the result should have.
  # @option opts [Integer] :max_length The maximum number of letters in the joke.
  # @return [InlineResponse2004]
  describe 'random_joke test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_jokes
  # Search Jokes
  # Search for jokes. See https://humorapi.com/docs/#Search-Jokes for more.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :keywords A comma separated list of keywords.
  # @option opts [String] :include_tags A comma separated list of tags that the joke must have.
  # @option opts [String] :exclude_tags A comma separated list of tags that the joke must not have.
  # @option opts [Integer] :number The number of results to retrieve between 1 and 10.
  # @option opts [Integer] :min_rating The minimum rating between 0 and 10 the result should have.
  # @option opts [Integer] :max_length The maximum number of letters in the joke.
  # @option opts [Float] :offset The number of results to skip.
  # @return [InlineResponse200]
  describe 'search_jokes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for submit_joke
  # Submit Joke
  # Submit a joke. See https://humorapi.com/docs/#Submit-Joke for more.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :body Post the joke as plain text.
  # @return [InlineResponse2008]
  describe 'submit_joke test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upvote_joke
  # Upvote a Joke
  # Upvote a joke. See https://humorapi.com/docs/#Upvote-Joke for more.
  # @param id The object&#39;s id.
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2008]
  describe 'upvote_joke test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
