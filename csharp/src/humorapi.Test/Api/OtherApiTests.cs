/*
 * Humor API
 *
 * Awesome Humor API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@humorapi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using humorapi.Client;
using humorapi.Api;
// uncomment below to import models
//using humorapi.Model;

namespace humorapi.Test.Api
{
    /// <summary>
    ///  Class for testing OtherApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class OtherApiTests : IDisposable
    {
        private OtherApi instance;

        public OtherApiTests()
        {
            instance = new OtherApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of OtherApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' OtherApi
            //Assert.IsType<OtherApi>(instance);
        }

        /// <summary>
        /// Test GenerateNonsenseWord
        /// </summary>
        [Fact]
        public void GenerateNonsenseWordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GenerateNonsenseWord();
            //Assert.IsType<GenerateNonsenseWord200Response>(response);
        }

        /// <summary>
        /// Test Insult
        /// </summary>
        [Fact]
        public void InsultTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string reason = null;
            //var response = instance.Insult(name, reason);
            //Assert.IsType<Praise200Response>(response);
        }

        /// <summary>
        /// Test Praise
        /// </summary>
        [Fact]
        public void PraiseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string reason = null;
            //var response = instance.Praise(name, reason);
            //Assert.IsType<Praise200Response>(response);
        }

        /// <summary>
        /// Test RateWord
        /// </summary>
        [Fact]
        public void RateWordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string word = null;
            //var response = instance.RateWord(word);
            //Assert.IsType<RateWord200Response>(response);
        }

        /// <summary>
        /// Test SearchGifs
        /// </summary>
        [Fact]
        public void SearchGifsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string query = null;
            //int? number = null;
            //var response = instance.SearchGifs(query, number);
            //Assert.IsType<SearchGifs200Response>(response);
        }
    }
}
