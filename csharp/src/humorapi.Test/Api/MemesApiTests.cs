/*
 * Humor API
 *
 * Awesome Humor API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@humorapi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using humorapi.Client;
using humorapi.Api;
// uncomment below to import models
//using humorapi.Model;

namespace humorapi.Test.Api
{
    /// <summary>
    ///  Class for testing MemesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class MemesApiTests : IDisposable
    {
        private MemesApi instance;

        public MemesApiTests()
        {
            instance = new MemesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MemesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' MemesApi
            //Assert.IsType<MemesApi>(instance);
        }

        /// <summary>
        /// Test DownvoteMeme
        /// </summary>
        [Fact]
        public void DownvoteMemeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.DownvoteMeme(id);
            //Assert.IsType<SubmitJoke200Response>(response);
        }

        /// <summary>
        /// Test RandomMeme
        /// </summary>
        [Fact]
        public void RandomMemeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? keywords = null;
            //bool? keywordsInImage = null;
            //string? mediaType = null;
            //int? number = null;
            //int? minRating = null;
            //var response = instance.RandomMeme(keywords, keywordsInImage, mediaType, number, minRating);
            //Assert.IsType<RandomMeme200Response>(response);
        }

        /// <summary>
        /// Test SearchMemes
        /// </summary>
        [Fact]
        public void SearchMemesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? keywords = null;
            //bool? keywordsInImage = null;
            //string? mediaType = null;
            //int? number = null;
            //int? minRating = null;
            //decimal? offset = null;
            //var response = instance.SearchMemes(keywords, keywordsInImage, mediaType, number, minRating, offset);
            //Assert.IsType<SearchMemes200Response>(response);
        }

        /// <summary>
        /// Test UpvoteMeme
        /// </summary>
        [Fact]
        public void UpvoteMemeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.UpvoteMeme(id);
            //Assert.IsType<SubmitJoke200Response>(response);
        }
    }
}
