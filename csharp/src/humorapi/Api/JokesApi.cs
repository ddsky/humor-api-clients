/*
 * Humor API
 *
 * Awesome Humor API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@humorapi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using humorapi.Client;
using humorapi.Model;

namespace humorapi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJokesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Analyze Joke
        /// </summary>
        /// <remarks>
        /// Analyze a joke. See https://humorapi.com/docs/#Analyze-Joke for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Post the joke as plain text. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AnalyzeJoke200Response</returns>
        AnalyzeJoke200Response AnalyzeJoke(string? body = default(string?), int operationIndex = 0);

        /// <summary>
        /// Analyze Joke
        /// </summary>
        /// <remarks>
        /// Analyze a joke. See https://humorapi.com/docs/#Analyze-Joke for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Post the joke as plain text. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AnalyzeJoke200Response</returns>
        ApiResponse<AnalyzeJoke200Response> AnalyzeJokeWithHttpInfo(string? body = default(string?), int operationIndex = 0);
        /// <summary>
        /// Downvote a Joke
        /// </summary>
        /// <remarks>
        /// Downvote a joke. See https://humorapi.com/docs/#Downvote-Joke for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubmitJoke200Response</returns>
        SubmitJoke200Response DownvoteJoke(int id, int operationIndex = 0);

        /// <summary>
        /// Downvote a Joke
        /// </summary>
        /// <remarks>
        /// Downvote a joke. See https://humorapi.com/docs/#Downvote-Joke for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubmitJoke200Response</returns>
        ApiResponse<SubmitJoke200Response> DownvoteJokeWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Random Joke
        /// </summary>
        /// <remarks>
        /// Get a random joke. See https://humorapi.com/docs/#Random-Joke for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma separated list of keywords. (optional)</param>
        /// <param name="includeTags">A comma separated list of tags that the joke must have. (optional)</param>
        /// <param name="excludeTags">A comma separated list of tags that the joke must not have. (optional)</param>
        /// <param name="minRating">The minimum rating between 0 and 10 the result should have. (optional)</param>
        /// <param name="maxLength">The maximum number of letters in the joke. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RandomJoke200Response</returns>
        RandomJoke200Response RandomJoke(string? keywords = default(string?), string? includeTags = default(string?), string? excludeTags = default(string?), int? minRating = default(int?), int? maxLength = default(int?), int operationIndex = 0);

        /// <summary>
        /// Random Joke
        /// </summary>
        /// <remarks>
        /// Get a random joke. See https://humorapi.com/docs/#Random-Joke for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma separated list of keywords. (optional)</param>
        /// <param name="includeTags">A comma separated list of tags that the joke must have. (optional)</param>
        /// <param name="excludeTags">A comma separated list of tags that the joke must not have. (optional)</param>
        /// <param name="minRating">The minimum rating between 0 and 10 the result should have. (optional)</param>
        /// <param name="maxLength">The maximum number of letters in the joke. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RandomJoke200Response</returns>
        ApiResponse<RandomJoke200Response> RandomJokeWithHttpInfo(string? keywords = default(string?), string? includeTags = default(string?), string? excludeTags = default(string?), int? minRating = default(int?), int? maxLength = default(int?), int operationIndex = 0);
        /// <summary>
        /// Search Jokes
        /// </summary>
        /// <remarks>
        /// Search for jokes. See https://humorapi.com/docs/#Search-Jokes for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma separated list of keywords. (optional)</param>
        /// <param name="includeTags">A comma separated list of tags that the joke must have. (optional)</param>
        /// <param name="excludeTags">A comma separated list of tags that the joke must not have. (optional)</param>
        /// <param name="number">The number of results to retrieve between 1 and 10. (optional)</param>
        /// <param name="minRating">The minimum rating between 0 and 10 the result should have. (optional)</param>
        /// <param name="maxLength">The maximum number of letters in the joke. (optional)</param>
        /// <param name="offset">The number of results to skip. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchJokes200Response</returns>
        SearchJokes200Response SearchJokes(string? keywords = default(string?), string? includeTags = default(string?), string? excludeTags = default(string?), int? number = default(int?), int? minRating = default(int?), int? maxLength = default(int?), decimal? offset = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// Search Jokes
        /// </summary>
        /// <remarks>
        /// Search for jokes. See https://humorapi.com/docs/#Search-Jokes for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma separated list of keywords. (optional)</param>
        /// <param name="includeTags">A comma separated list of tags that the joke must have. (optional)</param>
        /// <param name="excludeTags">A comma separated list of tags that the joke must not have. (optional)</param>
        /// <param name="number">The number of results to retrieve between 1 and 10. (optional)</param>
        /// <param name="minRating">The minimum rating between 0 and 10 the result should have. (optional)</param>
        /// <param name="maxLength">The maximum number of letters in the joke. (optional)</param>
        /// <param name="offset">The number of results to skip. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchJokes200Response</returns>
        ApiResponse<SearchJokes200Response> SearchJokesWithHttpInfo(string? keywords = default(string?), string? includeTags = default(string?), string? excludeTags = default(string?), int? number = default(int?), int? minRating = default(int?), int? maxLength = default(int?), decimal? offset = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// Submit Joke
        /// </summary>
        /// <remarks>
        /// Submit a joke. See https://humorapi.com/docs/#Submit-Joke for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Post the joke as plain text. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubmitJoke200Response</returns>
        SubmitJoke200Response SubmitJoke(string? body = default(string?), int operationIndex = 0);

        /// <summary>
        /// Submit Joke
        /// </summary>
        /// <remarks>
        /// Submit a joke. See https://humorapi.com/docs/#Submit-Joke for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Post the joke as plain text. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubmitJoke200Response</returns>
        ApiResponse<SubmitJoke200Response> SubmitJokeWithHttpInfo(string? body = default(string?), int operationIndex = 0);
        /// <summary>
        /// Upvote a Joke
        /// </summary>
        /// <remarks>
        /// Upvote a joke. See https://humorapi.com/docs/#Upvote-Joke for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubmitJoke200Response</returns>
        SubmitJoke200Response UpvoteJoke(int id, int operationIndex = 0);

        /// <summary>
        /// Upvote a Joke
        /// </summary>
        /// <remarks>
        /// Upvote a joke. See https://humorapi.com/docs/#Upvote-Joke for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubmitJoke200Response</returns>
        ApiResponse<SubmitJoke200Response> UpvoteJokeWithHttpInfo(int id, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJokesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Analyze Joke
        /// </summary>
        /// <remarks>
        /// Analyze a joke. See https://humorapi.com/docs/#Analyze-Joke for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Post the joke as plain text. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnalyzeJoke200Response</returns>
        System.Threading.Tasks.Task<AnalyzeJoke200Response> AnalyzeJokeAsync(string? body = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Analyze Joke
        /// </summary>
        /// <remarks>
        /// Analyze a joke. See https://humorapi.com/docs/#Analyze-Joke for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Post the joke as plain text. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnalyzeJoke200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnalyzeJoke200Response>> AnalyzeJokeWithHttpInfoAsync(string? body = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Downvote a Joke
        /// </summary>
        /// <remarks>
        /// Downvote a joke. See https://humorapi.com/docs/#Downvote-Joke for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubmitJoke200Response</returns>
        System.Threading.Tasks.Task<SubmitJoke200Response> DownvoteJokeAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Downvote a Joke
        /// </summary>
        /// <remarks>
        /// Downvote a joke. See https://humorapi.com/docs/#Downvote-Joke for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubmitJoke200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmitJoke200Response>> DownvoteJokeWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Random Joke
        /// </summary>
        /// <remarks>
        /// Get a random joke. See https://humorapi.com/docs/#Random-Joke for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma separated list of keywords. (optional)</param>
        /// <param name="includeTags">A comma separated list of tags that the joke must have. (optional)</param>
        /// <param name="excludeTags">A comma separated list of tags that the joke must not have. (optional)</param>
        /// <param name="minRating">The minimum rating between 0 and 10 the result should have. (optional)</param>
        /// <param name="maxLength">The maximum number of letters in the joke. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RandomJoke200Response</returns>
        System.Threading.Tasks.Task<RandomJoke200Response> RandomJokeAsync(string? keywords = default(string?), string? includeTags = default(string?), string? excludeTags = default(string?), int? minRating = default(int?), int? maxLength = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Random Joke
        /// </summary>
        /// <remarks>
        /// Get a random joke. See https://humorapi.com/docs/#Random-Joke for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma separated list of keywords. (optional)</param>
        /// <param name="includeTags">A comma separated list of tags that the joke must have. (optional)</param>
        /// <param name="excludeTags">A comma separated list of tags that the joke must not have. (optional)</param>
        /// <param name="minRating">The minimum rating between 0 and 10 the result should have. (optional)</param>
        /// <param name="maxLength">The maximum number of letters in the joke. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RandomJoke200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<RandomJoke200Response>> RandomJokeWithHttpInfoAsync(string? keywords = default(string?), string? includeTags = default(string?), string? excludeTags = default(string?), int? minRating = default(int?), int? maxLength = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Jokes
        /// </summary>
        /// <remarks>
        /// Search for jokes. See https://humorapi.com/docs/#Search-Jokes for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma separated list of keywords. (optional)</param>
        /// <param name="includeTags">A comma separated list of tags that the joke must have. (optional)</param>
        /// <param name="excludeTags">A comma separated list of tags that the joke must not have. (optional)</param>
        /// <param name="number">The number of results to retrieve between 1 and 10. (optional)</param>
        /// <param name="minRating">The minimum rating between 0 and 10 the result should have. (optional)</param>
        /// <param name="maxLength">The maximum number of letters in the joke. (optional)</param>
        /// <param name="offset">The number of results to skip. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchJokes200Response</returns>
        System.Threading.Tasks.Task<SearchJokes200Response> SearchJokesAsync(string? keywords = default(string?), string? includeTags = default(string?), string? excludeTags = default(string?), int? number = default(int?), int? minRating = default(int?), int? maxLength = default(int?), decimal? offset = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Jokes
        /// </summary>
        /// <remarks>
        /// Search for jokes. See https://humorapi.com/docs/#Search-Jokes for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma separated list of keywords. (optional)</param>
        /// <param name="includeTags">A comma separated list of tags that the joke must have. (optional)</param>
        /// <param name="excludeTags">A comma separated list of tags that the joke must not have. (optional)</param>
        /// <param name="number">The number of results to retrieve between 1 and 10. (optional)</param>
        /// <param name="minRating">The minimum rating between 0 and 10 the result should have. (optional)</param>
        /// <param name="maxLength">The maximum number of letters in the joke. (optional)</param>
        /// <param name="offset">The number of results to skip. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchJokes200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchJokes200Response>> SearchJokesWithHttpInfoAsync(string? keywords = default(string?), string? includeTags = default(string?), string? excludeTags = default(string?), int? number = default(int?), int? minRating = default(int?), int? maxLength = default(int?), decimal? offset = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Submit Joke
        /// </summary>
        /// <remarks>
        /// Submit a joke. See https://humorapi.com/docs/#Submit-Joke for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Post the joke as plain text. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubmitJoke200Response</returns>
        System.Threading.Tasks.Task<SubmitJoke200Response> SubmitJokeAsync(string? body = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Submit Joke
        /// </summary>
        /// <remarks>
        /// Submit a joke. See https://humorapi.com/docs/#Submit-Joke for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Post the joke as plain text. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubmitJoke200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmitJoke200Response>> SubmitJokeWithHttpInfoAsync(string? body = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upvote a Joke
        /// </summary>
        /// <remarks>
        /// Upvote a joke. See https://humorapi.com/docs/#Upvote-Joke for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubmitJoke200Response</returns>
        System.Threading.Tasks.Task<SubmitJoke200Response> UpvoteJokeAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upvote a Joke
        /// </summary>
        /// <remarks>
        /// Upvote a joke. See https://humorapi.com/docs/#Upvote-Joke for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubmitJoke200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmitJoke200Response>> UpvoteJokeWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJokesApi : IJokesApiSync, IJokesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class JokesApi : IJokesApi
    {
        private humorapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="JokesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JokesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JokesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JokesApi(string basePath)
        {
            this.Configuration = humorapi.Client.Configuration.MergeConfigurations(
                humorapi.Client.GlobalConfiguration.Instance,
                new humorapi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new humorapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new humorapi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = humorapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JokesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public JokesApi(humorapi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = humorapi.Client.Configuration.MergeConfigurations(
                humorapi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new humorapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new humorapi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = humorapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JokesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public JokesApi(humorapi.Client.ISynchronousClient client, humorapi.Client.IAsynchronousClient asyncClient, humorapi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = humorapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public humorapi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public humorapi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public humorapi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public humorapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Analyze Joke Analyze a joke. See https://humorapi.com/docs/#Analyze-Joke for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Post the joke as plain text. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AnalyzeJoke200Response</returns>
        public AnalyzeJoke200Response AnalyzeJoke(string? body = default(string?), int operationIndex = 0)
        {
            humorapi.Client.ApiResponse<AnalyzeJoke200Response> localVarResponse = AnalyzeJokeWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Analyze Joke Analyze a joke. See https://humorapi.com/docs/#Analyze-Joke for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Post the joke as plain text. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AnalyzeJoke200Response</returns>
        public humorapi.Client.ApiResponse<AnalyzeJoke200Response> AnalyzeJokeWithHttpInfo(string? body = default(string?), int operationIndex = 0)
        {
            humorapi.Client.RequestOptions localVarRequestOptions = new humorapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = humorapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = humorapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "JokesApi.AnalyzeJoke";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AnalyzeJoke200Response>("/jokes/analyze", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnalyzeJoke", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Analyze Joke Analyze a joke. See https://humorapi.com/docs/#Analyze-Joke for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Post the joke as plain text. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnalyzeJoke200Response</returns>
        public async System.Threading.Tasks.Task<AnalyzeJoke200Response> AnalyzeJokeAsync(string? body = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            humorapi.Client.ApiResponse<AnalyzeJoke200Response> localVarResponse = await AnalyzeJokeWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Analyze Joke Analyze a joke. See https://humorapi.com/docs/#Analyze-Joke for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Post the joke as plain text. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnalyzeJoke200Response)</returns>
        public async System.Threading.Tasks.Task<humorapi.Client.ApiResponse<AnalyzeJoke200Response>> AnalyzeJokeWithHttpInfoAsync(string? body = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            humorapi.Client.RequestOptions localVarRequestOptions = new humorapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = humorapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = humorapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "JokesApi.AnalyzeJoke";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AnalyzeJoke200Response>("/jokes/analyze", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnalyzeJoke", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Downvote a Joke Downvote a joke. See https://humorapi.com/docs/#Downvote-Joke for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubmitJoke200Response</returns>
        public SubmitJoke200Response DownvoteJoke(int id, int operationIndex = 0)
        {
            humorapi.Client.ApiResponse<SubmitJoke200Response> localVarResponse = DownvoteJokeWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Downvote a Joke Downvote a joke. See https://humorapi.com/docs/#Downvote-Joke for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubmitJoke200Response</returns>
        public humorapi.Client.ApiResponse<SubmitJoke200Response> DownvoteJokeWithHttpInfo(int id, int operationIndex = 0)
        {
            humorapi.Client.RequestOptions localVarRequestOptions = new humorapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = humorapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = humorapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", humorapi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "JokesApi.DownvoteJoke";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SubmitJoke200Response>("/jokes/{id}/downvote", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownvoteJoke", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Downvote a Joke Downvote a joke. See https://humorapi.com/docs/#Downvote-Joke for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubmitJoke200Response</returns>
        public async System.Threading.Tasks.Task<SubmitJoke200Response> DownvoteJokeAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            humorapi.Client.ApiResponse<SubmitJoke200Response> localVarResponse = await DownvoteJokeWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Downvote a Joke Downvote a joke. See https://humorapi.com/docs/#Downvote-Joke for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubmitJoke200Response)</returns>
        public async System.Threading.Tasks.Task<humorapi.Client.ApiResponse<SubmitJoke200Response>> DownvoteJokeWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            humorapi.Client.RequestOptions localVarRequestOptions = new humorapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = humorapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = humorapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", humorapi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "JokesApi.DownvoteJoke";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SubmitJoke200Response>("/jokes/{id}/downvote", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownvoteJoke", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Random Joke Get a random joke. See https://humorapi.com/docs/#Random-Joke for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma separated list of keywords. (optional)</param>
        /// <param name="includeTags">A comma separated list of tags that the joke must have. (optional)</param>
        /// <param name="excludeTags">A comma separated list of tags that the joke must not have. (optional)</param>
        /// <param name="minRating">The minimum rating between 0 and 10 the result should have. (optional)</param>
        /// <param name="maxLength">The maximum number of letters in the joke. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RandomJoke200Response</returns>
        public RandomJoke200Response RandomJoke(string? keywords = default(string?), string? includeTags = default(string?), string? excludeTags = default(string?), int? minRating = default(int?), int? maxLength = default(int?), int operationIndex = 0)
        {
            humorapi.Client.ApiResponse<RandomJoke200Response> localVarResponse = RandomJokeWithHttpInfo(keywords, includeTags, excludeTags, minRating, maxLength);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Random Joke Get a random joke. See https://humorapi.com/docs/#Random-Joke for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma separated list of keywords. (optional)</param>
        /// <param name="includeTags">A comma separated list of tags that the joke must have. (optional)</param>
        /// <param name="excludeTags">A comma separated list of tags that the joke must not have. (optional)</param>
        /// <param name="minRating">The minimum rating between 0 and 10 the result should have. (optional)</param>
        /// <param name="maxLength">The maximum number of letters in the joke. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RandomJoke200Response</returns>
        public humorapi.Client.ApiResponse<RandomJoke200Response> RandomJokeWithHttpInfo(string? keywords = default(string?), string? includeTags = default(string?), string? excludeTags = default(string?), int? minRating = default(int?), int? maxLength = default(int?), int operationIndex = 0)
        {
            humorapi.Client.RequestOptions localVarRequestOptions = new humorapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = humorapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = humorapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (keywords != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "keywords", keywords));
            }
            if (includeTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "include-tags", includeTags));
            }
            if (excludeTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "exclude-tags", excludeTags));
            }
            if (minRating != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "min-rating", minRating));
            }
            if (maxLength != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "max-length", maxLength));
            }

            localVarRequestOptions.Operation = "JokesApi.RandomJoke";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RandomJoke200Response>("/jokes/random", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RandomJoke", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Random Joke Get a random joke. See https://humorapi.com/docs/#Random-Joke for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma separated list of keywords. (optional)</param>
        /// <param name="includeTags">A comma separated list of tags that the joke must have. (optional)</param>
        /// <param name="excludeTags">A comma separated list of tags that the joke must not have. (optional)</param>
        /// <param name="minRating">The minimum rating between 0 and 10 the result should have. (optional)</param>
        /// <param name="maxLength">The maximum number of letters in the joke. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RandomJoke200Response</returns>
        public async System.Threading.Tasks.Task<RandomJoke200Response> RandomJokeAsync(string? keywords = default(string?), string? includeTags = default(string?), string? excludeTags = default(string?), int? minRating = default(int?), int? maxLength = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            humorapi.Client.ApiResponse<RandomJoke200Response> localVarResponse = await RandomJokeWithHttpInfoAsync(keywords, includeTags, excludeTags, minRating, maxLength, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Random Joke Get a random joke. See https://humorapi.com/docs/#Random-Joke for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma separated list of keywords. (optional)</param>
        /// <param name="includeTags">A comma separated list of tags that the joke must have. (optional)</param>
        /// <param name="excludeTags">A comma separated list of tags that the joke must not have. (optional)</param>
        /// <param name="minRating">The minimum rating between 0 and 10 the result should have. (optional)</param>
        /// <param name="maxLength">The maximum number of letters in the joke. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RandomJoke200Response)</returns>
        public async System.Threading.Tasks.Task<humorapi.Client.ApiResponse<RandomJoke200Response>> RandomJokeWithHttpInfoAsync(string? keywords = default(string?), string? includeTags = default(string?), string? excludeTags = default(string?), int? minRating = default(int?), int? maxLength = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            humorapi.Client.RequestOptions localVarRequestOptions = new humorapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = humorapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = humorapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (keywords != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "keywords", keywords));
            }
            if (includeTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "include-tags", includeTags));
            }
            if (excludeTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "exclude-tags", excludeTags));
            }
            if (minRating != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "min-rating", minRating));
            }
            if (maxLength != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "max-length", maxLength));
            }

            localVarRequestOptions.Operation = "JokesApi.RandomJoke";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RandomJoke200Response>("/jokes/random", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RandomJoke", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Jokes Search for jokes. See https://humorapi.com/docs/#Search-Jokes for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma separated list of keywords. (optional)</param>
        /// <param name="includeTags">A comma separated list of tags that the joke must have. (optional)</param>
        /// <param name="excludeTags">A comma separated list of tags that the joke must not have. (optional)</param>
        /// <param name="number">The number of results to retrieve between 1 and 10. (optional)</param>
        /// <param name="minRating">The minimum rating between 0 and 10 the result should have. (optional)</param>
        /// <param name="maxLength">The maximum number of letters in the joke. (optional)</param>
        /// <param name="offset">The number of results to skip. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchJokes200Response</returns>
        public SearchJokes200Response SearchJokes(string? keywords = default(string?), string? includeTags = default(string?), string? excludeTags = default(string?), int? number = default(int?), int? minRating = default(int?), int? maxLength = default(int?), decimal? offset = default(decimal?), int operationIndex = 0)
        {
            humorapi.Client.ApiResponse<SearchJokes200Response> localVarResponse = SearchJokesWithHttpInfo(keywords, includeTags, excludeTags, number, minRating, maxLength, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Jokes Search for jokes. See https://humorapi.com/docs/#Search-Jokes for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma separated list of keywords. (optional)</param>
        /// <param name="includeTags">A comma separated list of tags that the joke must have. (optional)</param>
        /// <param name="excludeTags">A comma separated list of tags that the joke must not have. (optional)</param>
        /// <param name="number">The number of results to retrieve between 1 and 10. (optional)</param>
        /// <param name="minRating">The minimum rating between 0 and 10 the result should have. (optional)</param>
        /// <param name="maxLength">The maximum number of letters in the joke. (optional)</param>
        /// <param name="offset">The number of results to skip. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchJokes200Response</returns>
        public humorapi.Client.ApiResponse<SearchJokes200Response> SearchJokesWithHttpInfo(string? keywords = default(string?), string? includeTags = default(string?), string? excludeTags = default(string?), int? number = default(int?), int? minRating = default(int?), int? maxLength = default(int?), decimal? offset = default(decimal?), int operationIndex = 0)
        {
            humorapi.Client.RequestOptions localVarRequestOptions = new humorapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = humorapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = humorapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (keywords != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "keywords", keywords));
            }
            if (includeTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "include-tags", includeTags));
            }
            if (excludeTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "exclude-tags", excludeTags));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (minRating != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "min-rating", minRating));
            }
            if (maxLength != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "max-length", maxLength));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "JokesApi.SearchJokes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchJokes200Response>("/jokes/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchJokes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Jokes Search for jokes. See https://humorapi.com/docs/#Search-Jokes for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma separated list of keywords. (optional)</param>
        /// <param name="includeTags">A comma separated list of tags that the joke must have. (optional)</param>
        /// <param name="excludeTags">A comma separated list of tags that the joke must not have. (optional)</param>
        /// <param name="number">The number of results to retrieve between 1 and 10. (optional)</param>
        /// <param name="minRating">The minimum rating between 0 and 10 the result should have. (optional)</param>
        /// <param name="maxLength">The maximum number of letters in the joke. (optional)</param>
        /// <param name="offset">The number of results to skip. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchJokes200Response</returns>
        public async System.Threading.Tasks.Task<SearchJokes200Response> SearchJokesAsync(string? keywords = default(string?), string? includeTags = default(string?), string? excludeTags = default(string?), int? number = default(int?), int? minRating = default(int?), int? maxLength = default(int?), decimal? offset = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            humorapi.Client.ApiResponse<SearchJokes200Response> localVarResponse = await SearchJokesWithHttpInfoAsync(keywords, includeTags, excludeTags, number, minRating, maxLength, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Jokes Search for jokes. See https://humorapi.com/docs/#Search-Jokes for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma separated list of keywords. (optional)</param>
        /// <param name="includeTags">A comma separated list of tags that the joke must have. (optional)</param>
        /// <param name="excludeTags">A comma separated list of tags that the joke must not have. (optional)</param>
        /// <param name="number">The number of results to retrieve between 1 and 10. (optional)</param>
        /// <param name="minRating">The minimum rating between 0 and 10 the result should have. (optional)</param>
        /// <param name="maxLength">The maximum number of letters in the joke. (optional)</param>
        /// <param name="offset">The number of results to skip. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchJokes200Response)</returns>
        public async System.Threading.Tasks.Task<humorapi.Client.ApiResponse<SearchJokes200Response>> SearchJokesWithHttpInfoAsync(string? keywords = default(string?), string? includeTags = default(string?), string? excludeTags = default(string?), int? number = default(int?), int? minRating = default(int?), int? maxLength = default(int?), decimal? offset = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            humorapi.Client.RequestOptions localVarRequestOptions = new humorapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = humorapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = humorapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (keywords != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "keywords", keywords));
            }
            if (includeTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "include-tags", includeTags));
            }
            if (excludeTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "exclude-tags", excludeTags));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (minRating != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "min-rating", minRating));
            }
            if (maxLength != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "max-length", maxLength));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "JokesApi.SearchJokes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchJokes200Response>("/jokes/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchJokes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit Joke Submit a joke. See https://humorapi.com/docs/#Submit-Joke for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Post the joke as plain text. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubmitJoke200Response</returns>
        public SubmitJoke200Response SubmitJoke(string? body = default(string?), int operationIndex = 0)
        {
            humorapi.Client.ApiResponse<SubmitJoke200Response> localVarResponse = SubmitJokeWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit Joke Submit a joke. See https://humorapi.com/docs/#Submit-Joke for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Post the joke as plain text. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubmitJoke200Response</returns>
        public humorapi.Client.ApiResponse<SubmitJoke200Response> SubmitJokeWithHttpInfo(string? body = default(string?), int operationIndex = 0)
        {
            humorapi.Client.RequestOptions localVarRequestOptions = new humorapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = humorapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = humorapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "JokesApi.SubmitJoke";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SubmitJoke200Response>("/jokes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitJoke", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit Joke Submit a joke. See https://humorapi.com/docs/#Submit-Joke for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Post the joke as plain text. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubmitJoke200Response</returns>
        public async System.Threading.Tasks.Task<SubmitJoke200Response> SubmitJokeAsync(string? body = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            humorapi.Client.ApiResponse<SubmitJoke200Response> localVarResponse = await SubmitJokeWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit Joke Submit a joke. See https://humorapi.com/docs/#Submit-Joke for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Post the joke as plain text. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubmitJoke200Response)</returns>
        public async System.Threading.Tasks.Task<humorapi.Client.ApiResponse<SubmitJoke200Response>> SubmitJokeWithHttpInfoAsync(string? body = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            humorapi.Client.RequestOptions localVarRequestOptions = new humorapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = humorapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = humorapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "JokesApi.SubmitJoke";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SubmitJoke200Response>("/jokes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitJoke", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upvote a Joke Upvote a joke. See https://humorapi.com/docs/#Upvote-Joke for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubmitJoke200Response</returns>
        public SubmitJoke200Response UpvoteJoke(int id, int operationIndex = 0)
        {
            humorapi.Client.ApiResponse<SubmitJoke200Response> localVarResponse = UpvoteJokeWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upvote a Joke Upvote a joke. See https://humorapi.com/docs/#Upvote-Joke for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubmitJoke200Response</returns>
        public humorapi.Client.ApiResponse<SubmitJoke200Response> UpvoteJokeWithHttpInfo(int id, int operationIndex = 0)
        {
            humorapi.Client.RequestOptions localVarRequestOptions = new humorapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = humorapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = humorapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", humorapi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "JokesApi.UpvoteJoke";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SubmitJoke200Response>("/jokes/{id}/upvote", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpvoteJoke", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upvote a Joke Upvote a joke. See https://humorapi.com/docs/#Upvote-Joke for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubmitJoke200Response</returns>
        public async System.Threading.Tasks.Task<SubmitJoke200Response> UpvoteJokeAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            humorapi.Client.ApiResponse<SubmitJoke200Response> localVarResponse = await UpvoteJokeWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upvote a Joke Upvote a joke. See https://humorapi.com/docs/#Upvote-Joke for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubmitJoke200Response)</returns>
        public async System.Threading.Tasks.Task<humorapi.Client.ApiResponse<SubmitJoke200Response>> UpvoteJokeWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            humorapi.Client.RequestOptions localVarRequestOptions = new humorapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = humorapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = humorapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", humorapi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "JokesApi.UpvoteJoke";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SubmitJoke200Response>("/jokes/{id}/upvote", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpvoteJoke", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
