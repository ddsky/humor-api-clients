/*
 * Humor API
 *
 * Awesome Humor API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@humorapi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using humorapi.Client;
using humorapi.Model;

namespace humorapi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOtherApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Generate Nonsense Word
        /// </summary>
        /// <remarks>
        /// Generate a nonsense word. See https://humorapi.com/docs/#Generate-Nonsense-Word for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerateNonsenseWord200Response</returns>
        GenerateNonsenseWord200Response GenerateNonsenseWord(int operationIndex = 0);

        /// <summary>
        /// Generate Nonsense Word
        /// </summary>
        /// <remarks>
        /// Generate a nonsense word. See https://humorapi.com/docs/#Generate-Nonsense-Word for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerateNonsenseWord200Response</returns>
        ApiResponse<GenerateNonsenseWord200Response> GenerateNonsenseWordWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Insult
        /// </summary>
        /// <remarks>
        /// Insult somebody for doing something. See https://humorapi.com/docs/#Insult for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The person&#39;s name.</param>
        /// <param name="reason">The reason for the praise/insult.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Praise200Response</returns>
        Praise200Response Insult(string name, string reason, int operationIndex = 0);

        /// <summary>
        /// Insult
        /// </summary>
        /// <remarks>
        /// Insult somebody for doing something. See https://humorapi.com/docs/#Insult for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The person&#39;s name.</param>
        /// <param name="reason">The reason for the praise/insult.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Praise200Response</returns>
        ApiResponse<Praise200Response> InsultWithHttpInfo(string name, string reason, int operationIndex = 0);
        /// <summary>
        /// Praise
        /// </summary>
        /// <remarks>
        /// Praise somebody for doing something. See https://humorapi.com/docs/#Praise for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The person&#39;s name.</param>
        /// <param name="reason">The reason for the praise/insult.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Praise200Response</returns>
        Praise200Response Praise(string name, string reason, int operationIndex = 0);

        /// <summary>
        /// Praise
        /// </summary>
        /// <remarks>
        /// Praise somebody for doing something. See https://humorapi.com/docs/#Praise for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The person&#39;s name.</param>
        /// <param name="reason">The reason for the praise/insult.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Praise200Response</returns>
        ApiResponse<Praise200Response> PraiseWithHttpInfo(string name, string reason, int operationIndex = 0);
        /// <summary>
        /// Rate Word
        /// </summary>
        /// <remarks>
        /// Rate the funniness of a word. See https://humorapi.com/docs/#Rate-Word for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The word to be rated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RateWord200Response</returns>
        RateWord200Response RateWord(string word, int operationIndex = 0);

        /// <summary>
        /// Rate Word
        /// </summary>
        /// <remarks>
        /// Rate the funniness of a word. See https://humorapi.com/docs/#Rate-Word for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The word to be rated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RateWord200Response</returns>
        ApiResponse<RateWord200Response> RateWordWithHttpInfo(string word, int operationIndex = 0);
        /// <summary>
        /// Search Gifs
        /// </summary>
        /// <remarks>
        /// Search for gifs. See https://humorapi.com/docs/#Search-Gifs for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">A search query.</param>
        /// <param name="number">The number of results to retrieve between 1 and 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchGifs200Response</returns>
        SearchGifs200Response SearchGifs(string query, int? number = default(int?), int operationIndex = 0);

        /// <summary>
        /// Search Gifs
        /// </summary>
        /// <remarks>
        /// Search for gifs. See https://humorapi.com/docs/#Search-Gifs for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">A search query.</param>
        /// <param name="number">The number of results to retrieve between 1 and 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchGifs200Response</returns>
        ApiResponse<SearchGifs200Response> SearchGifsWithHttpInfo(string query, int? number = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOtherApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Generate Nonsense Word
        /// </summary>
        /// <remarks>
        /// Generate a nonsense word. See https://humorapi.com/docs/#Generate-Nonsense-Word for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerateNonsenseWord200Response</returns>
        System.Threading.Tasks.Task<GenerateNonsenseWord200Response> GenerateNonsenseWordAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generate Nonsense Word
        /// </summary>
        /// <remarks>
        /// Generate a nonsense word. See https://humorapi.com/docs/#Generate-Nonsense-Word for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerateNonsenseWord200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerateNonsenseWord200Response>> GenerateNonsenseWordWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Insult
        /// </summary>
        /// <remarks>
        /// Insult somebody for doing something. See https://humorapi.com/docs/#Insult for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The person&#39;s name.</param>
        /// <param name="reason">The reason for the praise/insult.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Praise200Response</returns>
        System.Threading.Tasks.Task<Praise200Response> InsultAsync(string name, string reason, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Insult
        /// </summary>
        /// <remarks>
        /// Insult somebody for doing something. See https://humorapi.com/docs/#Insult for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The person&#39;s name.</param>
        /// <param name="reason">The reason for the praise/insult.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Praise200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Praise200Response>> InsultWithHttpInfoAsync(string name, string reason, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Praise
        /// </summary>
        /// <remarks>
        /// Praise somebody for doing something. See https://humorapi.com/docs/#Praise for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The person&#39;s name.</param>
        /// <param name="reason">The reason for the praise/insult.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Praise200Response</returns>
        System.Threading.Tasks.Task<Praise200Response> PraiseAsync(string name, string reason, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Praise
        /// </summary>
        /// <remarks>
        /// Praise somebody for doing something. See https://humorapi.com/docs/#Praise for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The person&#39;s name.</param>
        /// <param name="reason">The reason for the praise/insult.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Praise200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Praise200Response>> PraiseWithHttpInfoAsync(string name, string reason, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Rate Word
        /// </summary>
        /// <remarks>
        /// Rate the funniness of a word. See https://humorapi.com/docs/#Rate-Word for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The word to be rated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RateWord200Response</returns>
        System.Threading.Tasks.Task<RateWord200Response> RateWordAsync(string word, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Rate Word
        /// </summary>
        /// <remarks>
        /// Rate the funniness of a word. See https://humorapi.com/docs/#Rate-Word for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The word to be rated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RateWord200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<RateWord200Response>> RateWordWithHttpInfoAsync(string word, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Gifs
        /// </summary>
        /// <remarks>
        /// Search for gifs. See https://humorapi.com/docs/#Search-Gifs for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">A search query.</param>
        /// <param name="number">The number of results to retrieve between 1 and 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchGifs200Response</returns>
        System.Threading.Tasks.Task<SearchGifs200Response> SearchGifsAsync(string query, int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Gifs
        /// </summary>
        /// <remarks>
        /// Search for gifs. See https://humorapi.com/docs/#Search-Gifs for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">A search query.</param>
        /// <param name="number">The number of results to retrieve between 1 and 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchGifs200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchGifs200Response>> SearchGifsWithHttpInfoAsync(string query, int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOtherApi : IOtherApiSync, IOtherApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OtherApi : IOtherApi
    {
        private humorapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OtherApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OtherApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OtherApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OtherApi(string basePath)
        {
            this.Configuration = humorapi.Client.Configuration.MergeConfigurations(
                humorapi.Client.GlobalConfiguration.Instance,
                new humorapi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new humorapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new humorapi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = humorapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OtherApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OtherApi(humorapi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = humorapi.Client.Configuration.MergeConfigurations(
                humorapi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new humorapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new humorapi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = humorapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OtherApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OtherApi(humorapi.Client.ISynchronousClient client, humorapi.Client.IAsynchronousClient asyncClient, humorapi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = humorapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public humorapi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public humorapi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public humorapi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public humorapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Generate Nonsense Word Generate a nonsense word. See https://humorapi.com/docs/#Generate-Nonsense-Word for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerateNonsenseWord200Response</returns>
        public GenerateNonsenseWord200Response GenerateNonsenseWord(int operationIndex = 0)
        {
            humorapi.Client.ApiResponse<GenerateNonsenseWord200Response> localVarResponse = GenerateNonsenseWordWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate Nonsense Word Generate a nonsense word. See https://humorapi.com/docs/#Generate-Nonsense-Word for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerateNonsenseWord200Response</returns>
        public humorapi.Client.ApiResponse<GenerateNonsenseWord200Response> GenerateNonsenseWordWithHttpInfo(int operationIndex = 0)
        {
            humorapi.Client.RequestOptions localVarRequestOptions = new humorapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = humorapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = humorapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "OtherApi.GenerateNonsenseWord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GenerateNonsenseWord200Response>("/words/nonsense/random", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateNonsenseWord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate Nonsense Word Generate a nonsense word. See https://humorapi.com/docs/#Generate-Nonsense-Word for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerateNonsenseWord200Response</returns>
        public async System.Threading.Tasks.Task<GenerateNonsenseWord200Response> GenerateNonsenseWordAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            humorapi.Client.ApiResponse<GenerateNonsenseWord200Response> localVarResponse = await GenerateNonsenseWordWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate Nonsense Word Generate a nonsense word. See https://humorapi.com/docs/#Generate-Nonsense-Word for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerateNonsenseWord200Response)</returns>
        public async System.Threading.Tasks.Task<humorapi.Client.ApiResponse<GenerateNonsenseWord200Response>> GenerateNonsenseWordWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            humorapi.Client.RequestOptions localVarRequestOptions = new humorapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = humorapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = humorapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "OtherApi.GenerateNonsenseWord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GenerateNonsenseWord200Response>("/words/nonsense/random", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateNonsenseWord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Insult Insult somebody for doing something. See https://humorapi.com/docs/#Insult for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The person&#39;s name.</param>
        /// <param name="reason">The reason for the praise/insult.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Praise200Response</returns>
        public Praise200Response Insult(string name, string reason, int operationIndex = 0)
        {
            humorapi.Client.ApiResponse<Praise200Response> localVarResponse = InsultWithHttpInfo(name, reason);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Insult Insult somebody for doing something. See https://humorapi.com/docs/#Insult for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The person&#39;s name.</param>
        /// <param name="reason">The reason for the praise/insult.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Praise200Response</returns>
        public humorapi.Client.ApiResponse<Praise200Response> InsultWithHttpInfo(string name, string reason, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new humorapi.Client.ApiException(400, "Missing required parameter 'name' when calling OtherApi->Insult");
            }

            // verify the required parameter 'reason' is set
            if (reason == null)
            {
                throw new humorapi.Client.ApiException(400, "Missing required parameter 'reason' when calling OtherApi->Insult");
            }

            humorapi.Client.RequestOptions localVarRequestOptions = new humorapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = humorapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = humorapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "reason", reason));

            localVarRequestOptions.Operation = "OtherApi.Insult";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Praise200Response>("/insult", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Insult", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Insult Insult somebody for doing something. See https://humorapi.com/docs/#Insult for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The person&#39;s name.</param>
        /// <param name="reason">The reason for the praise/insult.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Praise200Response</returns>
        public async System.Threading.Tasks.Task<Praise200Response> InsultAsync(string name, string reason, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            humorapi.Client.ApiResponse<Praise200Response> localVarResponse = await InsultWithHttpInfoAsync(name, reason, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Insult Insult somebody for doing something. See https://humorapi.com/docs/#Insult for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The person&#39;s name.</param>
        /// <param name="reason">The reason for the praise/insult.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Praise200Response)</returns>
        public async System.Threading.Tasks.Task<humorapi.Client.ApiResponse<Praise200Response>> InsultWithHttpInfoAsync(string name, string reason, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new humorapi.Client.ApiException(400, "Missing required parameter 'name' when calling OtherApi->Insult");
            }

            // verify the required parameter 'reason' is set
            if (reason == null)
            {
                throw new humorapi.Client.ApiException(400, "Missing required parameter 'reason' when calling OtherApi->Insult");
            }


            humorapi.Client.RequestOptions localVarRequestOptions = new humorapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = humorapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = humorapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "reason", reason));

            localVarRequestOptions.Operation = "OtherApi.Insult";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Praise200Response>("/insult", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Insult", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Praise Praise somebody for doing something. See https://humorapi.com/docs/#Praise for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The person&#39;s name.</param>
        /// <param name="reason">The reason for the praise/insult.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Praise200Response</returns>
        public Praise200Response Praise(string name, string reason, int operationIndex = 0)
        {
            humorapi.Client.ApiResponse<Praise200Response> localVarResponse = PraiseWithHttpInfo(name, reason);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Praise Praise somebody for doing something. See https://humorapi.com/docs/#Praise for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The person&#39;s name.</param>
        /// <param name="reason">The reason for the praise/insult.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Praise200Response</returns>
        public humorapi.Client.ApiResponse<Praise200Response> PraiseWithHttpInfo(string name, string reason, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new humorapi.Client.ApiException(400, "Missing required parameter 'name' when calling OtherApi->Praise");
            }

            // verify the required parameter 'reason' is set
            if (reason == null)
            {
                throw new humorapi.Client.ApiException(400, "Missing required parameter 'reason' when calling OtherApi->Praise");
            }

            humorapi.Client.RequestOptions localVarRequestOptions = new humorapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = humorapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = humorapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "reason", reason));

            localVarRequestOptions.Operation = "OtherApi.Praise";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Praise200Response>("/praise", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Praise", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Praise Praise somebody for doing something. See https://humorapi.com/docs/#Praise for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The person&#39;s name.</param>
        /// <param name="reason">The reason for the praise/insult.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Praise200Response</returns>
        public async System.Threading.Tasks.Task<Praise200Response> PraiseAsync(string name, string reason, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            humorapi.Client.ApiResponse<Praise200Response> localVarResponse = await PraiseWithHttpInfoAsync(name, reason, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Praise Praise somebody for doing something. See https://humorapi.com/docs/#Praise for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The person&#39;s name.</param>
        /// <param name="reason">The reason for the praise/insult.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Praise200Response)</returns>
        public async System.Threading.Tasks.Task<humorapi.Client.ApiResponse<Praise200Response>> PraiseWithHttpInfoAsync(string name, string reason, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new humorapi.Client.ApiException(400, "Missing required parameter 'name' when calling OtherApi->Praise");
            }

            // verify the required parameter 'reason' is set
            if (reason == null)
            {
                throw new humorapi.Client.ApiException(400, "Missing required parameter 'reason' when calling OtherApi->Praise");
            }


            humorapi.Client.RequestOptions localVarRequestOptions = new humorapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = humorapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = humorapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "reason", reason));

            localVarRequestOptions.Operation = "OtherApi.Praise";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Praise200Response>("/praise", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Praise", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rate Word Rate the funniness of a word. See https://humorapi.com/docs/#Rate-Word for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The word to be rated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RateWord200Response</returns>
        public RateWord200Response RateWord(string word, int operationIndex = 0)
        {
            humorapi.Client.ApiResponse<RateWord200Response> localVarResponse = RateWordWithHttpInfo(word);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rate Word Rate the funniness of a word. See https://humorapi.com/docs/#Rate-Word for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The word to be rated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RateWord200Response</returns>
        public humorapi.Client.ApiResponse<RateWord200Response> RateWordWithHttpInfo(string word, int operationIndex = 0)
        {
            // verify the required parameter 'word' is set
            if (word == null)
            {
                throw new humorapi.Client.ApiException(400, "Missing required parameter 'word' when calling OtherApi->RateWord");
            }

            humorapi.Client.RequestOptions localVarRequestOptions = new humorapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = humorapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = humorapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "word", word));

            localVarRequestOptions.Operation = "OtherApi.RateWord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RateWord200Response>("/words/rate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RateWord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rate Word Rate the funniness of a word. See https://humorapi.com/docs/#Rate-Word for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The word to be rated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RateWord200Response</returns>
        public async System.Threading.Tasks.Task<RateWord200Response> RateWordAsync(string word, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            humorapi.Client.ApiResponse<RateWord200Response> localVarResponse = await RateWordWithHttpInfoAsync(word, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rate Word Rate the funniness of a word. See https://humorapi.com/docs/#Rate-Word for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The word to be rated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RateWord200Response)</returns>
        public async System.Threading.Tasks.Task<humorapi.Client.ApiResponse<RateWord200Response>> RateWordWithHttpInfoAsync(string word, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'word' is set
            if (word == null)
            {
                throw new humorapi.Client.ApiException(400, "Missing required parameter 'word' when calling OtherApi->RateWord");
            }


            humorapi.Client.RequestOptions localVarRequestOptions = new humorapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = humorapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = humorapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "word", word));

            localVarRequestOptions.Operation = "OtherApi.RateWord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RateWord200Response>("/words/rate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RateWord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Gifs Search for gifs. See https://humorapi.com/docs/#Search-Gifs for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">A search query.</param>
        /// <param name="number">The number of results to retrieve between 1 and 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchGifs200Response</returns>
        public SearchGifs200Response SearchGifs(string query, int? number = default(int?), int operationIndex = 0)
        {
            humorapi.Client.ApiResponse<SearchGifs200Response> localVarResponse = SearchGifsWithHttpInfo(query, number);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Gifs Search for gifs. See https://humorapi.com/docs/#Search-Gifs for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">A search query.</param>
        /// <param name="number">The number of results to retrieve between 1 and 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchGifs200Response</returns>
        public humorapi.Client.ApiResponse<SearchGifs200Response> SearchGifsWithHttpInfo(string query, int? number = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new humorapi.Client.ApiException(400, "Missing required parameter 'query' when calling OtherApi->SearchGifs");
            }

            humorapi.Client.RequestOptions localVarRequestOptions = new humorapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = humorapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = humorapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "OtherApi.SearchGifs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchGifs200Response>("/gif/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchGifs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Gifs Search for gifs. See https://humorapi.com/docs/#Search-Gifs for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">A search query.</param>
        /// <param name="number">The number of results to retrieve between 1 and 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchGifs200Response</returns>
        public async System.Threading.Tasks.Task<SearchGifs200Response> SearchGifsAsync(string query, int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            humorapi.Client.ApiResponse<SearchGifs200Response> localVarResponse = await SearchGifsWithHttpInfoAsync(query, number, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Gifs Search for gifs. See https://humorapi.com/docs/#Search-Gifs for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">A search query.</param>
        /// <param name="number">The number of results to retrieve between 1 and 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchGifs200Response)</returns>
        public async System.Threading.Tasks.Task<humorapi.Client.ApiResponse<SearchGifs200Response>> SearchGifsWithHttpInfoAsync(string query, int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new humorapi.Client.ApiException(400, "Missing required parameter 'query' when calling OtherApi->SearchGifs");
            }


            humorapi.Client.RequestOptions localVarRequestOptions = new humorapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = humorapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = humorapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "OtherApi.SearchGifs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchGifs200Response>("/gif/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchGifs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
