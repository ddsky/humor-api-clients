/*
 * Humor API
 *
 * Awesome Humor API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@humorapi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using humorapi.Client;
using humorapi.Model;

namespace humorapi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMemesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Downvote a Meme
        /// </summary>
        /// <remarks>
        /// Downvote a meme. See https://humorapi.com/docs/#Downvote-Meme for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubmitJoke200Response</returns>
        SubmitJoke200Response DownvoteMeme(int id, int operationIndex = 0);

        /// <summary>
        /// Downvote a Meme
        /// </summary>
        /// <remarks>
        /// Downvote a meme. See https://humorapi.com/docs/#Downvote-Meme for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubmitJoke200Response</returns>
        ApiResponse<SubmitJoke200Response> DownvoteMemeWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Random Meme
        /// </summary>
        /// <remarks>
        /// Get a random meme. See https://humorapi.com/docs/#Random-Meme for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma separated list of keywords. (optional)</param>
        /// <param name="keywordsInImage">Whether the keywords should be found in the meme&#39;s image. (optional)</param>
        /// <param name="mediaType">The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)</param>
        /// <param name="number">The number of results to retrieve between 1 and 10. (optional)</param>
        /// <param name="minRating">The minimum rating between 0 and 10 the result should have. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RandomMeme200Response</returns>
        RandomMeme200Response RandomMeme(string? keywords = default(string?), bool? keywordsInImage = default(bool?), string? mediaType = default(string?), int? number = default(int?), int? minRating = default(int?), int operationIndex = 0);

        /// <summary>
        /// Random Meme
        /// </summary>
        /// <remarks>
        /// Get a random meme. See https://humorapi.com/docs/#Random-Meme for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma separated list of keywords. (optional)</param>
        /// <param name="keywordsInImage">Whether the keywords should be found in the meme&#39;s image. (optional)</param>
        /// <param name="mediaType">The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)</param>
        /// <param name="number">The number of results to retrieve between 1 and 10. (optional)</param>
        /// <param name="minRating">The minimum rating between 0 and 10 the result should have. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RandomMeme200Response</returns>
        ApiResponse<RandomMeme200Response> RandomMemeWithHttpInfo(string? keywords = default(string?), bool? keywordsInImage = default(bool?), string? mediaType = default(string?), int? number = default(int?), int? minRating = default(int?), int operationIndex = 0);
        /// <summary>
        /// Search Memes
        /// </summary>
        /// <remarks>
        /// Search for memes. See https://humorapi.com/docs/#Search-Memes for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma separated list of keywords. (optional)</param>
        /// <param name="keywordsInImage">Whether the keywords should be found in the meme&#39;s image. (optional)</param>
        /// <param name="mediaType">The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)</param>
        /// <param name="number">The number of results to retrieve between 1 and 10. (optional)</param>
        /// <param name="minRating">The minimum rating between 0 and 10 the result should have. (optional)</param>
        /// <param name="offset">The number of results to skip. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchMemes200Response</returns>
        SearchMemes200Response SearchMemes(string? keywords = default(string?), bool? keywordsInImage = default(bool?), string? mediaType = default(string?), int? number = default(int?), int? minRating = default(int?), decimal? offset = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// Search Memes
        /// </summary>
        /// <remarks>
        /// Search for memes. See https://humorapi.com/docs/#Search-Memes for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma separated list of keywords. (optional)</param>
        /// <param name="keywordsInImage">Whether the keywords should be found in the meme&#39;s image. (optional)</param>
        /// <param name="mediaType">The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)</param>
        /// <param name="number">The number of results to retrieve between 1 and 10. (optional)</param>
        /// <param name="minRating">The minimum rating between 0 and 10 the result should have. (optional)</param>
        /// <param name="offset">The number of results to skip. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchMemes200Response</returns>
        ApiResponse<SearchMemes200Response> SearchMemesWithHttpInfo(string? keywords = default(string?), bool? keywordsInImage = default(bool?), string? mediaType = default(string?), int? number = default(int?), int? minRating = default(int?), decimal? offset = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// Upvote a Meme
        /// </summary>
        /// <remarks>
        /// Upvote a meme. See https://humorapi.com/docs/#Upvote-Meme for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubmitJoke200Response</returns>
        SubmitJoke200Response UpvoteMeme(int id, int operationIndex = 0);

        /// <summary>
        /// Upvote a Meme
        /// </summary>
        /// <remarks>
        /// Upvote a meme. See https://humorapi.com/docs/#Upvote-Meme for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubmitJoke200Response</returns>
        ApiResponse<SubmitJoke200Response> UpvoteMemeWithHttpInfo(int id, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMemesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Downvote a Meme
        /// </summary>
        /// <remarks>
        /// Downvote a meme. See https://humorapi.com/docs/#Downvote-Meme for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubmitJoke200Response</returns>
        System.Threading.Tasks.Task<SubmitJoke200Response> DownvoteMemeAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Downvote a Meme
        /// </summary>
        /// <remarks>
        /// Downvote a meme. See https://humorapi.com/docs/#Downvote-Meme for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubmitJoke200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmitJoke200Response>> DownvoteMemeWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Random Meme
        /// </summary>
        /// <remarks>
        /// Get a random meme. See https://humorapi.com/docs/#Random-Meme for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma separated list of keywords. (optional)</param>
        /// <param name="keywordsInImage">Whether the keywords should be found in the meme&#39;s image. (optional)</param>
        /// <param name="mediaType">The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)</param>
        /// <param name="number">The number of results to retrieve between 1 and 10. (optional)</param>
        /// <param name="minRating">The minimum rating between 0 and 10 the result should have. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RandomMeme200Response</returns>
        System.Threading.Tasks.Task<RandomMeme200Response> RandomMemeAsync(string? keywords = default(string?), bool? keywordsInImage = default(bool?), string? mediaType = default(string?), int? number = default(int?), int? minRating = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Random Meme
        /// </summary>
        /// <remarks>
        /// Get a random meme. See https://humorapi.com/docs/#Random-Meme for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma separated list of keywords. (optional)</param>
        /// <param name="keywordsInImage">Whether the keywords should be found in the meme&#39;s image. (optional)</param>
        /// <param name="mediaType">The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)</param>
        /// <param name="number">The number of results to retrieve between 1 and 10. (optional)</param>
        /// <param name="minRating">The minimum rating between 0 and 10 the result should have. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RandomMeme200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<RandomMeme200Response>> RandomMemeWithHttpInfoAsync(string? keywords = default(string?), bool? keywordsInImage = default(bool?), string? mediaType = default(string?), int? number = default(int?), int? minRating = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Memes
        /// </summary>
        /// <remarks>
        /// Search for memes. See https://humorapi.com/docs/#Search-Memes for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma separated list of keywords. (optional)</param>
        /// <param name="keywordsInImage">Whether the keywords should be found in the meme&#39;s image. (optional)</param>
        /// <param name="mediaType">The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)</param>
        /// <param name="number">The number of results to retrieve between 1 and 10. (optional)</param>
        /// <param name="minRating">The minimum rating between 0 and 10 the result should have. (optional)</param>
        /// <param name="offset">The number of results to skip. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchMemes200Response</returns>
        System.Threading.Tasks.Task<SearchMemes200Response> SearchMemesAsync(string? keywords = default(string?), bool? keywordsInImage = default(bool?), string? mediaType = default(string?), int? number = default(int?), int? minRating = default(int?), decimal? offset = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Memes
        /// </summary>
        /// <remarks>
        /// Search for memes. See https://humorapi.com/docs/#Search-Memes for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma separated list of keywords. (optional)</param>
        /// <param name="keywordsInImage">Whether the keywords should be found in the meme&#39;s image. (optional)</param>
        /// <param name="mediaType">The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)</param>
        /// <param name="number">The number of results to retrieve between 1 and 10. (optional)</param>
        /// <param name="minRating">The minimum rating between 0 and 10 the result should have. (optional)</param>
        /// <param name="offset">The number of results to skip. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchMemes200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchMemes200Response>> SearchMemesWithHttpInfoAsync(string? keywords = default(string?), bool? keywordsInImage = default(bool?), string? mediaType = default(string?), int? number = default(int?), int? minRating = default(int?), decimal? offset = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upvote a Meme
        /// </summary>
        /// <remarks>
        /// Upvote a meme. See https://humorapi.com/docs/#Upvote-Meme for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubmitJoke200Response</returns>
        System.Threading.Tasks.Task<SubmitJoke200Response> UpvoteMemeAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upvote a Meme
        /// </summary>
        /// <remarks>
        /// Upvote a meme. See https://humorapi.com/docs/#Upvote-Meme for more.
        /// </remarks>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubmitJoke200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmitJoke200Response>> UpvoteMemeWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMemesApi : IMemesApiSync, IMemesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MemesApi : IMemesApi
    {
        private humorapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MemesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MemesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MemesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MemesApi(string basePath)
        {
            this.Configuration = humorapi.Client.Configuration.MergeConfigurations(
                humorapi.Client.GlobalConfiguration.Instance,
                new humorapi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new humorapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new humorapi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = humorapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MemesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MemesApi(humorapi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = humorapi.Client.Configuration.MergeConfigurations(
                humorapi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new humorapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new humorapi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = humorapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MemesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MemesApi(humorapi.Client.ISynchronousClient client, humorapi.Client.IAsynchronousClient asyncClient, humorapi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = humorapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public humorapi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public humorapi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public humorapi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public humorapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Downvote a Meme Downvote a meme. See https://humorapi.com/docs/#Downvote-Meme for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubmitJoke200Response</returns>
        public SubmitJoke200Response DownvoteMeme(int id, int operationIndex = 0)
        {
            humorapi.Client.ApiResponse<SubmitJoke200Response> localVarResponse = DownvoteMemeWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Downvote a Meme Downvote a meme. See https://humorapi.com/docs/#Downvote-Meme for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubmitJoke200Response</returns>
        public humorapi.Client.ApiResponse<SubmitJoke200Response> DownvoteMemeWithHttpInfo(int id, int operationIndex = 0)
        {
            humorapi.Client.RequestOptions localVarRequestOptions = new humorapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = humorapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = humorapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", humorapi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "MemesApi.DownvoteMeme";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SubmitJoke200Response>("/memes/{id}/downvote", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownvoteMeme", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Downvote a Meme Downvote a meme. See https://humorapi.com/docs/#Downvote-Meme for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubmitJoke200Response</returns>
        public async System.Threading.Tasks.Task<SubmitJoke200Response> DownvoteMemeAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            humorapi.Client.ApiResponse<SubmitJoke200Response> localVarResponse = await DownvoteMemeWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Downvote a Meme Downvote a meme. See https://humorapi.com/docs/#Downvote-Meme for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubmitJoke200Response)</returns>
        public async System.Threading.Tasks.Task<humorapi.Client.ApiResponse<SubmitJoke200Response>> DownvoteMemeWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            humorapi.Client.RequestOptions localVarRequestOptions = new humorapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = humorapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = humorapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", humorapi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "MemesApi.DownvoteMeme";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SubmitJoke200Response>("/memes/{id}/downvote", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownvoteMeme", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Random Meme Get a random meme. See https://humorapi.com/docs/#Random-Meme for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma separated list of keywords. (optional)</param>
        /// <param name="keywordsInImage">Whether the keywords should be found in the meme&#39;s image. (optional)</param>
        /// <param name="mediaType">The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)</param>
        /// <param name="number">The number of results to retrieve between 1 and 10. (optional)</param>
        /// <param name="minRating">The minimum rating between 0 and 10 the result should have. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RandomMeme200Response</returns>
        public RandomMeme200Response RandomMeme(string? keywords = default(string?), bool? keywordsInImage = default(bool?), string? mediaType = default(string?), int? number = default(int?), int? minRating = default(int?), int operationIndex = 0)
        {
            humorapi.Client.ApiResponse<RandomMeme200Response> localVarResponse = RandomMemeWithHttpInfo(keywords, keywordsInImage, mediaType, number, minRating);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Random Meme Get a random meme. See https://humorapi.com/docs/#Random-Meme for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma separated list of keywords. (optional)</param>
        /// <param name="keywordsInImage">Whether the keywords should be found in the meme&#39;s image. (optional)</param>
        /// <param name="mediaType">The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)</param>
        /// <param name="number">The number of results to retrieve between 1 and 10. (optional)</param>
        /// <param name="minRating">The minimum rating between 0 and 10 the result should have. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RandomMeme200Response</returns>
        public humorapi.Client.ApiResponse<RandomMeme200Response> RandomMemeWithHttpInfo(string? keywords = default(string?), bool? keywordsInImage = default(bool?), string? mediaType = default(string?), int? number = default(int?), int? minRating = default(int?), int operationIndex = 0)
        {
            humorapi.Client.RequestOptions localVarRequestOptions = new humorapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = humorapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = humorapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (keywords != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "keywords", keywords));
            }
            if (keywordsInImage != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "keywords-in-image", keywordsInImage));
            }
            if (mediaType != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "media-type", mediaType));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (minRating != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "min-rating", minRating));
            }

            localVarRequestOptions.Operation = "MemesApi.RandomMeme";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RandomMeme200Response>("/memes/random", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RandomMeme", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Random Meme Get a random meme. See https://humorapi.com/docs/#Random-Meme for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma separated list of keywords. (optional)</param>
        /// <param name="keywordsInImage">Whether the keywords should be found in the meme&#39;s image. (optional)</param>
        /// <param name="mediaType">The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)</param>
        /// <param name="number">The number of results to retrieve between 1 and 10. (optional)</param>
        /// <param name="minRating">The minimum rating between 0 and 10 the result should have. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RandomMeme200Response</returns>
        public async System.Threading.Tasks.Task<RandomMeme200Response> RandomMemeAsync(string? keywords = default(string?), bool? keywordsInImage = default(bool?), string? mediaType = default(string?), int? number = default(int?), int? minRating = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            humorapi.Client.ApiResponse<RandomMeme200Response> localVarResponse = await RandomMemeWithHttpInfoAsync(keywords, keywordsInImage, mediaType, number, minRating, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Random Meme Get a random meme. See https://humorapi.com/docs/#Random-Meme for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma separated list of keywords. (optional)</param>
        /// <param name="keywordsInImage">Whether the keywords should be found in the meme&#39;s image. (optional)</param>
        /// <param name="mediaType">The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)</param>
        /// <param name="number">The number of results to retrieve between 1 and 10. (optional)</param>
        /// <param name="minRating">The minimum rating between 0 and 10 the result should have. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RandomMeme200Response)</returns>
        public async System.Threading.Tasks.Task<humorapi.Client.ApiResponse<RandomMeme200Response>> RandomMemeWithHttpInfoAsync(string? keywords = default(string?), bool? keywordsInImage = default(bool?), string? mediaType = default(string?), int? number = default(int?), int? minRating = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            humorapi.Client.RequestOptions localVarRequestOptions = new humorapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = humorapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = humorapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (keywords != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "keywords", keywords));
            }
            if (keywordsInImage != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "keywords-in-image", keywordsInImage));
            }
            if (mediaType != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "media-type", mediaType));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (minRating != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "min-rating", minRating));
            }

            localVarRequestOptions.Operation = "MemesApi.RandomMeme";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RandomMeme200Response>("/memes/random", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RandomMeme", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Memes Search for memes. See https://humorapi.com/docs/#Search-Memes for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma separated list of keywords. (optional)</param>
        /// <param name="keywordsInImage">Whether the keywords should be found in the meme&#39;s image. (optional)</param>
        /// <param name="mediaType">The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)</param>
        /// <param name="number">The number of results to retrieve between 1 and 10. (optional)</param>
        /// <param name="minRating">The minimum rating between 0 and 10 the result should have. (optional)</param>
        /// <param name="offset">The number of results to skip. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchMemes200Response</returns>
        public SearchMemes200Response SearchMemes(string? keywords = default(string?), bool? keywordsInImage = default(bool?), string? mediaType = default(string?), int? number = default(int?), int? minRating = default(int?), decimal? offset = default(decimal?), int operationIndex = 0)
        {
            humorapi.Client.ApiResponse<SearchMemes200Response> localVarResponse = SearchMemesWithHttpInfo(keywords, keywordsInImage, mediaType, number, minRating, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Memes Search for memes. See https://humorapi.com/docs/#Search-Memes for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma separated list of keywords. (optional)</param>
        /// <param name="keywordsInImage">Whether the keywords should be found in the meme&#39;s image. (optional)</param>
        /// <param name="mediaType">The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)</param>
        /// <param name="number">The number of results to retrieve between 1 and 10. (optional)</param>
        /// <param name="minRating">The minimum rating between 0 and 10 the result should have. (optional)</param>
        /// <param name="offset">The number of results to skip. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchMemes200Response</returns>
        public humorapi.Client.ApiResponse<SearchMemes200Response> SearchMemesWithHttpInfo(string? keywords = default(string?), bool? keywordsInImage = default(bool?), string? mediaType = default(string?), int? number = default(int?), int? minRating = default(int?), decimal? offset = default(decimal?), int operationIndex = 0)
        {
            humorapi.Client.RequestOptions localVarRequestOptions = new humorapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = humorapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = humorapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (keywords != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "keywords", keywords));
            }
            if (keywordsInImage != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "keywords-in-image", keywordsInImage));
            }
            if (mediaType != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "media-type", mediaType));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (minRating != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "min-rating", minRating));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "MemesApi.SearchMemes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchMemes200Response>("/memes/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchMemes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Memes Search for memes. See https://humorapi.com/docs/#Search-Memes for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma separated list of keywords. (optional)</param>
        /// <param name="keywordsInImage">Whether the keywords should be found in the meme&#39;s image. (optional)</param>
        /// <param name="mediaType">The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)</param>
        /// <param name="number">The number of results to retrieve between 1 and 10. (optional)</param>
        /// <param name="minRating">The minimum rating between 0 and 10 the result should have. (optional)</param>
        /// <param name="offset">The number of results to skip. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchMemes200Response</returns>
        public async System.Threading.Tasks.Task<SearchMemes200Response> SearchMemesAsync(string? keywords = default(string?), bool? keywordsInImage = default(bool?), string? mediaType = default(string?), int? number = default(int?), int? minRating = default(int?), decimal? offset = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            humorapi.Client.ApiResponse<SearchMemes200Response> localVarResponse = await SearchMemesWithHttpInfoAsync(keywords, keywordsInImage, mediaType, number, minRating, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Memes Search for memes. See https://humorapi.com/docs/#Search-Memes for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma separated list of keywords. (optional)</param>
        /// <param name="keywordsInImage">Whether the keywords should be found in the meme&#39;s image. (optional)</param>
        /// <param name="mediaType">The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)</param>
        /// <param name="number">The number of results to retrieve between 1 and 10. (optional)</param>
        /// <param name="minRating">The minimum rating between 0 and 10 the result should have. (optional)</param>
        /// <param name="offset">The number of results to skip. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchMemes200Response)</returns>
        public async System.Threading.Tasks.Task<humorapi.Client.ApiResponse<SearchMemes200Response>> SearchMemesWithHttpInfoAsync(string? keywords = default(string?), bool? keywordsInImage = default(bool?), string? mediaType = default(string?), int? number = default(int?), int? minRating = default(int?), decimal? offset = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            humorapi.Client.RequestOptions localVarRequestOptions = new humorapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = humorapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = humorapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (keywords != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "keywords", keywords));
            }
            if (keywordsInImage != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "keywords-in-image", keywordsInImage));
            }
            if (mediaType != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "media-type", mediaType));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (minRating != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "min-rating", minRating));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "MemesApi.SearchMemes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchMemes200Response>("/memes/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchMemes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upvote a Meme Upvote a meme. See https://humorapi.com/docs/#Upvote-Meme for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubmitJoke200Response</returns>
        public SubmitJoke200Response UpvoteMeme(int id, int operationIndex = 0)
        {
            humorapi.Client.ApiResponse<SubmitJoke200Response> localVarResponse = UpvoteMemeWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upvote a Meme Upvote a meme. See https://humorapi.com/docs/#Upvote-Meme for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubmitJoke200Response</returns>
        public humorapi.Client.ApiResponse<SubmitJoke200Response> UpvoteMemeWithHttpInfo(int id, int operationIndex = 0)
        {
            humorapi.Client.RequestOptions localVarRequestOptions = new humorapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = humorapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = humorapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", humorapi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "MemesApi.UpvoteMeme";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SubmitJoke200Response>("/memes/{id}/upvote", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpvoteMeme", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upvote a Meme Upvote a meme. See https://humorapi.com/docs/#Upvote-Meme for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubmitJoke200Response</returns>
        public async System.Threading.Tasks.Task<SubmitJoke200Response> UpvoteMemeAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            humorapi.Client.ApiResponse<SubmitJoke200Response> localVarResponse = await UpvoteMemeWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upvote a Meme Upvote a meme. See https://humorapi.com/docs/#Upvote-Meme for more.
        /// </summary>
        /// <exception cref="humorapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubmitJoke200Response)</returns>
        public async System.Threading.Tasks.Task<humorapi.Client.ApiResponse<SubmitJoke200Response>> UpvoteMemeWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            humorapi.Client.RequestOptions localVarRequestOptions = new humorapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = humorapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = humorapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", humorapi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "MemesApi.UpvoteMeme";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(humorapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SubmitJoke200Response>("/memes/{id}/upvote", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpvoteMeme", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
