/*
 * Humor API
 *
 * Awesome Humor API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@humorapi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = humorapi.Client.OpenAPIDateConverter;

namespace humorapi.Model
{
    /// <summary>
    /// SearchJokes200Response
    /// </summary>
    [DataContract(Name = "search_jokes_200_response")]
    public partial class SearchJokes200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchJokes200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SearchJokes200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchJokes200Response" /> class.
        /// </summary>
        /// <param name="jokes">jokes (required).</param>
        public SearchJokes200Response(List<SearchJokes200ResponseJokesInner> jokes = default(List<SearchJokes200ResponseJokesInner>))
        {
            // to ensure "jokes" is required (not null)
            if (jokes == null)
            {
                throw new ArgumentNullException("jokes is a required property for SearchJokes200Response and cannot be null");
            }
            this.Jokes = jokes;
        }

        /// <summary>
        /// Gets or Sets Jokes
        /// </summary>
        [DataMember(Name = "jokes", IsRequired = true, EmitDefaultValue = true)]
        public List<SearchJokes200ResponseJokesInner> Jokes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchJokes200Response {\n");
            sb.Append("  Jokes: ").Append(Jokes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
