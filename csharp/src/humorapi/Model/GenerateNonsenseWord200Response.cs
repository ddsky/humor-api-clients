/*
 * Humor API
 *
 * Awesome Humor API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@humorapi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = humorapi.Client.OpenAPIDateConverter;

namespace humorapi.Model
{
    /// <summary>
    /// GenerateNonsenseWord200Response
    /// </summary>
    [DataContract(Name = "generate_nonsense_word_200_response")]
    public partial class GenerateNonsenseWord200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateNonsenseWord200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GenerateNonsenseWord200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateNonsenseWord200Response" /> class.
        /// </summary>
        /// <param name="word">word (required).</param>
        /// <param name="rating">rating (required).</param>
        public GenerateNonsenseWord200Response(string word = default(string), decimal rating = default(decimal))
        {
            // to ensure "word" is required (not null)
            if (word == null)
            {
                throw new ArgumentNullException("word is a required property for GenerateNonsenseWord200Response and cannot be null");
            }
            this.Word = word;
            this.Rating = rating;
        }

        /// <summary>
        /// Gets or Sets Word
        /// </summary>
        [DataMember(Name = "word", IsRequired = true, EmitDefaultValue = true)]
        public string Word { get; set; }

        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [DataMember(Name = "rating", IsRequired = true, EmitDefaultValue = true)]
        public decimal Rating { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GenerateNonsenseWord200Response {\n");
            sb.Append("  Word: ").Append(Word).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Word (string) minLength
            if (this.Word != null && this.Word.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Word, length must be greater than 1.", new [] { "Word" });
            }

            yield break;
        }
    }

}
