{-
   Humor API

   Awesome Humor API.

   OpenAPI Version: 3.0.0
   Humor API API version: 1.0
   Contact: mail@humorapi.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Humor.API.Memes
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Humor.API.Memes where

import Humor.Core
import Humor.MimeTypes
import Humor.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Memes

-- *** downvoteMeme

-- | @POST \/memes\/{id}\/downvote@
-- 
-- Downvote a Meme
-- 
-- Downvote a meme. See https://humorapi.com/docs/#Downvote-Meme for more.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
downvoteMeme
  :: Id -- ^ "id" -  The object's id.
  -> HumorRequest DownvoteMeme MimeNoContent InlineResponse2008 MimeJSON
downvoteMeme (Id id) =
  _mkRequest "POST" ["/memes/",toPath id,"/downvote"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data DownvoteMeme  
-- | @application/json@
instance Produces DownvoteMeme MimeJSON


-- *** randomMeme

-- | @GET \/memes\/random@
-- 
-- Random Meme
-- 
-- Get a random meme. See https://humorapi.com/docs/#Random-Meme for more.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
randomMeme
  :: HumorRequest RandomMeme MimeNoContent InlineResponse2003 MimeJSON
randomMeme =
  _mkRequest "GET" ["/memes/random"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data RandomMeme  

-- | /Optional Param/ "keywords" - A comma separated list of keywords.
instance HasOptionalParam RandomMeme Keywords where
  applyOptionalParam req (Keywords xs) =
    req `addQuery` toQuery ("keywords", Just xs)

-- | /Optional Param/ "keywords-in-image" - Whether the keywords should be found in the meme's image.
instance HasOptionalParam RandomMeme KeywordsInImage where
  applyOptionalParam req (KeywordsInImage xs) =
    req `addQuery` toQuery ("keywords-in-image", Just xs)

-- | /Optional Param/ "media-type" - The type of the content. Can be either 'image' or 'video' or specific formats such as 'jpg', 'png', 'gif', or 'mp4'.
instance HasOptionalParam RandomMeme MediaType where
  applyOptionalParam req (MediaType xs) =
    req `addQuery` toQuery ("media-type", Just xs)

-- | /Optional Param/ "number" - The number of results to retrieve between 1 and 10.
instance HasOptionalParam RandomMeme Number where
  applyOptionalParam req (Number xs) =
    req `addQuery` toQuery ("number", Just xs)

-- | /Optional Param/ "min-rating" - The minimum rating between 0 and 10 the result should have.
instance HasOptionalParam RandomMeme MinRating where
  applyOptionalParam req (MinRating xs) =
    req `addQuery` toQuery ("min-rating", Just xs)
-- | @application/json@
instance Produces RandomMeme MimeJSON


-- *** searchMemes

-- | @GET \/memes\/search@
-- 
-- Search Memes
-- 
-- Search for memes. See https://humorapi.com/docs/#Search-Memes for more.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
searchMemes
  :: HumorRequest SearchMemes MimeNoContent InlineResponse2002 MimeJSON
searchMemes =
  _mkRequest "GET" ["/memes/search"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data SearchMemes  

-- | /Optional Param/ "keywords" - A comma separated list of keywords.
instance HasOptionalParam SearchMemes Keywords where
  applyOptionalParam req (Keywords xs) =
    req `addQuery` toQuery ("keywords", Just xs)

-- | /Optional Param/ "keywords-in-image" - Whether the keywords should be found in the meme's image.
instance HasOptionalParam SearchMemes KeywordsInImage where
  applyOptionalParam req (KeywordsInImage xs) =
    req `addQuery` toQuery ("keywords-in-image", Just xs)

-- | /Optional Param/ "media-type" - The type of the content. Can be either 'image' or 'video' or specific formats such as 'jpg', 'png', 'gif', or 'mp4'.
instance HasOptionalParam SearchMemes MediaType where
  applyOptionalParam req (MediaType xs) =
    req `addQuery` toQuery ("media-type", Just xs)

-- | /Optional Param/ "number" - The number of results to retrieve between 1 and 10.
instance HasOptionalParam SearchMemes Number where
  applyOptionalParam req (Number xs) =
    req `addQuery` toQuery ("number", Just xs)

-- | /Optional Param/ "min-rating" - The minimum rating between 0 and 10 the result should have.
instance HasOptionalParam SearchMemes MinRating where
  applyOptionalParam req (MinRating xs) =
    req `addQuery` toQuery ("min-rating", Just xs)

-- | /Optional Param/ "offset" - The number of results to skip.
instance HasOptionalParam SearchMemes Offset where
  applyOptionalParam req (Offset xs) =
    req `addQuery` toQuery ("offset", Just xs)
-- | @application/json@
instance Produces SearchMemes MimeJSON


-- *** upvoteMeme

-- | @POST \/memes\/{id}\/upvote@
-- 
-- Upvote a Meme
-- 
-- Upvote a meme. See https://humorapi.com/docs/#Upvote-Meme for more.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
upvoteMeme
  :: Id -- ^ "id" -  The object's id.
  -> HumorRequest UpvoteMeme MimeNoContent InlineResponse2008 MimeJSON
upvoteMeme (Id id) =
  _mkRequest "POST" ["/memes/",toPath id,"/upvote"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data UpvoteMeme  
-- | @application/json@
instance Produces UpvoteMeme MimeJSON

