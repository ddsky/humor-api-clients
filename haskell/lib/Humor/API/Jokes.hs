{-
   Humor API

   Awesome Humor API.

   OpenAPI Version: 3.0.0
   Humor API API version: 1.0
   Contact: mail@humorapi.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Humor.API.Jokes
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Humor.API.Jokes where

import Humor.Core
import Humor.MimeTypes
import Humor.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Jokes

-- *** analyzeJoke

-- | @POST \/jokes\/analyze@
-- 
-- Analyze Joke
-- 
-- Analyze a joke. See https://humorapi.com/docs/#Analyze-Joke for more.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
analyzeJoke 
  :: (Consumes AnalyzeJoke MimePlainText)
  => HumorRequest AnalyzeJoke MimePlainText InlineResponse2009 MimeJSON
analyzeJoke =
  _mkRequest "POST" ["/jokes/analyze"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data AnalyzeJoke 

-- | /Body Param/ "body" - Post the joke as plain text.
instance HasBodyParam AnalyzeJoke Body 

-- | @text/plain@
instance Consumes AnalyzeJoke MimePlainText

-- | @application/json@
instance Produces AnalyzeJoke MimeJSON


-- *** downvoteJoke

-- | @POST \/jokes\/{id}\/downvote@
-- 
-- Downvote a Joke
-- 
-- Downvote a joke. See https://humorapi.com/docs/#Downvote-Joke for more.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
downvoteJoke 
  :: Id -- ^ "id" -  The object's id.
  -> HumorRequest DownvoteJoke MimeNoContent InlineResponse2008 MimeJSON
downvoteJoke (Id id) =
  _mkRequest "POST" ["/jokes/",toPath id,"/downvote"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data DownvoteJoke  
-- | @application/json@
instance Produces DownvoteJoke MimeJSON


-- *** randomJoke

-- | @GET \/jokes\/random@
-- 
-- Random Joke
-- 
-- Get a random joke. See https://humorapi.com/docs/#Random-Joke for more.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
randomJoke 
  :: HumorRequest RandomJoke MimeNoContent InlineResponse2004 MimeJSON
randomJoke =
  _mkRequest "GET" ["/jokes/random"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data RandomJoke  

-- | /Optional Param/ "keywords" - A comma separated list of keywords.
instance HasOptionalParam RandomJoke Keywords where
  applyOptionalParam req (Keywords xs) =
    req `setQuery` toQuery ("keywords", Just xs)

-- | /Optional Param/ "include-tags" - A comma separated list of tags that the joke must have.
instance HasOptionalParam RandomJoke IncludeTags where
  applyOptionalParam req (IncludeTags xs) =
    req `setQuery` toQuery ("include-tags", Just xs)

-- | /Optional Param/ "exclude-tags" - A comma separated list of tags that the joke must not have.
instance HasOptionalParam RandomJoke ExcludeTags where
  applyOptionalParam req (ExcludeTags xs) =
    req `setQuery` toQuery ("exclude-tags", Just xs)

-- | /Optional Param/ "min-rating" - The minimum rating between 0 and 10 the result should have.
instance HasOptionalParam RandomJoke MinRating where
  applyOptionalParam req (MinRating xs) =
    req `setQuery` toQuery ("min-rating", Just xs)

-- | /Optional Param/ "max-length" - The maximum number of letters in the joke.
instance HasOptionalParam RandomJoke MaxLength where
  applyOptionalParam req (MaxLength xs) =
    req `setQuery` toQuery ("max-length", Just xs)
-- | @application/json@
instance Produces RandomJoke MimeJSON


-- *** searchJokes

-- | @GET \/jokes\/search@
-- 
-- Search Jokes
-- 
-- Search for jokes. See https://humorapi.com/docs/#Search-Jokes for more.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
searchJokes 
  :: HumorRequest SearchJokes MimeNoContent InlineResponse200 MimeJSON
searchJokes =
  _mkRequest "GET" ["/jokes/search"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data SearchJokes  

-- | /Optional Param/ "keywords" - A comma separated list of keywords.
instance HasOptionalParam SearchJokes Keywords where
  applyOptionalParam req (Keywords xs) =
    req `setQuery` toQuery ("keywords", Just xs)

-- | /Optional Param/ "include-tags" - A comma separated list of tags that the joke must have.
instance HasOptionalParam SearchJokes IncludeTags where
  applyOptionalParam req (IncludeTags xs) =
    req `setQuery` toQuery ("include-tags", Just xs)

-- | /Optional Param/ "exclude-tags" - A comma separated list of tags that the joke must not have.
instance HasOptionalParam SearchJokes ExcludeTags where
  applyOptionalParam req (ExcludeTags xs) =
    req `setQuery` toQuery ("exclude-tags", Just xs)

-- | /Optional Param/ "number" - The number of results to retrieve between 1 and 10.
instance HasOptionalParam SearchJokes Number where
  applyOptionalParam req (Number xs) =
    req `setQuery` toQuery ("number", Just xs)

-- | /Optional Param/ "min-rating" - The minimum rating between 0 and 10 the result should have.
instance HasOptionalParam SearchJokes MinRating where
  applyOptionalParam req (MinRating xs) =
    req `setQuery` toQuery ("min-rating", Just xs)

-- | /Optional Param/ "max-length" - The maximum number of letters in the joke.
instance HasOptionalParam SearchJokes MaxLength where
  applyOptionalParam req (MaxLength xs) =
    req `setQuery` toQuery ("max-length", Just xs)

-- | /Optional Param/ "offset" - The number of results to skip.
instance HasOptionalParam SearchJokes Offset where
  applyOptionalParam req (Offset xs) =
    req `setQuery` toQuery ("offset", Just xs)
-- | @application/json@
instance Produces SearchJokes MimeJSON


-- *** submitJoke

-- | @POST \/jokes@
-- 
-- Submit Joke
-- 
-- Submit a joke. See https://humorapi.com/docs/#Submit-Joke for more.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
submitJoke 
  :: (Consumes SubmitJoke MimePlainText)
  => HumorRequest SubmitJoke MimePlainText InlineResponse2008 MimeJSON
submitJoke =
  _mkRequest "POST" ["/jokes"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data SubmitJoke 

-- | /Body Param/ "body" - Post the joke as plain text.
instance HasBodyParam SubmitJoke Body 

-- | @text/plain@
instance Consumes SubmitJoke MimePlainText

-- | @application/json@
instance Produces SubmitJoke MimeJSON


-- *** upvoteJoke

-- | @POST \/jokes\/{id}\/upvote@
-- 
-- Upvote a Joke
-- 
-- Upvote a joke. See https://humorapi.com/docs/#Upvote-Joke for more.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
upvoteJoke 
  :: Id -- ^ "id" -  The object's id.
  -> HumorRequest UpvoteJoke MimeNoContent InlineResponse2008 MimeJSON
upvoteJoke (Id id) =
  _mkRequest "POST" ["/jokes/",toPath id,"/upvote"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data UpvoteJoke  
-- | @application/json@
instance Produces UpvoteJoke MimeJSON

