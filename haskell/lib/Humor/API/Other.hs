{-
   Humor API

   Awesome Humor API.

   OpenAPI Version: 3.0.0
   Humor API API version: 1.0
   Contact: mail@humorapi.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Humor.API.Other
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Humor.API.Other where

import Humor.Core
import Humor.MimeTypes
import Humor.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Other

-- *** generateNonsenseWord

-- | @GET \/words\/nonsense\/random@
-- 
-- Generate Nonsense Word
-- 
-- Generate a nonsense word. See https://humorapi.com/docs/#Generate-Nonsense-Word for more.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
generateNonsenseWord
  :: HumorRequest GenerateNonsenseWord MimeNoContent InlineResponse2007 MimeJSON
generateNonsenseWord =
  _mkRequest "GET" ["/words/nonsense/random"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data GenerateNonsenseWord  
-- | @application/json@
instance Produces GenerateNonsenseWord MimeJSON


-- *** insult

-- | @GET \/insult@
-- 
-- Insult
-- 
-- Insult somebody for doing something. See https://humorapi.com/docs/#Insult for more.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
insult
  :: Name -- ^ "name" -  The person's name.
  -> Reason -- ^ "reason" -  The reason for the praise/insult.
  -> HumorRequest Insult MimeNoContent InlineResponse2005 MimeJSON
insult (Name name) (Reason reason) =
  _mkRequest "GET" ["/insult"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `addQuery` toQuery ("name", Just name)
    `addQuery` toQuery ("reason", Just reason)

data Insult  
-- | @application/json@
instance Produces Insult MimeJSON


-- *** praise

-- | @GET \/praise@
-- 
-- Praise
-- 
-- Praise somebody for doing something. See https://humorapi.com/docs/#Praise for more.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
praise
  :: Name -- ^ "name" -  The person's name.
  -> Reason -- ^ "reason" -  The reason for the praise/insult.
  -> HumorRequest Praise MimeNoContent InlineResponse2005 MimeJSON
praise (Name name) (Reason reason) =
  _mkRequest "GET" ["/praise"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `addQuery` toQuery ("name", Just name)
    `addQuery` toQuery ("reason", Just reason)

data Praise  
-- | @application/json@
instance Produces Praise MimeJSON


-- *** rateWord

-- | @GET \/words\/rate@
-- 
-- Rate Word
-- 
-- Rate the funniness of a word. See https://humorapi.com/docs/#Rate-Word for more.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
rateWord
  :: Word -- ^ "word" -  The word to be rated.
  -> HumorRequest RateWord MimeNoContent InlineResponse2006 MimeJSON
rateWord (Word word) =
  _mkRequest "GET" ["/words/rate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `addQuery` toQuery ("word", Just word)

data RateWord  
-- | @application/json@
instance Produces RateWord MimeJSON


-- *** searchGifs

-- | @GET \/gif\/search@
-- 
-- Search Gifs
-- 
-- Search for gifs. See https://humorapi.com/docs/#Search-Gifs for more.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
searchGifs
  :: Query -- ^ "query" -  A search query.
  -> HumorRequest SearchGifs MimeNoContent InlineResponse2001 MimeJSON
searchGifs (Query query) =
  _mkRequest "GET" ["/gif/search"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `addQuery` toQuery ("query", Just query)

data SearchGifs  

-- | /Optional Param/ "number" - The number of results to retrieve between 1 and 10.
instance HasOptionalParam SearchGifs Number where
  applyOptionalParam req (Number xs) =
    req `addQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces SearchGifs MimeJSON

