/**
 * Humor API
 * Awesome Humor API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@humorapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIInline_response_200.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIInline_response_200::OAIInline_response_200(QString json) {
    this->init();
    this->fromJson(json);
}

OAIInline_response_200::OAIInline_response_200() {
    this->init();
}

OAIInline_response_200::~OAIInline_response_200() {

}

void
OAIInline_response_200::init() {
    
    m_jokes_isSet = false;
    m_jokes_isValid = false;
    }

void
OAIInline_response_200::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIInline_response_200::fromJsonObject(QJsonObject json) {
    
    
    m_jokes_isValid = ::OpenAPI::fromJsonValue(jokes, json[QString("jokes")]);
    
}

QString
OAIInline_response_200::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIInline_response_200::asJsonObject() const {
    QJsonObject obj;
	
    if(jokes.size() > 0){
        obj.insert(QString("jokes"), ::OpenAPI::toJsonValue(jokes));
    } 
    return obj;
}


QList<OAIObject>
OAIInline_response_200::getJokes() const {
    return jokes;
}
void
OAIInline_response_200::setJokes(const QList<OAIObject> &jokes) {
    this->jokes = jokes;
    this->m_jokes_isSet = true;
}

bool
OAIInline_response_200::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(jokes.size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAIInline_response_200::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_jokes_isValid && true;
}

}

