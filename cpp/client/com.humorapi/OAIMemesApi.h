/**
 * Humor API
 * Awesome Humor API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@humorapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMemesApi_H
#define OAI_OAIMemesApi_H

#include "OAIHttpRequest.h"

#include "com.humorapi.client.model\OAIInline_response_200_2.h"
#include "com.humorapi.client.model\OAIInline_response_200_3.h"
#include "com.humorapi.client.model\OAIInline_response_200_8.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIMemesApi: public QObject {
    Q_OBJECT

public:
    OAIMemesApi();
    OAIMemesApi(QString host, QString basePath);
    ~OAIMemesApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void downvoteMeme(const qint32& id);
    void randomMeme(const QString& keywords, const bool& keywords_in_image, const QString& media_type, const qint32& number, const qint32& min_rating);
    void searchMemes(const QString& keywords, const bool& keywords_in_image, const QString& media_type, const qint32& number, const qint32& min_rating);
    void upvoteMeme(const qint32& id);
    
private:
    void downvoteMemeCallback (OAIHttpRequestWorker * worker);
    void randomMemeCallback (OAIHttpRequestWorker * worker);
    void searchMemesCallback (OAIHttpRequestWorker * worker);
    void upvoteMemeCallback (OAIHttpRequestWorker * worker);
    
signals:
    void downvoteMemeSignal(OAIInline_response_200_8 summary);
    void randomMemeSignal(OAIInline_response_200_3 summary);
    void searchMemesSignal(OAIInline_response_200_2 summary);
    void upvoteMemeSignal(OAIInline_response_200_8 summary);
    
    void downvoteMemeSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_8 summary);
    void randomMemeSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_3 summary);
    void searchMemesSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_2 summary);
    void upvoteMemeSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_8 summary);
    
    void downvoteMemeSignalE(OAIInline_response_200_8 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void randomMemeSignalE(OAIInline_response_200_3 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchMemesSignalE(OAIInline_response_200_2 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void upvoteMemeSignalE(OAIInline_response_200_8 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void downvoteMemeSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void randomMemeSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchMemesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void upvoteMemeSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
