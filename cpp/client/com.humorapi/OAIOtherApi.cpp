/**
 * Humor API
 * Awesome Humor API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@humorapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOtherApi.h"
#include "OAIHelpers.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIOtherApi::OAIOtherApi() {

}

OAIOtherApi::~OAIOtherApi() {

}

OAIOtherApi::OAIOtherApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAIOtherApi::generateNonsenseWord() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/words/nonsense/random");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIOtherApi::generateNonsenseWordCallback);

    worker->execute(&input);
}

void
OAIOtherApi::generateNonsenseWordCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_7 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit generateNonsenseWordSignal(output);
        emit generateNonsenseWordSignalFull(worker, output);
    } else {
        emit generateNonsenseWordSignalE(output, error_type, error_str);
        emit generateNonsenseWordSignalEFull(worker, error_type, error_str);
    }
}

void
OAIOtherApi::insult(const QString& name, const QString& reason) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/insult");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("name"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(name)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("reason"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(reason)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIOtherApi::insultCallback);

    worker->execute(&input);
}

void
OAIOtherApi::insultCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_5 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit insultSignal(output);
        emit insultSignalFull(worker, output);
    } else {
        emit insultSignalE(output, error_type, error_str);
        emit insultSignalEFull(worker, error_type, error_str);
    }
}

void
OAIOtherApi::praise(const QString& name, const QString& reason) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/praise");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("name"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(name)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("reason"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(reason)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIOtherApi::praiseCallback);

    worker->execute(&input);
}

void
OAIOtherApi::praiseCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_5 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit praiseSignal(output);
        emit praiseSignalFull(worker, output);
    } else {
        emit praiseSignalE(output, error_type, error_str);
        emit praiseSignalEFull(worker, error_type, error_str);
    }
}

void
OAIOtherApi::rateWord(const QString& word) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/words/rate");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("word"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(word)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIOtherApi::rateWordCallback);

    worker->execute(&input);
}

void
OAIOtherApi::rateWordCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_6 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit rateWordSignal(output);
        emit rateWordSignalFull(worker, output);
    } else {
        emit rateWordSignalE(output, error_type, error_str);
        emit rateWordSignalEFull(worker, error_type, error_str);
    }
}

void
OAIOtherApi::searchGifs(const QString& query, const qint32& number) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/gif/search");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("query"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(query)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("number"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(number)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIOtherApi::searchGifsCallback);

    worker->execute(&input);
}

void
OAIOtherApi::searchGifsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_1 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit searchGifsSignal(output);
        emit searchGifsSignalFull(worker, output);
    } else {
        emit searchGifsSignalE(output, error_type, error_str);
        emit searchGifsSignalEFull(worker, error_type, error_str);
    }
}


}
