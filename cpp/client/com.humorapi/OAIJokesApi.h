/**
 * Humor API
 * Awesome Humor API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@humorapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIJokesApi_H
#define OAI_OAIJokesApi_H

#include "OAIHttpRequest.h"

#include "com.humorapi.client.model\OAIInline_response_200.h"
#include "com.humorapi.client.model\OAIInline_response_200_4.h"
#include "com.humorapi.client.model\OAIInline_response_200_8.h"
#include "com.humorapi.client.model\OAIInline_response_200_9.h"
#include "com.humorapi.client.model\OAINumber.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIJokesApi: public QObject {
    Q_OBJECT

public:
    OAIJokesApi();
    OAIJokesApi(QString host, QString basePath);
    ~OAIJokesApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void analyzeJoke(const QString& body);
    void downvoteJoke(const qint32& id);
    void randomJoke(const QString& keywords, const QString& include_tags, const QString& exclude_tags, const qint32& min_rating, const qint32& max_length);
    void searchJokes(const QString& keywords, const QString& include_tags, const QString& exclude_tags, const qint32& number, const qint32& min_rating, const qint32& max_length, const OAINumber& offset);
    void submitJoke(const QString& body);
    void upvoteJoke(const qint32& id);
    
private:
    void analyzeJokeCallback (OAIHttpRequestWorker * worker);
    void downvoteJokeCallback (OAIHttpRequestWorker * worker);
    void randomJokeCallback (OAIHttpRequestWorker * worker);
    void searchJokesCallback (OAIHttpRequestWorker * worker);
    void submitJokeCallback (OAIHttpRequestWorker * worker);
    void upvoteJokeCallback (OAIHttpRequestWorker * worker);
    
signals:
    void analyzeJokeSignal(OAIInline_response_200_9 summary);
    void downvoteJokeSignal(OAIInline_response_200_8 summary);
    void randomJokeSignal(OAIInline_response_200_4 summary);
    void searchJokesSignal(OAIInline_response_200 summary);
    void submitJokeSignal(OAIInline_response_200_8 summary);
    void upvoteJokeSignal(OAIInline_response_200_8 summary);
    
    void analyzeJokeSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_9 summary);
    void downvoteJokeSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_8 summary);
    void randomJokeSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_4 summary);
    void searchJokesSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200 summary);
    void submitJokeSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_8 summary);
    void upvoteJokeSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_8 summary);
    
    void analyzeJokeSignalE(OAIInline_response_200_9 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void downvoteJokeSignalE(OAIInline_response_200_8 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void randomJokeSignalE(OAIInline_response_200_4 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchJokesSignalE(OAIInline_response_200 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void submitJokeSignalE(OAIInline_response_200_8 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void upvoteJokeSignalE(OAIInline_response_200_8 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void analyzeJokeSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void downvoteJokeSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void randomJokeSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchJokesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void submitJokeSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void upvoteJokeSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
