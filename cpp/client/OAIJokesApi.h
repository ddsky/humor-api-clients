/**
 * Humor API
 * Awesome Humor API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@humorapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIJokesApi_H
#define OAI_OAIJokesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAnalyze_joke_200_response.h"
#include "OAIRandom_joke_200_response.h"
#include "OAISearch_jokes_200_response.h"
#include "OAISubmit_joke_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIJokesApi : public QObject {
    Q_OBJECT

public:
    OAIJokesApi(const int timeOut = 0);
    ~OAIJokesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  body QString [optional]
    */
    void analyzeJoke(const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    */
    void downvoteJoke(const qint32 &id);

    /**
    * @param[in]  keywords QString [optional]
    * @param[in]  include_tags QString [optional]
    * @param[in]  exclude_tags QString [optional]
    * @param[in]  min_rating qint32 [optional]
    * @param[in]  max_length qint32 [optional]
    */
    void randomJoke(const ::OpenAPI::OptionalParam<QString> &keywords = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &min_rating = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_length = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  keywords QString [optional]
    * @param[in]  include_tags QString [optional]
    * @param[in]  exclude_tags QString [optional]
    * @param[in]  number qint32 [optional]
    * @param[in]  min_rating qint32 [optional]
    * @param[in]  max_length qint32 [optional]
    * @param[in]  offset double [optional]
    */
    void searchJokes(const ::OpenAPI::OptionalParam<QString> &keywords = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &min_rating = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &offset = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  body QString [optional]
    */
    void submitJoke(const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    */
    void upvoteJoke(const qint32 &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void analyzeJokeCallback(OAIHttpRequestWorker *worker);
    void downvoteJokeCallback(OAIHttpRequestWorker *worker);
    void randomJokeCallback(OAIHttpRequestWorker *worker);
    void searchJokesCallback(OAIHttpRequestWorker *worker);
    void submitJokeCallback(OAIHttpRequestWorker *worker);
    void upvoteJokeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void analyzeJokeSignal(OAIAnalyze_joke_200_response summary);
    void downvoteJokeSignal(OAISubmit_joke_200_response summary);
    void randomJokeSignal(OAIRandom_joke_200_response summary);
    void searchJokesSignal(OAISearch_jokes_200_response summary);
    void submitJokeSignal(OAISubmit_joke_200_response summary);
    void upvoteJokeSignal(OAISubmit_joke_200_response summary);

    void analyzeJokeSignalFull(OAIHttpRequestWorker *worker, OAIAnalyze_joke_200_response summary);
    void downvoteJokeSignalFull(OAIHttpRequestWorker *worker, OAISubmit_joke_200_response summary);
    void randomJokeSignalFull(OAIHttpRequestWorker *worker, OAIRandom_joke_200_response summary);
    void searchJokesSignalFull(OAIHttpRequestWorker *worker, OAISearch_jokes_200_response summary);
    void submitJokeSignalFull(OAIHttpRequestWorker *worker, OAISubmit_joke_200_response summary);
    void upvoteJokeSignalFull(OAIHttpRequestWorker *worker, OAISubmit_joke_200_response summary);

    Q_DECL_DEPRECATED_X("Use analyzeJokeSignalError() instead")
    void analyzeJokeSignalE(OAIAnalyze_joke_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyzeJokeSignalError(OAIAnalyze_joke_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downvoteJokeSignalError() instead")
    void downvoteJokeSignalE(OAISubmit_joke_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void downvoteJokeSignalError(OAISubmit_joke_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use randomJokeSignalError() instead")
    void randomJokeSignalE(OAIRandom_joke_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void randomJokeSignalError(OAIRandom_joke_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchJokesSignalError() instead")
    void searchJokesSignalE(OAISearch_jokes_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchJokesSignalError(OAISearch_jokes_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use submitJokeSignalError() instead")
    void submitJokeSignalE(OAISubmit_joke_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void submitJokeSignalError(OAISubmit_joke_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use upvoteJokeSignalError() instead")
    void upvoteJokeSignalE(OAISubmit_joke_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void upvoteJokeSignalError(OAISubmit_joke_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use analyzeJokeSignalErrorFull() instead")
    void analyzeJokeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyzeJokeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downvoteJokeSignalErrorFull() instead")
    void downvoteJokeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downvoteJokeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use randomJokeSignalErrorFull() instead")
    void randomJokeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void randomJokeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchJokesSignalErrorFull() instead")
    void searchJokesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchJokesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use submitJokeSignalErrorFull() instead")
    void submitJokeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void submitJokeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use upvoteJokeSignalErrorFull() instead")
    void upvoteJokeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void upvoteJokeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
