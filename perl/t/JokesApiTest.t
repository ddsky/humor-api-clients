=begin comment

Humor API

Awesome Humor API.

The version of the OpenAPI document: 1.0
Contact: mail@humorapi.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator
# Please update the test cases below to test the API endpoints.
# Ref: https://openapi-generator.tech
#
use Test::More;
use Test::Exception;

use lib 'lib';
use strict;
use warnings;

use_ok('WWW::OpenAPIClient::JokesApi');

my $api = WWW::OpenAPIClient::JokesApi->new();
isa_ok($api, 'WWW::OpenAPIClient::JokesApi');

#
# analyze_joke test
#
# uncomment below and update the test
#my $analyze_joke_body = undef; # replace NULL with a proper value
#my $analyze_joke_result = $api->analyze_joke(body => $analyze_joke_body);

#
# downvote_joke test
#
# uncomment below and update the test
#my $downvote_joke_id = undef; # replace NULL with a proper value
#my $downvote_joke_result = $api->downvote_joke(id => $downvote_joke_id);

#
# random_joke test
#
# uncomment below and update the test
#my $random_joke_keywords = undef; # replace NULL with a proper value
#my $random_joke_include_tags = undef; # replace NULL with a proper value
#my $random_joke_exclude_tags = undef; # replace NULL with a proper value
#my $random_joke_min_rating = undef; # replace NULL with a proper value
#my $random_joke_max_length = undef; # replace NULL with a proper value
#my $random_joke_result = $api->random_joke(keywords => $random_joke_keywords, include_tags => $random_joke_include_tags, exclude_tags => $random_joke_exclude_tags, min_rating => $random_joke_min_rating, max_length => $random_joke_max_length);

#
# search_jokes test
#
# uncomment below and update the test
#my $search_jokes_keywords = undef; # replace NULL with a proper value
#my $search_jokes_include_tags = undef; # replace NULL with a proper value
#my $search_jokes_exclude_tags = undef; # replace NULL with a proper value
#my $search_jokes_number = undef; # replace NULL with a proper value
#my $search_jokes_min_rating = undef; # replace NULL with a proper value
#my $search_jokes_max_length = undef; # replace NULL with a proper value
#my $search_jokes_offset = undef; # replace NULL with a proper value
#my $search_jokes_result = $api->search_jokes(keywords => $search_jokes_keywords, include_tags => $search_jokes_include_tags, exclude_tags => $search_jokes_exclude_tags, number => $search_jokes_number, min_rating => $search_jokes_min_rating, max_length => $search_jokes_max_length, offset => $search_jokes_offset);

#
# submit_joke test
#
# uncomment below and update the test
#my $submit_joke_body = undef; # replace NULL with a proper value
#my $submit_joke_result = $api->submit_joke(body => $submit_joke_body);

#
# upvote_joke test
#
# uncomment below and update the test
#my $upvote_joke_id = undef; # replace NULL with a proper value
#my $upvote_joke_result = $api->upvote_joke(id => $upvote_joke_id);


done_testing();
