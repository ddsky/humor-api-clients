=begin comment

Humor API

Awesome Humor API.

The version of the OpenAPI document: 1.0
Contact: mail@humorapi.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::MemesApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# downvote_meme
#
# Downvote a Meme
# 
# @param int $id The object&#39;s id. (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The object&#39;s id.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'downvote_meme' } = { 
        summary => 'Downvote a Meme',
        params => $params,
        returns => 'InlineResponse2008',
        };
}
# @return InlineResponse2008
#
sub downvote_meme {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling downvote_meme");
    }

    # parse inputs
    my $_resource_path = '/memes/{id}/downvote';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2008', $response);
    return $_response_object;
}

#
# random_meme
#
# Random Meme
# 
# @param string $keywords A comma separated list of keywords. (optional)
# @param boolean $keywords_in_image Whether the keywords should be found in the meme&#39;s image. (optional)
# @param string $media_type The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)
# @param int $number The number of results to retrieve between 1 and 10. (optional)
# @param int $min_rating The minimum rating between 0 and 10 the result should have. (optional)
{
    my $params = {
    'keywords' => {
        data_type => 'string',
        description => 'A comma separated list of keywords.',
        required => '0',
    },
    'keywords_in_image' => {
        data_type => 'boolean',
        description => 'Whether the keywords should be found in the meme&#39;s image.',
        required => '0',
    },
    'media_type' => {
        data_type => 'string',
        description => 'The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;.',
        required => '0',
    },
    'number' => {
        data_type => 'int',
        description => 'The number of results to retrieve between 1 and 10.',
        required => '0',
    },
    'min_rating' => {
        data_type => 'int',
        description => 'The minimum rating between 0 and 10 the result should have.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'random_meme' } = { 
        summary => 'Random Meme',
        params => $params,
        returns => 'InlineResponse2003',
        };
}
# @return InlineResponse2003
#
sub random_meme {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/memes/random';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'keywords'}) {
        $query_params->{'keywords'} = $self->{api_client}->to_query_value($args{'keywords'});
    }

    # query params
    if ( exists $args{'keywords_in_image'}) {
        $query_params->{'keywords-in-image'} = $self->{api_client}->to_query_value($args{'keywords_in_image'});
    }

    # query params
    if ( exists $args{'media_type'}) {
        $query_params->{'media-type'} = $self->{api_client}->to_query_value($args{'media_type'});
    }

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    # query params
    if ( exists $args{'min_rating'}) {
        $query_params->{'min-rating'} = $self->{api_client}->to_query_value($args{'min_rating'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2003', $response);
    return $_response_object;
}

#
# search_memes
#
# Search Memes
# 
# @param string $keywords A comma separated list of keywords. (optional)
# @param boolean $keywords_in_image Whether the keywords should be found in the meme&#39;s image. (optional)
# @param string $media_type The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;. (optional)
# @param int $number The number of results to retrieve between 1 and 10. (optional)
# @param int $min_rating The minimum rating between 0 and 10 the result should have. (optional)
{
    my $params = {
    'keywords' => {
        data_type => 'string',
        description => 'A comma separated list of keywords.',
        required => '0',
    },
    'keywords_in_image' => {
        data_type => 'boolean',
        description => 'Whether the keywords should be found in the meme&#39;s image.',
        required => '0',
    },
    'media_type' => {
        data_type => 'string',
        description => 'The type of the content. Can be either &#39;image&#39; or &#39;video&#39; or specific formats such as &#39;jpg&#39;, &#39;png&#39;, &#39;gif&#39;, or &#39;mp4&#39;.',
        required => '0',
    },
    'number' => {
        data_type => 'int',
        description => 'The number of results to retrieve between 1 and 10.',
        required => '0',
    },
    'min_rating' => {
        data_type => 'int',
        description => 'The minimum rating between 0 and 10 the result should have.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_memes' } = { 
        summary => 'Search Memes',
        params => $params,
        returns => 'InlineResponse2002',
        };
}
# @return InlineResponse2002
#
sub search_memes {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/memes/search';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'keywords'}) {
        $query_params->{'keywords'} = $self->{api_client}->to_query_value($args{'keywords'});
    }

    # query params
    if ( exists $args{'keywords_in_image'}) {
        $query_params->{'keywords-in-image'} = $self->{api_client}->to_query_value($args{'keywords_in_image'});
    }

    # query params
    if ( exists $args{'media_type'}) {
        $query_params->{'media-type'} = $self->{api_client}->to_query_value($args{'media_type'});
    }

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    # query params
    if ( exists $args{'min_rating'}) {
        $query_params->{'min-rating'} = $self->{api_client}->to_query_value($args{'min_rating'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2002', $response);
    return $_response_object;
}

#
# upvote_meme
#
# Upvote a Meme
# 
# @param int $id The object&#39;s id. (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The object&#39;s id.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'upvote_meme' } = { 
        summary => 'Upvote a Meme',
        params => $params,
        returns => 'InlineResponse2008',
        };
}
# @return InlineResponse2008
#
sub upvote_meme {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling upvote_meme");
    }

    # parse inputs
    my $_resource_path = '/memes/{id}/upvote';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2008', $response);
    return $_response_object;
}

1;
