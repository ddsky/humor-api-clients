=begin comment

Humor API

Awesome Humor API.

The version of the OpenAPI document: 1.0
Contact: mail@humorapi.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::OtherApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# generate_nonsense_word
#
# Generate Nonsense Word
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'generate_nonsense_word' } = {
        summary => 'Generate Nonsense Word',
        params => $params,
        returns => 'InlineResponse2007',
        };
}
# @return InlineResponse2007
#
sub generate_nonsense_word {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/words/nonsense/random';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2007', $response);
    return $_response_object;
}

#
# insult
#
# Insult
#
# @param string $name The person&#39;s name. (required)
# @param string $reason The reason for the praise/insult. (required)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'The person&#39;s name.',
        required => '1',
    },
    'reason' => {
        data_type => 'string',
        description => 'The reason for the praise/insult.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'insult' } = {
        summary => 'Insult',
        params => $params,
        returns => 'InlineResponse2005',
        };
}
# @return InlineResponse2005
#
sub insult {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling insult");
    }

    # verify the required parameter 'reason' is set
    unless (exists $args{'reason'}) {
      croak("Missing the required parameter 'reason' when calling insult");
    }

    # parse inputs
    my $_resource_path = '/insult';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'reason'}) {
        $query_params->{'reason'} = $self->{api_client}->to_query_value($args{'reason'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2005', $response);
    return $_response_object;
}

#
# praise
#
# Praise
#
# @param string $name The person&#39;s name. (required)
# @param string $reason The reason for the praise/insult. (required)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'The person&#39;s name.',
        required => '1',
    },
    'reason' => {
        data_type => 'string',
        description => 'The reason for the praise/insult.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'praise' } = {
        summary => 'Praise',
        params => $params,
        returns => 'InlineResponse2005',
        };
}
# @return InlineResponse2005
#
sub praise {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling praise");
    }

    # verify the required parameter 'reason' is set
    unless (exists $args{'reason'}) {
      croak("Missing the required parameter 'reason' when calling praise");
    }

    # parse inputs
    my $_resource_path = '/praise';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'reason'}) {
        $query_params->{'reason'} = $self->{api_client}->to_query_value($args{'reason'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2005', $response);
    return $_response_object;
}

#
# rate_word
#
# Rate Word
#
# @param string $word The word to be rated. (required)
{
    my $params = {
    'word' => {
        data_type => 'string',
        description => 'The word to be rated.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'rate_word' } = {
        summary => 'Rate Word',
        params => $params,
        returns => 'InlineResponse2006',
        };
}
# @return InlineResponse2006
#
sub rate_word {
    my ($self, %args) = @_;

    # verify the required parameter 'word' is set
    unless (exists $args{'word'}) {
      croak("Missing the required parameter 'word' when calling rate_word");
    }

    # parse inputs
    my $_resource_path = '/words/rate';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'word'}) {
        $query_params->{'word'} = $self->{api_client}->to_query_value($args{'word'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2006', $response);
    return $_response_object;
}

#
# search_gifs
#
# Search Gifs
#
# @param string $query A search query. (required)
# @param int $number The number of results to retrieve between 1 and 10. (optional)
{
    my $params = {
    'query' => {
        data_type => 'string',
        description => 'A search query.',
        required => '1',
    },
    'number' => {
        data_type => 'int',
        description => 'The number of results to retrieve between 1 and 10.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_gifs' } = {
        summary => 'Search Gifs',
        params => $params,
        returns => 'InlineResponse2001',
        };
}
# @return InlineResponse2001
#
sub search_gifs {
    my ($self, %args) = @_;

    # verify the required parameter 'query' is set
    unless (exists $args{'query'}) {
      croak("Missing the required parameter 'query' when calling search_gifs");
    }

    # parse inputs
    my $_resource_path = '/gif/search';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2001', $response);
    return $_response_object;
}

1;
