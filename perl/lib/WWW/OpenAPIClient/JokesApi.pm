=begin comment

Humor API

Awesome Humor API.

The version of the OpenAPI document: 1.0
Contact: mail@humorapi.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::JokesApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# analyze_joke
#
# Analyze Joke
#
# @param string $body Post the joke as plain text. (optional)
{
    my $params = {
    'body' => {
        data_type => 'string',
        description => 'Post the joke as plain text.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'analyze_joke' } = {
        summary => 'Analyze Joke',
        params => $params,
        returns => 'AnalyzeJoke200Response',
        };
}
# @return AnalyzeJoke200Response
#
sub analyze_joke {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/jokes/analyze';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('text/plain');

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AnalyzeJoke200Response', $response);
    return $_response_object;
}

#
# downvote_joke
#
# Downvote a Joke
#
# @param int $id The object&#39;s id. (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The object&#39;s id.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'downvote_joke' } = {
        summary => 'Downvote a Joke',
        params => $params,
        returns => 'SubmitJoke200Response',
        };
}
# @return SubmitJoke200Response
#
sub downvote_joke {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling downvote_joke");
    }

    # parse inputs
    my $_resource_path = '/jokes/{id}/downvote';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SubmitJoke200Response', $response);
    return $_response_object;
}

#
# random_joke
#
# Random Joke
#
# @param string $keywords A comma separated list of keywords. (optional)
# @param string $include_tags A comma separated list of tags that the joke must have. (optional)
# @param string $exclude_tags A comma separated list of tags that the joke must not have. (optional)
# @param int $min_rating The minimum rating between 0 and 10 the result should have. (optional)
# @param int $max_length The maximum number of letters in the joke. (optional)
{
    my $params = {
    'keywords' => {
        data_type => 'string',
        description => 'A comma separated list of keywords.',
        required => '0',
    },
    'include_tags' => {
        data_type => 'string',
        description => 'A comma separated list of tags that the joke must have.',
        required => '0',
    },
    'exclude_tags' => {
        data_type => 'string',
        description => 'A comma separated list of tags that the joke must not have.',
        required => '0',
    },
    'min_rating' => {
        data_type => 'int',
        description => 'The minimum rating between 0 and 10 the result should have.',
        required => '0',
    },
    'max_length' => {
        data_type => 'int',
        description => 'The maximum number of letters in the joke.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'random_joke' } = {
        summary => 'Random Joke',
        params => $params,
        returns => 'RandomJoke200Response',
        };
}
# @return RandomJoke200Response
#
sub random_joke {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/jokes/random';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'keywords'}) {
        $query_params->{'keywords'} = $self->{api_client}->to_query_value($args{'keywords'});
    }

    # query params
    if ( exists $args{'include_tags'}) {
        $query_params->{'include-tags'} = $self->{api_client}->to_query_value($args{'include_tags'});
    }

    # query params
    if ( exists $args{'exclude_tags'}) {
        $query_params->{'exclude-tags'} = $self->{api_client}->to_query_value($args{'exclude_tags'});
    }

    # query params
    if ( exists $args{'min_rating'}) {
        $query_params->{'min-rating'} = $self->{api_client}->to_query_value($args{'min_rating'});
    }

    # query params
    if ( exists $args{'max_length'}) {
        $query_params->{'max-length'} = $self->{api_client}->to_query_value($args{'max_length'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RandomJoke200Response', $response);
    return $_response_object;
}

#
# search_jokes
#
# Search Jokes
#
# @param string $keywords A comma separated list of keywords. (optional)
# @param string $include_tags A comma separated list of tags that the joke must have. (optional)
# @param string $exclude_tags A comma separated list of tags that the joke must not have. (optional)
# @param int $number The number of results to retrieve between 1 and 10. (optional)
# @param int $min_rating The minimum rating between 0 and 10 the result should have. (optional)
# @param int $max_length The maximum number of letters in the joke. (optional)
# @param double $offset The number of results to skip. (optional)
{
    my $params = {
    'keywords' => {
        data_type => 'string',
        description => 'A comma separated list of keywords.',
        required => '0',
    },
    'include_tags' => {
        data_type => 'string',
        description => 'A comma separated list of tags that the joke must have.',
        required => '0',
    },
    'exclude_tags' => {
        data_type => 'string',
        description => 'A comma separated list of tags that the joke must not have.',
        required => '0',
    },
    'number' => {
        data_type => 'int',
        description => 'The number of results to retrieve between 1 and 10.',
        required => '0',
    },
    'min_rating' => {
        data_type => 'int',
        description => 'The minimum rating between 0 and 10 the result should have.',
        required => '0',
    },
    'max_length' => {
        data_type => 'int',
        description => 'The maximum number of letters in the joke.',
        required => '0',
    },
    'offset' => {
        data_type => 'double',
        description => 'The number of results to skip.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_jokes' } = {
        summary => 'Search Jokes',
        params => $params,
        returns => 'SearchJokes200Response',
        };
}
# @return SearchJokes200Response
#
sub search_jokes {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/jokes/search';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'keywords'}) {
        $query_params->{'keywords'} = $self->{api_client}->to_query_value($args{'keywords'});
    }

    # query params
    if ( exists $args{'include_tags'}) {
        $query_params->{'include-tags'} = $self->{api_client}->to_query_value($args{'include_tags'});
    }

    # query params
    if ( exists $args{'exclude_tags'}) {
        $query_params->{'exclude-tags'} = $self->{api_client}->to_query_value($args{'exclude_tags'});
    }

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    # query params
    if ( exists $args{'min_rating'}) {
        $query_params->{'min-rating'} = $self->{api_client}->to_query_value($args{'min_rating'});
    }

    # query params
    if ( exists $args{'max_length'}) {
        $query_params->{'max-length'} = $self->{api_client}->to_query_value($args{'max_length'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SearchJokes200Response', $response);
    return $_response_object;
}

#
# submit_joke
#
# Submit Joke
#
# @param string $body Post the joke as plain text. (optional)
{
    my $params = {
    'body' => {
        data_type => 'string',
        description => 'Post the joke as plain text.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'submit_joke' } = {
        summary => 'Submit Joke',
        params => $params,
        returns => 'SubmitJoke200Response',
        };
}
# @return SubmitJoke200Response
#
sub submit_joke {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/jokes';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('text/plain');

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SubmitJoke200Response', $response);
    return $_response_object;
}

#
# upvote_joke
#
# Upvote a Joke
#
# @param int $id The object&#39;s id. (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The object&#39;s id.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'upvote_joke' } = {
        summary => 'Upvote a Joke',
        params => $params,
        returns => 'SubmitJoke200Response',
        };
}
# @return SubmitJoke200Response
#
sub upvote_joke {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling upvote_joke");
    }

    # parse inputs
    my $_resource_path = '/jokes/{id}/upvote';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SubmitJoke200Response', $response);
    return $_response_object;
}

1;
