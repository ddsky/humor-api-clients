{-
   Humor API
   Awesome Humor API.

   The version of the OpenAPI document: 1.0
   Contact: mail@humorapi.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Data exposing
    ( InlineResponse200
    , InlineResponse2001
    , InlineResponse2002
    , InlineResponse2003
    , InlineResponse2004
    , InlineResponse2005
    , InlineResponse2006
    , InlineResponse2007
    , InlineResponse2008
    , InlineResponse2009
    , encodeInlineResponse200
    , encodeInlineResponse2001
    , encodeInlineResponse2002
    , encodeInlineResponse2003
    , encodeInlineResponse2004
    , encodeInlineResponse2005
    , encodeInlineResponse2006
    , encodeInlineResponse2007
    , encodeInlineResponse2008
    , encodeInlineResponse2009
    , inlineResponse200Decoder
    , inlineResponse2001Decoder
    , inlineResponse2002Decoder
    , inlineResponse2003Decoder
    , inlineResponse2004Decoder
    , inlineResponse2005Decoder
    , inlineResponse2006Decoder
    , inlineResponse2007Decoder
    , inlineResponse2008Decoder
    , inlineResponse2009Decoder
    )

import Api
import Dict
import Json.Decode
import Json.Encode


-- MODEL


type alias InlineResponse200 =
    { jokes : List (Maybe Object)
}


type alias InlineResponse2001 =
    { images : List (Maybe Object)
}


type alias InlineResponse2002 =
    { memes : List (Maybe Object)
}


type alias InlineResponse2003 =
    { id : Int
, url : String
, type_ : String
}


type alias InlineResponse2004 =
    { id : Int
, joke : String
}


type alias InlineResponse2005 =
    { text : String
}


type alias InlineResponse2006 =
    { rating : Float
}


type alias InlineResponse2007 =
    { word : String
, rating : Float
}


type alias InlineResponse2008 =
    { message : String
}


type alias InlineResponse2009 =
    { joke : String
, tags : List (String)
}


-- ENCODER


encodeInlineResponse200 : InlineResponse200 -> Json.Encode.Value
encodeInlineResponse200 =
    encodeObject << encodeInlineResponse200Pairs


encodeInlineResponse200WithTag : ( String, String ) -> InlineResponse200 -> Json.Encode.Value
encodeInlineResponse200WithTag (tagField, tag) model =
    encodeObject (encodeInlineResponse200Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeInlineResponse200Pairs : InlineResponse200 -> List EncodedField
encodeInlineResponse200Pairs model =
    let
        pairs =
            [ encode "jokes" (Json.Encode.list encodeObject) model.jokes
            ]
    in
    pairs


encodeInlineResponse2001 : InlineResponse2001 -> Json.Encode.Value
encodeInlineResponse2001 =
    encodeObject << encodeInlineResponse2001Pairs


encodeInlineResponse2001WithTag : ( String, String ) -> InlineResponse2001 -> Json.Encode.Value
encodeInlineResponse2001WithTag (tagField, tag) model =
    encodeObject (encodeInlineResponse2001Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeInlineResponse2001Pairs : InlineResponse2001 -> List EncodedField
encodeInlineResponse2001Pairs model =
    let
        pairs =
            [ encode "images" (Json.Encode.list encodeObject) model.images
            ]
    in
    pairs


encodeInlineResponse2002 : InlineResponse2002 -> Json.Encode.Value
encodeInlineResponse2002 =
    encodeObject << encodeInlineResponse2002Pairs


encodeInlineResponse2002WithTag : ( String, String ) -> InlineResponse2002 -> Json.Encode.Value
encodeInlineResponse2002WithTag (tagField, tag) model =
    encodeObject (encodeInlineResponse2002Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeInlineResponse2002Pairs : InlineResponse2002 -> List EncodedField
encodeInlineResponse2002Pairs model =
    let
        pairs =
            [ encode "memes" (Json.Encode.list encodeObject) model.memes
            ]
    in
    pairs


encodeInlineResponse2003 : InlineResponse2003 -> Json.Encode.Value
encodeInlineResponse2003 =
    encodeObject << encodeInlineResponse2003Pairs


encodeInlineResponse2003WithTag : ( String, String ) -> InlineResponse2003 -> Json.Encode.Value
encodeInlineResponse2003WithTag (tagField, tag) model =
    encodeObject (encodeInlineResponse2003Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeInlineResponse2003Pairs : InlineResponse2003 -> List EncodedField
encodeInlineResponse2003Pairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "url" Json.Encode.string model.url
            , encode "type" Json.Encode.string model.type_
            ]
    in
    pairs


encodeInlineResponse2004 : InlineResponse2004 -> Json.Encode.Value
encodeInlineResponse2004 =
    encodeObject << encodeInlineResponse2004Pairs


encodeInlineResponse2004WithTag : ( String, String ) -> InlineResponse2004 -> Json.Encode.Value
encodeInlineResponse2004WithTag (tagField, tag) model =
    encodeObject (encodeInlineResponse2004Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeInlineResponse2004Pairs : InlineResponse2004 -> List EncodedField
encodeInlineResponse2004Pairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "joke" Json.Encode.string model.joke
            ]
    in
    pairs


encodeInlineResponse2005 : InlineResponse2005 -> Json.Encode.Value
encodeInlineResponse2005 =
    encodeObject << encodeInlineResponse2005Pairs


encodeInlineResponse2005WithTag : ( String, String ) -> InlineResponse2005 -> Json.Encode.Value
encodeInlineResponse2005WithTag (tagField, tag) model =
    encodeObject (encodeInlineResponse2005Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeInlineResponse2005Pairs : InlineResponse2005 -> List EncodedField
encodeInlineResponse2005Pairs model =
    let
        pairs =
            [ encode "text" Json.Encode.string model.text
            ]
    in
    pairs


encodeInlineResponse2006 : InlineResponse2006 -> Json.Encode.Value
encodeInlineResponse2006 =
    encodeObject << encodeInlineResponse2006Pairs


encodeInlineResponse2006WithTag : ( String, String ) -> InlineResponse2006 -> Json.Encode.Value
encodeInlineResponse2006WithTag (tagField, tag) model =
    encodeObject (encodeInlineResponse2006Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeInlineResponse2006Pairs : InlineResponse2006 -> List EncodedField
encodeInlineResponse2006Pairs model =
    let
        pairs =
            [ encode "rating" Json.Encode.float model.rating
            ]
    in
    pairs


encodeInlineResponse2007 : InlineResponse2007 -> Json.Encode.Value
encodeInlineResponse2007 =
    encodeObject << encodeInlineResponse2007Pairs


encodeInlineResponse2007WithTag : ( String, String ) -> InlineResponse2007 -> Json.Encode.Value
encodeInlineResponse2007WithTag (tagField, tag) model =
    encodeObject (encodeInlineResponse2007Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeInlineResponse2007Pairs : InlineResponse2007 -> List EncodedField
encodeInlineResponse2007Pairs model =
    let
        pairs =
            [ encode "word" Json.Encode.string model.word
            , encode "rating" Json.Encode.float model.rating
            ]
    in
    pairs


encodeInlineResponse2008 : InlineResponse2008 -> Json.Encode.Value
encodeInlineResponse2008 =
    encodeObject << encodeInlineResponse2008Pairs


encodeInlineResponse2008WithTag : ( String, String ) -> InlineResponse2008 -> Json.Encode.Value
encodeInlineResponse2008WithTag (tagField, tag) model =
    encodeObject (encodeInlineResponse2008Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeInlineResponse2008Pairs : InlineResponse2008 -> List EncodedField
encodeInlineResponse2008Pairs model =
    let
        pairs =
            [ encode "message" Json.Encode.string model.message
            ]
    in
    pairs


encodeInlineResponse2009 : InlineResponse2009 -> Json.Encode.Value
encodeInlineResponse2009 =
    encodeObject << encodeInlineResponse2009Pairs


encodeInlineResponse2009WithTag : ( String, String ) -> InlineResponse2009 -> Json.Encode.Value
encodeInlineResponse2009WithTag (tagField, tag) model =
    encodeObject (encodeInlineResponse2009Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeInlineResponse2009Pairs : InlineResponse2009 -> List EncodedField
encodeInlineResponse2009Pairs model =
    let
        pairs =
            [ encode "joke" Json.Encode.string model.joke
            , encode "tags" (Json.Encode.list Json.Encode.string) model.tags
            ]
    in
    pairs


-- DECODER


inlineResponse200Decoder : Json.Decode.Decoder InlineResponse200
inlineResponse200Decoder =
    Json.Decode.succeed InlineResponse200
        |> decode "jokes" (Json.Decode.list objectDecoder) 


inlineResponse2001Decoder : Json.Decode.Decoder InlineResponse2001
inlineResponse2001Decoder =
    Json.Decode.succeed InlineResponse2001
        |> decode "images" (Json.Decode.list objectDecoder) 


inlineResponse2002Decoder : Json.Decode.Decoder InlineResponse2002
inlineResponse2002Decoder =
    Json.Decode.succeed InlineResponse2002
        |> decode "memes" (Json.Decode.list objectDecoder) 


inlineResponse2003Decoder : Json.Decode.Decoder InlineResponse2003
inlineResponse2003Decoder =
    Json.Decode.succeed InlineResponse2003
        |> decode "id" Json.Decode.int 
        |> decode "url" Json.Decode.string 
        |> decode "type" Json.Decode.string 


inlineResponse2004Decoder : Json.Decode.Decoder InlineResponse2004
inlineResponse2004Decoder =
    Json.Decode.succeed InlineResponse2004
        |> decode "id" Json.Decode.int 
        |> decode "joke" Json.Decode.string 


inlineResponse2005Decoder : Json.Decode.Decoder InlineResponse2005
inlineResponse2005Decoder =
    Json.Decode.succeed InlineResponse2005
        |> decode "text" Json.Decode.string 


inlineResponse2006Decoder : Json.Decode.Decoder InlineResponse2006
inlineResponse2006Decoder =
    Json.Decode.succeed InlineResponse2006
        |> decode "rating" Json.Decode.float 


inlineResponse2007Decoder : Json.Decode.Decoder InlineResponse2007
inlineResponse2007Decoder =
    Json.Decode.succeed InlineResponse2007
        |> decode "word" Json.Decode.string 
        |> decode "rating" Json.Decode.float 


inlineResponse2008Decoder : Json.Decode.Decoder InlineResponse2008
inlineResponse2008Decoder =
    Json.Decode.succeed InlineResponse2008
        |> decode "message" Json.Decode.string 


inlineResponse2009Decoder : Json.Decode.Decoder InlineResponse2009
inlineResponse2009Decoder =
    Json.Decode.succeed InlineResponse2009
        |> decode "joke" Json.Decode.string 
        |> decode "tags" (Json.Decode.list Json.Decode.string) 




-- HELPER


type alias EncodedField =
    Maybe ( String, Json.Encode.Value )


encodeObject : List EncodedField -> Json.Encode.Value
encodeObject =
    Json.Encode.object << List.filterMap identity


encode : String -> (a -> Json.Encode.Value) -> a -> EncodedField
encode key encoder value =
    Just ( key, encoder value )


encodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
encodeNullable key encoder value =
    Just ( key, Maybe.withDefault Json.Encode.null (Maybe.map encoder value) )


maybeEncode : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncode key encoder =
    Maybe.map (Tuple.pair key << encoder)


maybeEncodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncodeNullable =
    encodeNullable


decode : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decode key decoder =
    decodeChain (Json.Decode.field key decoder)


decodeLazy : (a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeLazy f key decoder =
    decodeChainLazy f (Json.Decode.field key decoder)


decodeNullable : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
decodeNullable key decoder =
    decodeChain (maybeField key decoder Nothing)


decodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeNullableLazy f key decoder =
    decodeChainLazy f (maybeField key decoder Nothing)


maybeDecode : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecode key decoder fallback =
    -- let's be kind to null-values as well
    decodeChain (maybeField key decoder fallback)


maybeDecodeLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeLazy f key decoder fallback =
    -- let's be kind to null-values as well
    decodeChainLazy f (maybeField key decoder fallback)


maybeDecodeNullable : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecodeNullable key decoder fallback =
    decodeChain (maybeField key decoder fallback)


maybeDecodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeNullableLazy f key decoder fallback =
    decodeChainLazy f (maybeField key decoder fallback)


maybeField : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a)
maybeField key decoder fallback =
    let
        fieldDecoder =
            Json.Decode.field key Json.Decode.value

        valueDecoder =
            Json.Decode.oneOf [ Json.Decode.map Just decoder, Json.Decode.null fallback ]

        decodeObject rawObject =
            case Json.Decode.decodeValue fieldDecoder rawObject of
                Ok rawValue ->
                    case Json.Decode.decodeValue valueDecoder rawValue of
                        Ok value ->
                            Json.Decode.succeed value

                        Err error ->
                            Json.Decode.fail (Json.Decode.errorToString error)

                Err _ ->
                    Json.Decode.succeed fallback
    in
    Json.Decode.value
        |> Json.Decode.andThen decodeObject


decodeChain : Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decodeChain =
    Json.Decode.map2 (|>)


decodeChainLazy : (a -> c) -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeChainLazy f =
    decodeChain << Json.Decode.map f