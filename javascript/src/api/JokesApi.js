/**
 * Humor API
 * Awesome Humor API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@humorapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnalyzeJoke200Response from '../model/AnalyzeJoke200Response';
import RandomJoke200Response from '../model/RandomJoke200Response';
import SearchJokes200Response from '../model/SearchJokes200Response';
import SubmitJoke200Response from '../model/SubmitJoke200Response';

/**
* Jokes service.
* @module api/JokesApi
* @version 1.0
*/
export default class JokesApi {

    /**
    * Constructs a new JokesApi. 
    * @alias module:api/JokesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the analyzeJoke operation.
     * @callback module:api/JokesApi~analyzeJokeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyzeJoke200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Analyze Joke
     * Analyze a joke. See https://humorapi.com/docs/#Analyze-Joke for more.
     * @param {Object} opts Optional parameters
     * @param {String} [body] Post the joke as plain text.
     * @param {module:api/JokesApi~analyzeJokeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyzeJoke200Response}
     */
    analyzeJoke(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = AnalyzeJoke200Response;
      return this.apiClient.callApi(
        '/jokes/analyze', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downvoteJoke operation.
     * @callback module:api/JokesApi~downvoteJokeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubmitJoke200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Downvote a Joke
     * Downvote a joke. See https://humorapi.com/docs/#Downvote-Joke for more.
     * @param {Number} id The object's id.
     * @param {module:api/JokesApi~downvoteJokeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubmitJoke200Response}
     */
    downvoteJoke(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling downvoteJoke");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubmitJoke200Response;
      return this.apiClient.callApi(
        '/jokes/{id}/downvote', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the randomJoke operation.
     * @callback module:api/JokesApi~randomJokeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RandomJoke200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Random Joke
     * Get a random joke. See https://humorapi.com/docs/#Random-Joke for more.
     * @param {Object} opts Optional parameters
     * @param {String} [keywords] A comma separated list of keywords.
     * @param {module:model/String} [includeTags] A comma separated list of tags that the joke must have.
     * @param {module:model/String} [excludeTags] A comma separated list of tags that the joke must not have.
     * @param {Number} [minRating] The minimum rating between 0 and 10 the result should have.
     * @param {Number} [maxLength] The maximum number of letters in the joke.
     * @param {module:api/JokesApi~randomJokeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RandomJoke200Response}
     */
    randomJoke(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'keywords': opts['keywords'],
        'include-tags': opts['includeTags'],
        'exclude-tags': opts['excludeTags'],
        'min-rating': opts['minRating'],
        'max-length': opts['maxLength']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RandomJoke200Response;
      return this.apiClient.callApi(
        '/jokes/random', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchJokes operation.
     * @callback module:api/JokesApi~searchJokesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchJokes200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Jokes
     * Search for jokes. See https://humorapi.com/docs/#Search-Jokes for more.
     * @param {Object} opts Optional parameters
     * @param {String} [keywords] A comma separated list of keywords.
     * @param {module:model/String} [includeTags] A comma separated list of tags that the joke must have.
     * @param {module:model/String} [excludeTags] A comma separated list of tags that the joke must not have.
     * @param {Number} [number] The number of results to retrieve between 1 and 10.
     * @param {Number} [minRating] The minimum rating between 0 and 10 the result should have.
     * @param {Number} [maxLength] The maximum number of letters in the joke.
     * @param {Number} [offset] The number of results to skip.
     * @param {module:api/JokesApi~searchJokesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchJokes200Response}
     */
    searchJokes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'keywords': opts['keywords'],
        'include-tags': opts['includeTags'],
        'exclude-tags': opts['excludeTags'],
        'number': opts['number'],
        'min-rating': opts['minRating'],
        'max-length': opts['maxLength'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchJokes200Response;
      return this.apiClient.callApi(
        '/jokes/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitJoke operation.
     * @callback module:api/JokesApi~submitJokeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubmitJoke200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit Joke
     * Submit a joke. See https://humorapi.com/docs/#Submit-Joke for more.
     * @param {Object} opts Optional parameters
     * @param {String} [body] Post the joke as plain text.
     * @param {module:api/JokesApi~submitJokeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubmitJoke200Response}
     */
    submitJoke(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = SubmitJoke200Response;
      return this.apiClient.callApi(
        '/jokes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the upvoteJoke operation.
     * @callback module:api/JokesApi~upvoteJokeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubmitJoke200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upvote a Joke
     * Upvote a joke. See https://humorapi.com/docs/#Upvote-Joke for more.
     * @param {Number} id The object's id.
     * @param {module:api/JokesApi~upvoteJokeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubmitJoke200Response}
     */
    upvoteJoke(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling upvoteJoke");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubmitJoke200Response;
      return this.apiClient.callApi(
        '/jokes/{id}/upvote', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
